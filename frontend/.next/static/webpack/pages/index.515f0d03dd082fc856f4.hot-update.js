"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./components/Dapp.js":
/*!****************************!*\
  !*** ./components/Dapp.js ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dapp\": function() { return /* binding */ Dapp; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"../node_modules/ethers/dist/ethers.umd.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ethers__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _contracts_BillionDollarCalendar_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contracts/BillionDollarCalendar.json */ \"./contracts/BillionDollarCalendar.json\");\n/* harmony import */ var _contracts_contract_address_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../contracts/contract-address.json */ \"./contracts/contract-address.json\");\n/* harmony import */ var _NoWalletDetected__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./NoWalletDetected */ \"./components/NoWalletDetected.js\");\n/* harmony import */ var _ConnectWallet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ConnectWallet */ \"./components/ConnectWallet.js\");\n/* harmony import */ var _Loading__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Loading */ \"./components/Loading.js\");\n/* harmony import */ var _Transfer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Transfer */ \"./components/Transfer.js\");\n/* harmony import */ var _TransactionErrorMessage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TransactionErrorMessage */ \"./components/TransactionErrorMessage.js\");\n/* harmony import */ var _WaitingForTransactionMessage__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./WaitingForTransactionMessage */ \"./components/WaitingForTransactionMessage.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__);\n/* module decorator */ module = __webpack_require__.hmd(module);\nvar _jsxFileName = \"/Users/brettlamy/Projects/hardhat-hackathon-boilerplate/frontend/components/Dapp.js\";\n // We'll use ethers to interact with the Ethereum network and our contract\n\n // We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\n\n\n // All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\n\n\n\n\n\n\n // This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\n\n\nconst HARDHAT_NETWORK_ID = '31337'; // This is an error code that indicates that the user canceled a transaction\n\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001; // This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\n\nclass Dapp extends (react__WEBPACK_IMPORTED_MODULE_0___default().Component) {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined\n    };\n    this.state = this.initialState;\n  }\n\n  render() {\n    var _window;\n\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (((_window = window) === null || _window === void 0 ? void 0 : _window.ethereum) === undefined) {\n      return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(_NoWalletDetected__WEBPACK_IMPORTED_MODULE_4__.NoWalletDetected, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 14\n      }, this);\n    } // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n\n\n    if (!this.state.selectedAddress) {\n      return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(_ConnectWallet__WEBPACK_IMPORTED_MODULE_5__.ConnectWallet, {\n        connectWallet: () => this._connectWallet(),\n        networkError: this.state.networkError,\n        dismiss: () => this._dismissNetworkError()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n    } // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n\n\n    if (!this.state.selectedAddress) {\n      return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(_Loading__WEBPACK_IMPORTED_MODULE_6__.Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }, this);\n    } // If everything is loaded, we render the application.\n\n\n    return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n      className: \"container p-4\",\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"h1\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"p\", {\n            children: [\"Welcome \", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"b\", {\n              children: this.state.selectedAddress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 23\n            }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"b\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n          className: \"col-12\",\n          children: [this.state.txBeingSent && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(_WaitingForTransactionMessage__WEBPACK_IMPORTED_MODULE_9__.WaitingForTransactionMessage, {\n            txHash: this.state.txBeingSent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), this.state.transactionError && /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(_TransactionErrorMessage__WEBPACK_IMPORTED_MODULE_8__.TransactionErrorMessage, {\n            message: this._getRpcErrorMessage(this.state.transactionError),\n            dismiss: () => this._dismissTransactionError()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            title: this.state.nov10 !== \"0x0000000000000000000000000000000000000000\" ? `Owned by ${this.state.nov10}` : \"Buy Now\",\n            disabled: this.state.nov10 !== \"0x0000000000000000000000000000000000000000\",\n            onClick: () => this._buyDate(11, 10, 2020),\n            children: \"buy 11/10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            title: this.state.nov11 !== \"0x0000000000000000000000000000000000000000\" ? `Owned by ${this.state.nov11}` : \"Buy Now\",\n            disabled: this.state.nov11 !== \"0x0000000000000000000000000000000000000000\",\n            onClick: () => this._buyDate(11, 11, 2020),\n            children: \"buy 11/11\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            title: this.state.nov12 !== \"0x0000000000000000000000000000000000000000\" ? `Owned by ${this.state.nov12}` : \"Buy Now\",\n            disabled: this.state.nov12 !== \"0x0000000000000000000000000000000000000000\",\n            onClick: () => this._buyDate(11, 12, 2020),\n            children: \"buy 11/12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            title: this.state.nov13 !== \"0x0000000000000000000000000000000000000000\" ? `Owned by ${this.state.nov13}` : \"Buy Now\",\n            disabled: this.state.nov13 !== \"0x0000000000000000000000000000000000000000\",\n            onClick: () => this._buyDate(11, 13, 2020),\n            children: \"buy 11/13\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            title: this.state.nov14 !== \"0x0000000000000000000000000000000000000000\" ? `Owned by ${this.state.nov14}` : \"Buy Now\",\n            disabled: this.state.nov14 !== \"0x0000000000000000000000000000000000000000\",\n            onClick: () => this._buyDate(11, 14, 2020),\n            children: \"buy 11/14\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxDEV)(\"button\", {\n            title: this.state.nov15 !== \"0x0000000000000000000000000000000000000000\" ? `Owned by ${this.state.nov15}` : \"Buy Now\",\n            disabled: this.state.nov15 !== \"0x0000000000000000000000000000000000000000\",\n            onClick: () => this._buyDate(11, 152, 2020),\n            children: \"buy 11/15\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable(); // Once we have the address, we can initialize the application.\n    // First we check the network\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress); // We reinitialize it whenever the user changes their account.\n\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    }); // We reset the dapp state if the network is changed\n\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    }); // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n\n    this._intializeEthers();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.providers.Web3Provider(window.ethereum); // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n\n    this._calendar = new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.Contract(_contracts_contract_address_json__WEBPACK_IMPORTED_MODULE_3__.BillionDollarCalendar, _contracts_BillionDollarCalendar_json__WEBPACK_IMPORTED_MODULE_2__.abi, this._provider.getSigner(0));\n    const nov10 = (await this._calendar.dateOwners(\"11/10/2020\"))[0];\n    const nov11 = (await this._calendar.dateOwners(\"11/11/2020\"))[0];\n    const nov12 = (await this._calendar.dateOwners(\"11/12/2020\"))[0];\n    const nov13 = (await this._calendar.dateOwners(\"11/13/2020\"))[0];\n    const nov14 = (await this._calendar.dateOwners(\"11/14/2020\"))[0];\n    const nov15 = (await this._calendar.dateOwners(\"11/15/2020\"))[0];\n    this.setState({\n      nov10,\n      nov11,\n      nov12,\n      nov13,\n      nov14,\n      nov15\n    });\n  } // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n\n\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx = await this._calendar.transfer(to, amount);\n      this.setState({\n        txBeingSent: tx.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx.wait(); // The receipt, contains a status flag, which is 0 to indicate an error.\n\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      } // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n\n\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      } // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  } // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n\n\n  async _buyDate(month, day, year) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx = await this._calendar.buyDate(month, day, year, 123123123);\n      this.setState({\n        txBeingSent: tx.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx.wait(); // The receipt, contains a status flag, which is 0 to indicate an error.\n\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      } // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      // await this._updateBalance();\n\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      } // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  } // This method just clears part of the state.\n\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  } // This method just clears part of the state.\n\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  } // This is an utility method that turns an RPC error into a human readable\n  // message.\n\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  } // This method resets the state\n\n\n  _resetState() {\n    this.setState(this.initialState);\n  } // This method checks if Metamask selected network is Localhost:8545 \n\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n    return false;\n  }\n\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Dapp);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ0FXLEVBQUFBLG9CQUFvQixHQUFHO0FBQ3JCLFNBQUtrQixRQUFMLENBQWM7QUFBRXhCLE1BQUFBLFlBQVksRUFBRUw7QUFBaEIsS0FBZDtBQUNELEdBeld1QyxDQTJXeEM7QUFDQTs7O0FBQ0FZLEVBQUFBLG1CQUFtQixDQUFDdUMsS0FBRCxFQUFRO0FBQ3pCLFFBQUlBLEtBQUssQ0FBQ08sSUFBVixFQUFnQjtBQUNkLGFBQU9QLEtBQUssQ0FBQ08sSUFBTixDQUFXQyxPQUFsQjtBQUNEOztBQUVELFdBQU9SLEtBQUssQ0FBQ1EsT0FBYjtBQUNELEdBblh1QyxDQXFYeEM7OztBQUNBakMsRUFBQUEsV0FBVyxHQUFHO0FBQ1osU0FBS0csUUFBTCxDQUFjLEtBQUsvQixZQUFuQjtBQUNELEdBeFh1QyxDQTBYeEM7OztBQUNBd0IsRUFBQUEsYUFBYSxHQUFHO0FBQ2QsUUFBSWQsTUFBTSxDQUFDQyxRQUFQLENBQWdCbUQsY0FBaEIsS0FBbUNwRSxrQkFBdkMsRUFBMkQ7QUFDekQsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBS3FDLFFBQUwsQ0FBYztBQUNaeEIsTUFBQUEsWUFBWSxFQUFFO0FBREYsS0FBZDtBQUlBLFdBQU8sS0FBUDtBQUNEOztBQXJZdUM7QUF3WTFDLCtEQUFlWCxJQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbXBvbmVudHMvRGFwcC5qcz9iNmQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuLy8gV2UnbGwgdXNlIGV0aGVycyB0byBpbnRlcmFjdCB3aXRoIHRoZSBFdGhlcmV1bSBuZXR3b3JrIGFuZCBvdXIgY29udHJhY3RcbmltcG9ydCB7IGV0aGVycyB9IGZyb20gXCJldGhlcnNcIjtcblxuLy8gV2UgaW1wb3J0IHRoZSBjb250cmFjdCdzIGFydGlmYWN0cyBhbmQgYWRkcmVzcyBoZXJlLCBhcyB3ZSBhcmUgZ29pbmcgdG8gYmVcbi8vIHVzaW5nIHRoZW0gd2l0aCBldGhlcnNcbmltcG9ydCBCaWxsaW9uRG9sbGFyQ2FsZW5kYXJBcnRpZmFjdCBmcm9tIFwiLi4vY29udHJhY3RzL0JpbGxpb25Eb2xsYXJDYWxlbmRhci5qc29uXCI7XG5pbXBvcnQgY29udHJhY3RBZGRyZXNzIGZyb20gXCIuLi9jb250cmFjdHMvY29udHJhY3QtYWRkcmVzcy5qc29uXCI7XG5cbi8vIEFsbCB0aGUgbG9naWMgb2YgdGhpcyBkYXBwIGlzIGNvbnRhaW5lZCBpbiB0aGUgRGFwcCBjb21wb25lbnQuXG4vLyBUaGVzZSBvdGhlciBjb21wb25lbnRzIGFyZSBqdXN0IHByZXNlbnRhdGlvbmFsIG9uZXM6IHRoZXkgZG9uJ3QgaGF2ZSBhbnlcbi8vIGxvZ2ljLiBUaGV5IGp1c3QgcmVuZGVyIEhUTUwuXG5pbXBvcnQgeyBOb1dhbGxldERldGVjdGVkIH0gZnJvbSBcIi4vTm9XYWxsZXREZXRlY3RlZFwiO1xuaW1wb3J0IHsgQ29ubmVjdFdhbGxldCB9IGZyb20gXCIuL0Nvbm5lY3RXYWxsZXRcIjtcbmltcG9ydCB7IExvYWRpbmcgfSBmcm9tIFwiLi9Mb2FkaW5nXCI7XG5pbXBvcnQgeyBUcmFuc2ZlciB9IGZyb20gXCIuL1RyYW5zZmVyXCI7XG5pbXBvcnQgeyBUcmFuc2FjdGlvbkVycm9yTWVzc2FnZSB9IGZyb20gXCIuL1RyYW5zYWN0aW9uRXJyb3JNZXNzYWdlXCI7XG5pbXBvcnQgeyBXYWl0aW5nRm9yVHJhbnNhY3Rpb25NZXNzYWdlIH0gZnJvbSBcIi4vV2FpdGluZ0ZvclRyYW5zYWN0aW9uTWVzc2FnZVwiO1xuXG4vLyBUaGlzIGlzIHRoZSBIYXJkaGF0IE5ldHdvcmsgaWQsIHlvdSBtaWdodCBjaGFuZ2UgaXQgaW4gdGhlIGhhcmRoYXQuY29uZmlnLmpzXG4vLyBIZXJlJ3MgYSBsaXN0IG9mIG5ldHdvcmsgaWRzIGh0dHBzOi8vZG9jcy5tZXRhbWFzay5pby9ndWlkZS9ldGhlcmV1bS1wcm92aWRlci5odG1sI3Byb3BlcnRpZXNcbi8vIHRvIHVzZSB3aGVuIGRlcGxveWluZyB0byBvdGhlciBuZXR3b3Jrcy5cbmNvbnN0IEhBUkRIQVRfTkVUV09SS19JRCA9ICczMTMzNyc7XG5cbi8vIFRoaXMgaXMgYW4gZXJyb3IgY29kZSB0aGF0IGluZGljYXRlcyB0aGF0IHRoZSB1c2VyIGNhbmNlbGVkIGEgdHJhbnNhY3Rpb25cbmNvbnN0IEVSUk9SX0NPREVfVFhfUkVKRUNURURfQllfVVNFUiA9IDQwMDE7XG5cbi8vIFRoaXMgY29tcG9uZW50IGlzIGluIGNoYXJnZSBvZiBkb2luZyB0aGVzZSB0aGluZ3M6XG4vLyAgIDEuIEl0IGNvbm5lY3RzIHRvIHRoZSB1c2VyJ3Mgd2FsbGV0XG4vLyAgIDIuIEluaXRpYWxpemVzIGV0aGVycyBhbmQgdGhlIFRva2VuIGNvbnRyYWN0XG4vLyAgIDMuIFBvbGxzIHRoZSB1c2VyIGJhbGFuY2UgdG8ga2VlcCBpdCB1cGRhdGVkLlxuLy8gICA0LiBUcmFuc2ZlcnMgdG9rZW5zIGJ5IHNlbmRpbmcgdHJhbnNhY3Rpb25zXG4vLyAgIDUuIFJlbmRlcnMgdGhlIHdob2xlIGFwcGxpY2F0aW9uXG4vL1xuLy8gTm90ZSB0aGF0ICgzKSBhbmQgKDQpIGFyZSBzcGVjaWZpYyBvZiB0aGlzIHNhbXBsZSBhcHBsaWNhdGlvbiwgYnV0IHRoZXkgc2hvd1xuLy8geW91IGhvdyB0byBrZWVwIHlvdXIgRGFwcCBhbmQgY29udHJhY3QncyBzdGF0ZSBpbiBzeW5jLCAgYW5kIGhvdyB0byBzZW5kIGFcbi8vIHRyYW5zYWN0aW9uLlxuZXhwb3J0IGNsYXNzIERhcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIC8vIFdlIHN0b3JlIG11bHRpcGxlIHRoaW5ncyBpbiBEYXBwJ3Mgc3RhdGUuXG4gICAgLy8gWW91IGRvbid0IG5lZWQgdG8gZm9sbG93IHRoaXMgcGF0dGVybiwgYnV0IGl0J3MgYW4gdXNlZnVsIGV4YW1wbGUuXG4gICAgdGhpcy5pbml0aWFsU3RhdGUgPSB7XG4gICAgICAvLyBUaGUgaW5mbyBvZiB0aGUgdG9rZW4gKGkuZS4gSXQncyBOYW1lIGFuZCBzeW1ib2wpXG4gICAgICB0b2tlbkRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFRoZSB1c2VyJ3MgYWRkcmVzcyBhbmQgYmFsYW5jZVxuICAgICAgc2VsZWN0ZWRBZGRyZXNzOiB1bmRlZmluZWQsXG4gICAgICBiYWxhbmNlOiB1bmRlZmluZWQsXG4gICAgICAvLyBUaGUgSUQgYWJvdXQgdHJhbnNhY3Rpb25zIGJlaW5nIHNlbnQsIGFuZCBhbnkgcG9zc2libGUgZXJyb3Igd2l0aCB0aGVtXG4gICAgICB0eEJlaW5nU2VudDogdW5kZWZpbmVkLFxuICAgICAgdHJhbnNhY3Rpb25FcnJvcjogdW5kZWZpbmVkLFxuICAgICAgbmV0d29ya0Vycm9yOiB1bmRlZmluZWQsXG4gICAgfTtcblxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICAvLyBFdGhlcmV1bSB3YWxsZXRzIGluamVjdCB0aGUgd2luZG93LmV0aGVyZXVtIG9iamVjdC4gSWYgaXQgaGFzbid0IGJlZW5cbiAgICAvLyBpbmplY3RlZCwgd2UgaW5zdHJ1Y3QgdGhlIHVzZXIgdG8gaW5zdGFsbCBNZXRhTWFzay5cbiAgICBpZiAod2luZG93Py5ldGhlcmV1bSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gPE5vV2FsbGV0RGV0ZWN0ZWQgLz47XG4gICAgfVxuXG4gICAgLy8gVGhlIG5leHQgdGhpbmcgd2UgbmVlZCB0byBkbywgaXMgdG8gYXNrIHRoZSB1c2VyIHRvIGNvbm5lY3QgdGhlaXIgd2FsbGV0LlxuICAgIC8vIFdoZW4gdGhlIHdhbGxldCBnZXRzIGNvbm5lY3RlZCwgd2UgYXJlIGdvaW5nIHRvIHNhdmUgdGhlIHVzZXJzJ3MgYWRkcmVzc1xuICAgIC8vIGluIHRoZSBjb21wb25lbnQncyBzdGF0ZS4gU28sIGlmIGl0IGhhc24ndCBiZWVuIHNhdmVkIHlldCwgd2UgaGF2ZVxuICAgIC8vIHRvIHNob3cgdGhlIENvbm5lY3RXYWxsZXQgY29tcG9uZW50LlxuICAgIC8vXG4gICAgLy8gTm90ZSB0aGF0IHdlIHBhc3MgaXQgYSBjYWxsYmFjayB0aGF0IGlzIGdvaW5nIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSB1c2VyXG4gICAgLy8gY2xpY2tzIGEgYnV0dG9uLiBUaGlzIGNhbGxiYWNrIGp1c3QgY2FsbHMgdGhlIF9jb25uZWN0V2FsbGV0IG1ldGhvZC5cbiAgICBpZiAoIXRoaXMuc3RhdGUuc2VsZWN0ZWRBZGRyZXNzKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Q29ubmVjdFdhbGxldCBcbiAgICAgICAgICBjb25uZWN0V2FsbGV0PXsoKSA9PiB0aGlzLl9jb25uZWN0V2FsbGV0KCl9IFxuICAgICAgICAgIG5ldHdvcmtFcnJvcj17dGhpcy5zdGF0ZS5uZXR3b3JrRXJyb3J9XG4gICAgICAgICAgZGlzbWlzcz17KCkgPT4gdGhpcy5fZGlzbWlzc05ldHdvcmtFcnJvcigpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgdG9rZW4gZGF0YSBvciB0aGUgdXNlcidzIGJhbGFuY2UgaGFzbid0IGxvYWRlZCB5ZXQsIHdlIHNob3dcbiAgICAvLyBhIGxvYWRpbmcgY29tcG9uZW50LlxuICAgIGlmICghdGhpcy5zdGF0ZS5zZWxlY3RlZEFkZHJlc3MpIHtcbiAgICAgIHJldHVybiA8TG9hZGluZyAvPjtcbiAgICB9XG5cbiAgICAvLyBJZiBldmVyeXRoaW5nIGlzIGxvYWRlZCwgd2UgcmVuZGVyIHRoZSBhcHBsaWNhdGlvbi5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgcC00XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTJcIj5cbiAgICAgICAgICAgIDxoMT5cbiAgICAgICAgICAgICAgey8qIHt0aGlzLnN0YXRlLnRva2VuRGF0YS5uYW1lfSAoe3RoaXMuc3RhdGUudG9rZW5EYXRhLnN5bWJvbH0pICovfVxuICAgICAgICAgICAgPC9oMT5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICBXZWxjb21lIDxiPnt0aGlzLnN0YXRlLnNlbGVjdGVkQWRkcmVzc308L2I+XG4gICAgICAgICAgICAgIDxiPlxuICAgICAgICAgICAgICAgIHsvKiB7dGhpcy5zdGF0ZS5iYWxhbmNlLnRvU3RyaW5nKCl9IHt0aGlzLnN0YXRlLnRva2VuRGF0YS5zeW1ib2x9ICovfVxuICAgICAgICAgICAgICA8L2I+XG4gICAgICAgICAgICAgIC5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGhyIC8+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMlwiPlxuICAgICAgICAgICAgey8qIFxuICAgICAgICAgICAgICBTZW5kaW5nIGEgdHJhbnNhY3Rpb24gaXNuJ3QgYW4gaW1taWRpYXRlIGFjdGlvbi4gWW91IGhhdmUgdG8gd2FpdFxuICAgICAgICAgICAgICBmb3IgaXQgdG8gYmUgbWluZWQuXG4gICAgICAgICAgICAgIElmIHdlIGFyZSB3YWl0aW5nIGZvciBvbmUsIHdlIHNob3cgYSBtZXNzYWdlIGhlcmUuXG4gICAgICAgICAgICAqL31cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLnR4QmVpbmdTZW50ICYmIChcbiAgICAgICAgICAgICAgPFdhaXRpbmdGb3JUcmFuc2FjdGlvbk1lc3NhZ2UgdHhIYXNoPXt0aGlzLnN0YXRlLnR4QmVpbmdTZW50fSAvPlxuICAgICAgICAgICAgKX1cblxuICAgICAgICAgICAgey8qIFxuICAgICAgICAgICAgICBTZW5kaW5nIGEgdHJhbnNhY3Rpb24gY2FuIGZhaWwgaW4gbXVsdGlwbGUgd2F5cy4gXG4gICAgICAgICAgICAgIElmIHRoYXQgaGFwcGVuZWQsIHdlIHNob3cgYSBtZXNzYWdlIGhlcmUuXG4gICAgICAgICAgICAqL31cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLnRyYW5zYWN0aW9uRXJyb3IgJiYgKFxuICAgICAgICAgICAgICA8VHJhbnNhY3Rpb25FcnJvck1lc3NhZ2VcbiAgICAgICAgICAgICAgICBtZXNzYWdlPXt0aGlzLl9nZXRScGNFcnJvck1lc3NhZ2UodGhpcy5zdGF0ZS50cmFuc2FjdGlvbkVycm9yKX1cbiAgICAgICAgICAgICAgICBkaXNtaXNzPXsoKSA9PiB0aGlzLl9kaXNtaXNzVHJhbnNhY3Rpb25FcnJvcigpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMlwiPlxuICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLm5vdjEwICE9PSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiID8gYE93bmVkIGJ5ICR7dGhpcy5zdGF0ZS5ub3YxMH1gIDogXCJCdXkgTm93XCJ9IFxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5ub3YxMCAhPT0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIn0gXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuX2J1eURhdGUoMTEsIDEwLCAyMDIwKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGJ1eSAxMS8xMFxuICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLm5vdjExICE9PSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiID8gYE93bmVkIGJ5ICR7dGhpcy5zdGF0ZS5ub3YxMX1gIDogXCJCdXkgTm93XCJ9IFxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5ub3YxMSAhPT0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIn0gXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuX2J1eURhdGUoMTEsIDExLCAyMDIwKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGJ1eSAxMS8xMVxuICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLm5vdjEyICE9PSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiID8gYE93bmVkIGJ5ICR7dGhpcy5zdGF0ZS5ub3YxMn1gIDogXCJCdXkgTm93XCJ9IFxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5ub3YxMiAhPT0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIn0gXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuX2J1eURhdGUoMTEsIDEyLCAyMDIwKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGJ1eSAxMS8xMlxuICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLm5vdjEzICE9PSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiID8gYE93bmVkIGJ5ICR7dGhpcy5zdGF0ZS5ub3YxM31gIDogXCJCdXkgTm93XCJ9IFxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5ub3YxMyAhPT0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIn0gXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuX2J1eURhdGUoMTEsIDEzLCAyMDIwKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGJ1eSAxMS8xM1xuICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLm5vdjE0ICE9PSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiID8gYE93bmVkIGJ5ICR7dGhpcy5zdGF0ZS5ub3YxNH1gIDogXCJCdXkgTm93XCJ9IFxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5ub3YxNCAhPT0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIn0gXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuX2J1eURhdGUoMTEsIDE0LCAyMDIwKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGJ1eSAxMS8xNFxuICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnN0YXRlLm5vdjE1ICE9PSBcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiID8gYE93bmVkIGJ5ICR7dGhpcy5zdGF0ZS5ub3YxNX1gIDogXCJCdXkgTm93XCJ9IFxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5ub3YxNSAhPT0gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIn0gXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuX2J1eURhdGUoMTEsIDE1MiwgMjAyMCl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBidXkgMTEvMTVcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuXG5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgYXN5bmMgX2Nvbm5lY3RXYWxsZXQoKSB7XG4gICAgLy8gVGhpcyBtZXRob2QgaXMgcnVuIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSBDb25uZWN0LiBJdCBjb25uZWN0cyB0aGVcbiAgICAvLyBkYXBwIHRvIHRoZSB1c2VyJ3Mgd2FsbGV0LCBhbmQgaW5pdGlhbGl6ZXMgaXQuXG5cbiAgICAvLyBUbyBjb25uZWN0IHRvIHRoZSB1c2VyJ3Mgd2FsbGV0LCB3ZSBoYXZlIHRvIHJ1biB0aGlzIG1ldGhvZC5cbiAgICAvLyBJdCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB0byB0aGUgdXNlcidzIGFkZHJlc3MuXG4gICAgY29uc3QgW3NlbGVjdGVkQWRkcmVzc10gPSBhd2FpdCB3aW5kb3cuZXRoZXJldW0uZW5hYmxlKCk7XG5cbiAgICAvLyBPbmNlIHdlIGhhdmUgdGhlIGFkZHJlc3MsIHdlIGNhbiBpbml0aWFsaXplIHRoZSBhcHBsaWNhdGlvbi5cblxuICAgIC8vIEZpcnN0IHdlIGNoZWNrIHRoZSBuZXR3b3JrXG4gICAgaWYgKCF0aGlzLl9jaGVja05ldHdvcmsoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2luaXRpYWxpemUoc2VsZWN0ZWRBZGRyZXNzKTtcblxuICAgIC8vIFdlIHJlaW5pdGlhbGl6ZSBpdCB3aGVuZXZlciB0aGUgdXNlciBjaGFuZ2VzIHRoZWlyIGFjY291bnQuXG4gICAgd2luZG93LmV0aGVyZXVtLm9uKFwiYWNjb3VudHNDaGFuZ2VkXCIsIChbbmV3QWRkcmVzc10pID0+IHtcbiAgICAgIC8vIGBhY2NvdW50c0NoYW5nZWRgIGV2ZW50IGNhbiBiZSB0cmlnZ2VyZWQgd2l0aCBhbiB1bmRlZmluZWQgbmV3QWRkcmVzcy5cbiAgICAgIC8vIFRoaXMgaGFwcGVucyB3aGVuIHRoZSB1c2VyIHJlbW92ZXMgdGhlIERhcHAgZnJvbSB0aGUgXCJDb25uZWN0ZWRcbiAgICAgIC8vIGxpc3Qgb2Ygc2l0ZXMgYWxsb3dlZCBhY2Nlc3MgdG8geW91ciBhZGRyZXNzZXNcIiAoTWV0YW1hc2sgPiBTZXR0aW5ncyA+IENvbm5lY3Rpb25zKVxuICAgICAgLy8gVG8gYXZvaWQgZXJyb3JzLCB3ZSByZXNldCB0aGUgZGFwcCBzdGF0ZSBcbiAgICAgIGlmIChuZXdBZGRyZXNzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdGhpcy5faW5pdGlhbGl6ZShuZXdBZGRyZXNzKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBXZSByZXNldCB0aGUgZGFwcCBzdGF0ZSBpZiB0aGUgbmV0d29yayBpcyBjaGFuZ2VkXG4gICAgd2luZG93LmV0aGVyZXVtLm9uKFwibmV0d29ya0NoYW5nZWRcIiwgKFtuZXR3b3JrSWRdKSA9PiB7XG4gICAgICB0aGlzLl9yZXNldFN0YXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBfaW5pdGlhbGl6ZSh1c2VyQWRkcmVzcykge1xuICAgIC8vIFRoaXMgbWV0aG9kIGluaXRpYWxpemVzIHRoZSBkYXBwXG5cbiAgICAvLyBXZSBmaXJzdCBzdG9yZSB0aGUgdXNlcidzIGFkZHJlc3MgaW4gdGhlIGNvbXBvbmVudCdzIHN0YXRlXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzZWxlY3RlZEFkZHJlc3M6IHVzZXJBZGRyZXNzLFxuICAgIH0pO1xuXG4gICAgLy8gVGhlbiwgd2UgaW5pdGlhbGl6ZSBldGhlcnMsIGZldGNoIHRoZSB0b2tlbidzIGRhdGEsIGFuZCBzdGFydCBwb2xsaW5nXG4gICAgLy8gZm9yIHRoZSB1c2VyJ3MgYmFsYW5jZS5cblxuICAgIC8vIEZldGNoaW5nIHRoZSB0b2tlbiBkYXRhIGFuZCB0aGUgdXNlcidzIGJhbGFuY2UgYXJlIHNwZWNpZmljIHRvIHRoaXNcbiAgICAvLyBzYW1wbGUgcHJvamVjdCwgYnV0IHlvdSBjYW4gcmV1c2UgdGhlIHNhbWUgaW5pdGlhbGl6YXRpb24gcGF0dGVybi5cbiAgICB0aGlzLl9pbnRpYWxpemVFdGhlcnMoKTtcbiAgfVxuXG4gIGFzeW5jIF9pbnRpYWxpemVFdGhlcnMoKSB7XG4gICAgLy8gV2UgZmlyc3QgaW5pdGlhbGl6ZSBldGhlcnMgYnkgY3JlYXRpbmcgYSBwcm92aWRlciB1c2luZyB3aW5kb3cuZXRoZXJldW1cbiAgICB0aGlzLl9wcm92aWRlciA9IG5ldyBldGhlcnMucHJvdmlkZXJzLldlYjNQcm92aWRlcih3aW5kb3cuZXRoZXJldW0pO1xuXG4gICAgLy8gV2hlbiwgd2UgaW5pdGlhbGl6ZSB0aGUgY29udHJhY3QgdXNpbmcgdGhhdCBwcm92aWRlciBhbmQgdGhlIHRva2VuJ3NcbiAgICAvLyBhcnRpZmFjdC4gWW91IGNhbiBkbyB0aGlzIHNhbWUgdGhpbmcgd2l0aCB5b3VyIGNvbnRyYWN0cy5cbiAgICB0aGlzLl9jYWxlbmRhciA9IG5ldyBldGhlcnMuQ29udHJhY3QoXG4gICAgICBjb250cmFjdEFkZHJlc3MuQmlsbGlvbkRvbGxhckNhbGVuZGFyLFxuICAgICAgQmlsbGlvbkRvbGxhckNhbGVuZGFyQXJ0aWZhY3QuYWJpLFxuICAgICAgdGhpcy5fcHJvdmlkZXIuZ2V0U2lnbmVyKDApXG4gICAgKTtcblxuICAgIGNvbnN0IG5vdjEwID0gKGF3YWl0IHRoaXMuX2NhbGVuZGFyLmRhdGVPd25lcnMoXCIxMS8xMC8yMDIwXCIpKVswXTtcbiAgICBjb25zdCBub3YxMSA9IChhd2FpdCB0aGlzLl9jYWxlbmRhci5kYXRlT3duZXJzKFwiMTEvMTEvMjAyMFwiKSlbMF07XG4gICAgY29uc3Qgbm92MTIgPSAoYXdhaXQgdGhpcy5fY2FsZW5kYXIuZGF0ZU93bmVycyhcIjExLzEyLzIwMjBcIikpWzBdO1xuICAgIGNvbnN0IG5vdjEzID0gKGF3YWl0IHRoaXMuX2NhbGVuZGFyLmRhdGVPd25lcnMoXCIxMS8xMy8yMDIwXCIpKVswXTtcbiAgICBjb25zdCBub3YxNCA9IChhd2FpdCB0aGlzLl9jYWxlbmRhci5kYXRlT3duZXJzKFwiMTEvMTQvMjAyMFwiKSlbMF07XG4gICAgY29uc3Qgbm92MTUgPSAoYXdhaXQgdGhpcy5fY2FsZW5kYXIuZGF0ZU93bmVycyhcIjExLzE1LzIwMjBcIikpWzBdO1xuICAgIHRoaXMuc2V0U3RhdGUoIHtcbiAgICAgIG5vdjEwLFxubm92MTEsXG5ub3YxMixcbm5vdjEzLFxubm92MTQsXG5ub3YxNSxcbiAgICB9KVxuICB9XG5cbiAgLy8gVGhpcyBtZXRob2Qgc2VuZHMgYW4gZXRoZXJldW0gdHJhbnNhY3Rpb24gdG8gdHJhbnNmZXIgdG9rZW5zLlxuICAvLyBXaGlsZSB0aGlzIGFjdGlvbiBpcyBzcGVjaWZpYyB0byB0aGlzIGFwcGxpY2F0aW9uLCBpdCBpbGx1c3RyYXRlcyBob3cgdG9cbiAgLy8gc2VuZCBhIHRyYW5zYWN0aW9uLlxuICBhc3luYyBfdHJhbnNmZXJUb2tlbnModG8sIGFtb3VudCkge1xuICAgIC8vIFNlbmRpbmcgYSB0cmFuc2FjdGlvbiBpcyBhIGNvbXBsZXggb3BlcmF0aW9uOlxuICAgIC8vICAgLSBUaGUgdXNlciBjYW4gcmVqZWN0IGl0XG4gICAgLy8gICAtIEl0IGNhbiBmYWlsIGJlZm9yZSByZWFjaGluZyB0aGUgZXRoZXJldW0gbmV0d29yayAoaS5lLiBpZiB0aGUgdXNlclxuICAgIC8vICAgICBkb2Vzbid0IGhhdmUgRVRIIGZvciBwYXlpbmcgZm9yIHRoZSB0eCdzIGdhcylcbiAgICAvLyAgIC0gSXQgaGFzIHRvIGJlIG1pbmVkLCBzbyBpdCBpc24ndCBpbW1lZGlhdGVseSBjb25maXJtZWQuXG4gICAgLy8gICAgIE5vdGUgdGhhdCBzb21lIHRlc3RpbmcgbmV0d29ya3MsIGxpa2UgSGFyZGhhdCBOZXR3b3JrLCBkbyBtaW5lXG4gICAgLy8gICAgIHRyYW5zYWN0aW9ucyBpbW1lZGlhdGVseSwgYnV0IHlvdXIgZGFwcCBzaG91bGQgYmUgcHJlcGFyZWQgZm9yXG4gICAgLy8gICAgIG90aGVyIG5ldHdvcmtzLlxuICAgIC8vICAgLSBJdCBjYW4gZmFpbCBvbmNlIG1pbmVkLlxuICAgIC8vXG4gICAgLy8gVGhpcyBtZXRob2QgaGFuZGxlcyBhbGwgb2YgdGhvc2UgdGhpbmdzLCBzbyBrZWVwIHJlYWRpbmcgdG8gbGVhcm4gaG93IHRvXG4gICAgLy8gZG8gaXQuXG5cbiAgICB0cnkge1xuICAgICAgLy8gSWYgYSB0cmFuc2FjdGlvbiBmYWlscywgd2Ugc2F2ZSB0aGF0IGVycm9yIGluIHRoZSBjb21wb25lbnQncyBzdGF0ZS5cbiAgICAgIC8vIFdlIG9ubHkgc2F2ZSBvbmUgc3VjaCBlcnJvciwgc28gYmVmb3JlIHNlbmRpbmcgYSBzZWNvbmQgdHJhbnNhY3Rpb24sIHdlXG4gICAgICAvLyBjbGVhciBpdC5cbiAgICAgIHRoaXMuX2Rpc21pc3NUcmFuc2FjdGlvbkVycm9yKCk7XG5cbiAgICAgIC8vIFdlIHNlbmQgdGhlIHRyYW5zYWN0aW9uLCBhbmQgc2F2ZSBpdHMgaGFzaCBpbiB0aGUgRGFwcCdzIHN0YXRlLiBUaGlzXG4gICAgICAvLyB3YXkgd2UgY2FuIGluZGljYXRlIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIGl0IHRvIGJlIG1pbmVkLlxuICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLl9jYWxlbmRhci50cmFuc2Zlcih0bywgYW1vdW50KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0eEJlaW5nU2VudDogdHguaGFzaCB9KTtcblxuICAgICAgLy8gV2UgdXNlIC53YWl0KCkgdG8gd2FpdCBmb3IgdGhlIHRyYW5zYWN0aW9uIHRvIGJlIG1pbmVkLiBUaGlzIG1ldGhvZFxuICAgICAgLy8gcmV0dXJucyB0aGUgdHJhbnNhY3Rpb24ncyByZWNlaXB0LlxuICAgICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHR4LndhaXQoKTtcblxuICAgICAgLy8gVGhlIHJlY2VpcHQsIGNvbnRhaW5zIGEgc3RhdHVzIGZsYWcsIHdoaWNoIGlzIDAgdG8gaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAgICBpZiAocmVjZWlwdC5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgLy8gV2UgY2FuJ3Qga25vdyB0aGUgZXhhY3QgZXJyb3IgdGhhdCBtYWRlIHRoZSB0cmFuc2FjdGlvbiBmYWlsIHdoZW4gaXRcbiAgICAgICAgLy8gd2FzIG1pbmVkLCBzbyB3ZSB0aHJvdyB0aGlzIGdlbmVyaWMgb25lLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBmYWlsZWRcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGdvdCBoZXJlLCB0aGUgdHJhbnNhY3Rpb24gd2FzIHN1Y2Nlc3NmdWwsIHNvIHlvdSBtYXkgd2FudCB0b1xuICAgICAgLy8gdXBkYXRlIHlvdXIgc3RhdGUuIEhlcmUsIHdlIHVwZGF0ZSB0aGUgdXNlcidzIGJhbGFuY2UuXG4gICAgICBhd2FpdCB0aGlzLl91cGRhdGVCYWxhbmNlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFdlIGNoZWNrIHRoZSBlcnJvciBjb2RlIHRvIHNlZSBpZiB0aGlzIGVycm9yIHdhcyBwcm9kdWNlZCBiZWNhdXNlIHRoZVxuICAgICAgLy8gdXNlciByZWplY3RlZCBhIHR4LiBJZiB0aGF0J3MgdGhlIGNhc2UsIHdlIGRvIG5vdGhpbmcuXG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gRVJST1JfQ09ERV9UWF9SRUpFQ1RFRF9CWV9VU0VSKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXIgZXJyb3JzIGFyZSBsb2dnZWQgYW5kIHN0b3JlZCBpbiB0aGUgRGFwcCdzIHN0YXRlLiBUaGlzIGlzIHVzZWQgdG9cbiAgICAgIC8vIHNob3cgdGhlbSB0byB0aGUgdXNlciwgYW5kIGZvciBkZWJ1Z2dpbmcuXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0cmFuc2FjdGlvbkVycm9yOiBlcnJvciB9KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gSWYgd2UgbGVhdmUgdGhlIHRyeS9jYXRjaCwgd2UgYXJlbid0IHNlbmRpbmcgYSB0eCBhbnltb3JlLCBzbyB3ZSBjbGVhclxuICAgICAgLy8gdGhpcyBwYXJ0IG9mIHRoZSBzdGF0ZS5cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0eEJlaW5nU2VudDogdW5kZWZpbmVkIH0pO1xuICAgIH1cbiAgfVxuXG4gICAgLy8gVGhpcyBtZXRob2Qgc2VuZHMgYW4gZXRoZXJldW0gdHJhbnNhY3Rpb24gdG8gdHJhbnNmZXIgdG9rZW5zLlxuICAvLyBXaGlsZSB0aGlzIGFjdGlvbiBpcyBzcGVjaWZpYyB0byB0aGlzIGFwcGxpY2F0aW9uLCBpdCBpbGx1c3RyYXRlcyBob3cgdG9cbiAgLy8gc2VuZCBhIHRyYW5zYWN0aW9uLlxuICBhc3luYyBfYnV5RGF0ZShtb250aCwgZGF5LCB5ZWFyKSB7XG4gICAgLy8gU2VuZGluZyBhIHRyYW5zYWN0aW9uIGlzIGEgY29tcGxleCBvcGVyYXRpb246XG4gICAgLy8gICAtIFRoZSB1c2VyIGNhbiByZWplY3QgaXRcbiAgICAvLyAgIC0gSXQgY2FuIGZhaWwgYmVmb3JlIHJlYWNoaW5nIHRoZSBldGhlcmV1bSBuZXR3b3JrIChpLmUuIGlmIHRoZSB1c2VyXG4gICAgLy8gICAgIGRvZXNuJ3QgaGF2ZSBFVEggZm9yIHBheWluZyBmb3IgdGhlIHR4J3MgZ2FzKVxuICAgIC8vICAgLSBJdCBoYXMgdG8gYmUgbWluZWQsIHNvIGl0IGlzbid0IGltbWVkaWF0ZWx5IGNvbmZpcm1lZC5cbiAgICAvLyAgICAgTm90ZSB0aGF0IHNvbWUgdGVzdGluZyBuZXR3b3JrcywgbGlrZSBIYXJkaGF0IE5ldHdvcmssIGRvIG1pbmVcbiAgICAvLyAgICAgdHJhbnNhY3Rpb25zIGltbWVkaWF0ZWx5LCBidXQgeW91ciBkYXBwIHNob3VsZCBiZSBwcmVwYXJlZCBmb3JcbiAgICAvLyAgICAgb3RoZXIgbmV0d29ya3MuXG4gICAgLy8gICAtIEl0IGNhbiBmYWlsIG9uY2UgbWluZWQuXG4gICAgLy9cbiAgICAvLyBUaGlzIG1ldGhvZCBoYW5kbGVzIGFsbCBvZiB0aG9zZSB0aGluZ3MsIHNvIGtlZXAgcmVhZGluZyB0byBsZWFybiBob3cgdG9cbiAgICAvLyBkbyBpdC5cblxuICAgIHRyeSB7XG4gICAgICAvLyBJZiBhIHRyYW5zYWN0aW9uIGZhaWxzLCB3ZSBzYXZlIHRoYXQgZXJyb3IgaW4gdGhlIGNvbXBvbmVudCdzIHN0YXRlLlxuICAgICAgLy8gV2Ugb25seSBzYXZlIG9uZSBzdWNoIGVycm9yLCBzbyBiZWZvcmUgc2VuZGluZyBhIHNlY29uZCB0cmFuc2FjdGlvbiwgd2VcbiAgICAgIC8vIGNsZWFyIGl0LlxuICAgICAgdGhpcy5fZGlzbWlzc1RyYW5zYWN0aW9uRXJyb3IoKTtcblxuICAgICAgLy8gV2Ugc2VuZCB0aGUgdHJhbnNhY3Rpb24sIGFuZCBzYXZlIGl0cyBoYXNoIGluIHRoZSBEYXBwJ3Mgc3RhdGUuIFRoaXNcbiAgICAgIC8vIHdheSB3ZSBjYW4gaW5kaWNhdGUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3IgaXQgdG8gYmUgbWluZWQuXG4gICAgICBjb25zdCB0eCA9IGF3YWl0IHRoaXMuX2NhbGVuZGFyLmJ1eURhdGUobW9udGgsIGRheSwgeWVhciwgMTIzMTIzMTIzKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0eEJlaW5nU2VudDogdHguaGFzaCB9KTtcblxuICAgICAgLy8gV2UgdXNlIC53YWl0KCkgdG8gd2FpdCBmb3IgdGhlIHRyYW5zYWN0aW9uIHRvIGJlIG1pbmVkLiBUaGlzIG1ldGhvZFxuICAgICAgLy8gcmV0dXJucyB0aGUgdHJhbnNhY3Rpb24ncyByZWNlaXB0LlxuICAgICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHR4LndhaXQoKTtcblxuICAgICAgLy8gVGhlIHJlY2VpcHQsIGNvbnRhaW5zIGEgc3RhdHVzIGZsYWcsIHdoaWNoIGlzIDAgdG8gaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAgICBpZiAocmVjZWlwdC5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgLy8gV2UgY2FuJ3Qga25vdyB0aGUgZXhhY3QgZXJyb3IgdGhhdCBtYWRlIHRoZSB0cmFuc2FjdGlvbiBmYWlsIHdoZW4gaXRcbiAgICAgICAgLy8gd2FzIG1pbmVkLCBzbyB3ZSB0aHJvdyB0aGlzIGdlbmVyaWMgb25lLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2FjdGlvbiBmYWlsZWRcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGdvdCBoZXJlLCB0aGUgdHJhbnNhY3Rpb24gd2FzIHN1Y2Nlc3NmdWwsIHNvIHlvdSBtYXkgd2FudCB0b1xuICAgICAgLy8gdXBkYXRlIHlvdXIgc3RhdGUuIEhlcmUsIHdlIHVwZGF0ZSB0aGUgdXNlcidzIGJhbGFuY2UuXG4gICAgICAvLyBhd2FpdCB0aGlzLl91cGRhdGVCYWxhbmNlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFdlIGNoZWNrIHRoZSBlcnJvciBjb2RlIHRvIHNlZSBpZiB0aGlzIGVycm9yIHdhcyBwcm9kdWNlZCBiZWNhdXNlIHRoZVxuICAgICAgLy8gdXNlciByZWplY3RlZCBhIHR4LiBJZiB0aGF0J3MgdGhlIGNhc2UsIHdlIGRvIG5vdGhpbmcuXG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gRVJST1JfQ09ERV9UWF9SRUpFQ1RFRF9CWV9VU0VSKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXIgZXJyb3JzIGFyZSBsb2dnZWQgYW5kIHN0b3JlZCBpbiB0aGUgRGFwcCdzIHN0YXRlLiBUaGlzIGlzIHVzZWQgdG9cbiAgICAgIC8vIHNob3cgdGhlbSB0byB0aGUgdXNlciwgYW5kIGZvciBkZWJ1Z2dpbmcuXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0cmFuc2FjdGlvbkVycm9yOiBlcnJvciB9KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gSWYgd2UgbGVhdmUgdGhlIHRyeS9jYXRjaCwgd2UgYXJlbid0IHNlbmRpbmcgYSB0eCBhbnltb3JlLCBzbyB3ZSBjbGVhclxuICAgICAgLy8gdGhpcyBwYXJ0IG9mIHRoZSBzdGF0ZS5cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0eEJlaW5nU2VudDogdW5kZWZpbmVkIH0pO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gVGhpcyBtZXRob2QganVzdCBjbGVhcnMgcGFydCBvZiB0aGUgc3RhdGUuXG4gIF9kaXNtaXNzVHJhbnNhY3Rpb25FcnJvcigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdHJhbnNhY3Rpb25FcnJvcjogdW5kZWZpbmVkIH0pO1xuICB9XG5cbiAgLy8gVGhpcyBtZXRob2QganVzdCBjbGVhcnMgcGFydCBvZiB0aGUgc3RhdGUuXG4gIF9kaXNtaXNzTmV0d29ya0Vycm9yKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBuZXR3b3JrRXJyb3I6IHVuZGVmaW5lZCB9KTtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgYW4gdXRpbGl0eSBtZXRob2QgdGhhdCB0dXJucyBhbiBSUEMgZXJyb3IgaW50byBhIGh1bWFuIHJlYWRhYmxlXG4gIC8vIG1lc3NhZ2UuXG4gIF9nZXRScGNFcnJvck1lc3NhZ2UoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IuZGF0YSkge1xuICAgICAgcmV0dXJuIGVycm9yLmRhdGEubWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgfVxuXG4gIC8vIFRoaXMgbWV0aG9kIHJlc2V0cyB0aGUgc3RhdGVcbiAgX3Jlc2V0U3RhdGUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmluaXRpYWxTdGF0ZSk7XG4gIH1cblxuICAvLyBUaGlzIG1ldGhvZCBjaGVja3MgaWYgTWV0YW1hc2sgc2VsZWN0ZWQgbmV0d29yayBpcyBMb2NhbGhvc3Q6ODU0NSBcbiAgX2NoZWNrTmV0d29yaygpIHtcbiAgICBpZiAod2luZG93LmV0aGVyZXVtLm5ldHdvcmtWZXJzaW9uID09PSBIQVJESEFUX05FVFdPUktfSUQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBcbiAgICAgIG5ldHdvcmtFcnJvcjogJ1BsZWFzZSBjb25uZWN0IE1ldGFtYXNrIHRvIExvY2FsaG9zdDo4NTQ1J1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhcHA7Il0sIm5hbWVzIjpbIlJlYWN0IiwiZXRoZXJzIiwiQmlsbGlvbkRvbGxhckNhbGVuZGFyQXJ0aWZhY3QiLCJjb250cmFjdEFkZHJlc3MiLCJOb1dhbGxldERldGVjdGVkIiwiQ29ubmVjdFdhbGxldCIsIkxvYWRpbmciLCJUcmFuc2ZlciIsIlRyYW5zYWN0aW9uRXJyb3JNZXNzYWdlIiwiV2FpdGluZ0ZvclRyYW5zYWN0aW9uTWVzc2FnZSIsIkhBUkRIQVRfTkVUV09SS19JRCIsIkVSUk9SX0NPREVfVFhfUkVKRUNURURfQllfVVNFUiIsIkRhcHAiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiaW5pdGlhbFN0YXRlIiwidG9rZW5EYXRhIiwidW5kZWZpbmVkIiwic2VsZWN0ZWRBZGRyZXNzIiwiYmFsYW5jZSIsInR4QmVpbmdTZW50IiwidHJhbnNhY3Rpb25FcnJvciIsIm5ldHdvcmtFcnJvciIsInN0YXRlIiwicmVuZGVyIiwid2luZG93IiwiZXRoZXJldW0iLCJfY29ubmVjdFdhbGxldCIsIl9kaXNtaXNzTmV0d29ya0Vycm9yIiwiX2dldFJwY0Vycm9yTWVzc2FnZSIsIl9kaXNtaXNzVHJhbnNhY3Rpb25FcnJvciIsIm5vdjEwIiwiX2J1eURhdGUiLCJub3YxMSIsIm5vdjEyIiwibm92MTMiLCJub3YxNCIsIm5vdjE1IiwiZW5hYmxlIiwiX2NoZWNrTmV0d29yayIsIl9pbml0aWFsaXplIiwib24iLCJuZXdBZGRyZXNzIiwiX3Jlc2V0U3RhdGUiLCJuZXR3b3JrSWQiLCJ1c2VyQWRkcmVzcyIsInNldFN0YXRlIiwiX2ludGlhbGl6ZUV0aGVycyIsIl9wcm92aWRlciIsInByb3ZpZGVycyIsIldlYjNQcm92aWRlciIsIl9jYWxlbmRhciIsIkNvbnRyYWN0IiwiQmlsbGlvbkRvbGxhckNhbGVuZGFyIiwiYWJpIiwiZ2V0U2lnbmVyIiwiZGF0ZU93bmVycyIsIl90cmFuc2ZlclRva2VucyIsInRvIiwiYW1vdW50IiwidHgiLCJ0cmFuc2ZlciIsImhhc2giLCJyZWNlaXB0Iiwid2FpdCIsInN0YXR1cyIsIkVycm9yIiwiX3VwZGF0ZUJhbGFuY2UiLCJlcnJvciIsImNvZGUiLCJjb25zb2xlIiwibW9udGgiLCJkYXkiLCJ5ZWFyIiwiYnV5RGF0ZSIsImRhdGEiLCJtZXNzYWdlIiwibmV0d29ya1ZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/Dapp.js\n");

/***/ })

});