/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "../node_modules/ethers/dist/ethers.umd.js":
/*!*************************************************!*\
  !*** ../node_modules/ethers/dist/ethers.umd.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* provided dependency */ var process = __webpack_require__(/*! process */ \"../node_modules/process/browser.js\");\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\t0;\n}(this, (function () { 'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\n\tfunction getDefaultExportFromCjs (x) {\n\t\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n\t}\n\n\tfunction createCommonjsModule(fn, basedir, module) {\n\t\treturn module = {\n\t\t\tpath: basedir,\n\t\t\texports: {},\n\t\t\trequire: function (path, base) {\n\t\t\t\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n\t\t\t}\n\t\t}, fn(module, module.exports), module.exports;\n\t}\n\n\tfunction getDefaultExportFromNamespaceIfPresent (n) {\n\t\treturn n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;\n\t}\n\n\tfunction getDefaultExportFromNamespaceIfNotNamed (n) {\n\t\treturn n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;\n\t}\n\n\tfunction getAugmentedNamespace(n) {\n\t\tif (n.__esModule) return n;\n\t\tvar a = Object.defineProperty({}, '__esModule', {value: true});\n\t\tObject.keys(n).forEach(function (k) {\n\t\t\tvar d = Object.getOwnPropertyDescriptor(n, k);\n\t\t\tObject.defineProperty(a, k, d.get ? d : {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn n[k];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn a;\n\t}\n\n\tfunction commonjsRequire () {\n\t\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n\t}\n\n\tvar bn = createCommonjsModule(function (module) {\n\t(function (module, exports) {\n\t  'use strict';\n\n\t  // Utils\n\t  function assert (val, msg) {\n\t    if (!val) throw new Error(msg || 'Assertion failed');\n\t  }\n\n\t  // Could use `inherits` module, but don't want to move from single file\n\t  // architecture yet.\n\t  function inherits (ctor, superCtor) {\n\t    ctor.super_ = superCtor;\n\t    var TempCtor = function () {};\n\t    TempCtor.prototype = superCtor.prototype;\n\t    ctor.prototype = new TempCtor();\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\n\t  // BN\n\n\t  function BN (number, base, endian) {\n\t    if (BN.isBN(number)) {\n\t      return number;\n\t    }\n\n\t    this.negative = 0;\n\t    this.words = null;\n\t    this.length = 0;\n\n\t    // Reduction context\n\t    this.red = null;\n\n\t    if (number !== null) {\n\t      if (base === 'le' || base === 'be') {\n\t        endian = base;\n\t        base = 10;\n\t      }\n\n\t      this._init(number || 0, base || 10, endian || 'be');\n\t    }\n\t  }\n\t  if (typeof module === 'object') {\n\t    module.exports = BN;\n\t  } else {\n\t    exports.BN = BN;\n\t  }\n\n\t  BN.BN = BN;\n\t  BN.wordSize = 26;\n\n\t  var Buffer;\n\t  try {\n\t    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n\t      Buffer = window.Buffer;\n\t    } else {\n\t      Buffer = /*RicMoo:ethers:require(buffer)*/(null).Buffer;\n\t    }\n\t  } catch (e) {\n\t  }\n\n\t  BN.isBN = function isBN (num) {\n\t    if (num instanceof BN) {\n\t      return true;\n\t    }\n\n\t    return num !== null && typeof num === 'object' &&\n\t      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n\t  };\n\n\t  BN.max = function max (left, right) {\n\t    if (left.cmp(right) > 0) return left;\n\t    return right;\n\t  };\n\n\t  BN.min = function min (left, right) {\n\t    if (left.cmp(right) < 0) return left;\n\t    return right;\n\t  };\n\n\t  BN.prototype._init = function init (number, base, endian) {\n\t    if (typeof number === 'number') {\n\t      return this._initNumber(number, base, endian);\n\t    }\n\n\t    if (typeof number === 'object') {\n\t      return this._initArray(number, base, endian);\n\t    }\n\n\t    if (base === 'hex') {\n\t      base = 16;\n\t    }\n\t    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n\t    number = number.toString().replace(/\\s+/g, '');\n\t    var start = 0;\n\t    if (number[0] === '-') {\n\t      start++;\n\t      this.negative = 1;\n\t    }\n\n\t    if (start < number.length) {\n\t      if (base === 16) {\n\t        this._parseHex(number, start, endian);\n\t      } else {\n\t        this._parseBase(number, base, start);\n\t        if (endian === 'le') {\n\t          this._initArray(this.toArray(), base, endian);\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n\t    if (number < 0) {\n\t      this.negative = 1;\n\t      number = -number;\n\t    }\n\t    if (number < 0x4000000) {\n\t      this.words = [ number & 0x3ffffff ];\n\t      this.length = 1;\n\t    } else if (number < 0x10000000000000) {\n\t      this.words = [\n\t        number & 0x3ffffff,\n\t        (number / 0x4000000) & 0x3ffffff\n\t      ];\n\t      this.length = 2;\n\t    } else {\n\t      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n\t      this.words = [\n\t        number & 0x3ffffff,\n\t        (number / 0x4000000) & 0x3ffffff,\n\t        1\n\t      ];\n\t      this.length = 3;\n\t    }\n\n\t    if (endian !== 'le') return;\n\n\t    // Reverse the bytes\n\t    this._initArray(this.toArray(), base, endian);\n\t  };\n\n\t  BN.prototype._initArray = function _initArray (number, base, endian) {\n\t    // Perhaps a Uint8Array\n\t    assert(typeof number.length === 'number');\n\t    if (number.length <= 0) {\n\t      this.words = [ 0 ];\n\t      this.length = 1;\n\t      return this;\n\t    }\n\n\t    this.length = Math.ceil(number.length / 3);\n\t    this.words = new Array(this.length);\n\t    for (var i = 0; i < this.length; i++) {\n\t      this.words[i] = 0;\n\t    }\n\n\t    var j, w;\n\t    var off = 0;\n\t    if (endian === 'be') {\n\t      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n\t        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n\t        this.words[j] |= (w << off) & 0x3ffffff;\n\t        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n\t        off += 24;\n\t        if (off >= 26) {\n\t          off -= 26;\n\t          j++;\n\t        }\n\t      }\n\t    } else if (endian === 'le') {\n\t      for (i = 0, j = 0; i < number.length; i += 3) {\n\t        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n\t        this.words[j] |= (w << off) & 0x3ffffff;\n\t        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n\t        off += 24;\n\t        if (off >= 26) {\n\t          off -= 26;\n\t          j++;\n\t        }\n\t      }\n\t    }\n\t    return this.strip();\n\t  };\n\n\t  function parseHex4Bits (string, index) {\n\t    var c = string.charCodeAt(index);\n\t    // 'A' - 'F'\n\t    if (c >= 65 && c <= 70) {\n\t      return c - 55;\n\t    // 'a' - 'f'\n\t    } else if (c >= 97 && c <= 102) {\n\t      return c - 87;\n\t    // '0' - '9'\n\t    } else {\n\t      return (c - 48) & 0xf;\n\t    }\n\t  }\n\n\t  function parseHexByte (string, lowerBound, index) {\n\t    var r = parseHex4Bits(string, index);\n\t    if (index - 1 >= lowerBound) {\n\t      r |= parseHex4Bits(string, index - 1) << 4;\n\t    }\n\t    return r;\n\t  }\n\n\t  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n\t    // Create possibly bigger array to ensure that it fits the number\n\t    this.length = Math.ceil((number.length - start) / 6);\n\t    this.words = new Array(this.length);\n\t    for (var i = 0; i < this.length; i++) {\n\t      this.words[i] = 0;\n\t    }\n\n\t    // 24-bits chunks\n\t    var off = 0;\n\t    var j = 0;\n\n\t    var w;\n\t    if (endian === 'be') {\n\t      for (i = number.length - 1; i >= start; i -= 2) {\n\t        w = parseHexByte(number, start, i) << off;\n\t        this.words[j] |= w & 0x3ffffff;\n\t        if (off >= 18) {\n\t          off -= 18;\n\t          j += 1;\n\t          this.words[j] |= w >>> 26;\n\t        } else {\n\t          off += 8;\n\t        }\n\t      }\n\t    } else {\n\t      var parseLength = number.length - start;\n\t      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n\t        w = parseHexByte(number, start, i) << off;\n\t        this.words[j] |= w & 0x3ffffff;\n\t        if (off >= 18) {\n\t          off -= 18;\n\t          j += 1;\n\t          this.words[j] |= w >>> 26;\n\t        } else {\n\t          off += 8;\n\t        }\n\t      }\n\t    }\n\n\t    this.strip();\n\t  };\n\n\t  function parseBase (str, start, end, mul) {\n\t    var r = 0;\n\t    var len = Math.min(str.length, end);\n\t    for (var i = start; i < len; i++) {\n\t      var c = str.charCodeAt(i) - 48;\n\n\t      r *= mul;\n\n\t      // 'a'\n\t      if (c >= 49) {\n\t        r += c - 49 + 0xa;\n\n\t      // 'A'\n\t      } else if (c >= 17) {\n\t        r += c - 17 + 0xa;\n\n\t      // '0' - '9'\n\t      } else {\n\t        r += c;\n\t      }\n\t    }\n\t    return r;\n\t  }\n\n\t  BN.prototype._parseBase = function _parseBase (number, base, start) {\n\t    // Initialize as zero\n\t    this.words = [ 0 ];\n\t    this.length = 1;\n\n\t    // Find length of limb in base\n\t    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n\t      limbLen++;\n\t    }\n\t    limbLen--;\n\t    limbPow = (limbPow / base) | 0;\n\n\t    var total = number.length - start;\n\t    var mod = total % limbLen;\n\t    var end = Math.min(total, total - mod) + start;\n\n\t    var word = 0;\n\t    for (var i = start; i < end; i += limbLen) {\n\t      word = parseBase(number, i, i + limbLen, base);\n\n\t      this.imuln(limbPow);\n\t      if (this.words[0] + word < 0x4000000) {\n\t        this.words[0] += word;\n\t      } else {\n\t        this._iaddn(word);\n\t      }\n\t    }\n\n\t    if (mod !== 0) {\n\t      var pow = 1;\n\t      word = parseBase(number, i, number.length, base);\n\n\t      for (i = 0; i < mod; i++) {\n\t        pow *= base;\n\t      }\n\n\t      this.imuln(pow);\n\t      if (this.words[0] + word < 0x4000000) {\n\t        this.words[0] += word;\n\t      } else {\n\t        this._iaddn(word);\n\t      }\n\t    }\n\n\t    this.strip();\n\t  };\n\n\t  BN.prototype.copy = function copy (dest) {\n\t    dest.words = new Array(this.length);\n\t    for (var i = 0; i < this.length; i++) {\n\t      dest.words[i] = this.words[i];\n\t    }\n\t    dest.length = this.length;\n\t    dest.negative = this.negative;\n\t    dest.red = this.red;\n\t  };\n\n\t  BN.prototype.clone = function clone () {\n\t    var r = new BN(null);\n\t    this.copy(r);\n\t    return r;\n\t  };\n\n\t  BN.prototype._expand = function _expand (size) {\n\t    while (this.length < size) {\n\t      this.words[this.length++] = 0;\n\t    }\n\t    return this;\n\t  };\n\n\t  // Remove leading `0` from `this`\n\t  BN.prototype.strip = function strip () {\n\t    while (this.length > 1 && this.words[this.length - 1] === 0) {\n\t      this.length--;\n\t    }\n\t    return this._normSign();\n\t  };\n\n\t  BN.prototype._normSign = function _normSign () {\n\t    // -0 = 0\n\t    if (this.length === 1 && this.words[0] === 0) {\n\t      this.negative = 0;\n\t    }\n\t    return this;\n\t  };\n\n\t  BN.prototype.inspect = function inspect () {\n\t    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n\t  };\n\n\t  /*\n\n\t  var zeros = [];\n\t  var groupSizes = [];\n\t  var groupBases = [];\n\n\t  var s = '';\n\t  var i = -1;\n\t  while (++i < BN.wordSize) {\n\t    zeros[i] = s;\n\t    s += '0';\n\t  }\n\t  groupSizes[0] = 0;\n\t  groupSizes[1] = 0;\n\t  groupBases[0] = 0;\n\t  groupBases[1] = 0;\n\t  var base = 2 - 1;\n\t  while (++base < 36 + 1) {\n\t    var groupSize = 0;\n\t    var groupBase = 1;\n\t    while (groupBase < (1 << BN.wordSize) / base) {\n\t      groupBase *= base;\n\t      groupSize += 1;\n\t    }\n\t    groupSizes[base] = groupSize;\n\t    groupBases[base] = groupBase;\n\t  }\n\n\t  */\n\n\t  var zeros = [\n\t    '',\n\t    '0',\n\t    '00',\n\t    '000',\n\t    '0000',\n\t    '00000',\n\t    '000000',\n\t    '0000000',\n\t    '00000000',\n\t    '000000000',\n\t    '0000000000',\n\t    '00000000000',\n\t    '000000000000',\n\t    '0000000000000',\n\t    '00000000000000',\n\t    '000000000000000',\n\t    '0000000000000000',\n\t    '00000000000000000',\n\t    '000000000000000000',\n\t    '0000000000000000000',\n\t    '00000000000000000000',\n\t    '000000000000000000000',\n\t    '0000000000000000000000',\n\t    '00000000000000000000000',\n\t    '000000000000000000000000',\n\t    '0000000000000000000000000'\n\t  ];\n\n\t  var groupSizes = [\n\t    0, 0,\n\t    25, 16, 12, 11, 10, 9, 8,\n\t    8, 7, 7, 7, 7, 6, 6,\n\t    6, 6, 6, 6, 6, 5, 5,\n\t    5, 5, 5, 5, 5, 5, 5,\n\t    5, 5, 5, 5, 5, 5, 5\n\t  ];\n\n\t  var groupBases = [\n\t    0, 0,\n\t    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n\t    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n\t    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n\t    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n\t    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n\t  ];\n\n\t  BN.prototype.toString = function toString (base, padding) {\n\t    base = base || 10;\n\t    padding = padding | 0 || 1;\n\n\t    var out;\n\t    if (base === 16 || base === 'hex') {\n\t      out = '';\n\t      var off = 0;\n\t      var carry = 0;\n\t      for (var i = 0; i < this.length; i++) {\n\t        var w = this.words[i];\n\t        var word = (((w << off) | carry) & 0xffffff).toString(16);\n\t        carry = (w >>> (24 - off)) & 0xffffff;\n\t        if (carry !== 0 || i !== this.length - 1) {\n\t          out = zeros[6 - word.length] + word + out;\n\t        } else {\n\t          out = word + out;\n\t        }\n\t        off += 2;\n\t        if (off >= 26) {\n\t          off -= 26;\n\t          i--;\n\t        }\n\t      }\n\t      if (carry !== 0) {\n\t        out = carry.toString(16) + out;\n\t      }\n\t      while (out.length % padding !== 0) {\n\t        out = '0' + out;\n\t      }\n\t      if (this.negative !== 0) {\n\t        out = '-' + out;\n\t      }\n\t      return out;\n\t    }\n\n\t    if (base === (base | 0) && base >= 2 && base <= 36) {\n\t      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n\t      var groupSize = groupSizes[base];\n\t      // var groupBase = Math.pow(base, groupSize);\n\t      var groupBase = groupBases[base];\n\t      out = '';\n\t      var c = this.clone();\n\t      c.negative = 0;\n\t      while (!c.isZero()) {\n\t        var r = c.modn(groupBase).toString(base);\n\t        c = c.idivn(groupBase);\n\n\t        if (!c.isZero()) {\n\t          out = zeros[groupSize - r.length] + r + out;\n\t        } else {\n\t          out = r + out;\n\t        }\n\t      }\n\t      if (this.isZero()) {\n\t        out = '0' + out;\n\t      }\n\t      while (out.length % padding !== 0) {\n\t        out = '0' + out;\n\t      }\n\t      if (this.negative !== 0) {\n\t        out = '-' + out;\n\t      }\n\t      return out;\n\t    }\n\n\t    assert(false, 'Base should be between 2 and 36');\n\t  };\n\n\t  BN.prototype.toNumber = function toNumber () {\n\t    var ret = this.words[0];\n\t    if (this.length === 2) {\n\t      ret += this.words[1] * 0x4000000;\n\t    } else if (this.length === 3 && this.words[2] === 0x01) {\n\t      // NOTE: at this stage it is known that the top bit is set\n\t      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n\t    } else if (this.length > 2) {\n\t      assert(false, 'Number can only safely store up to 53 bits');\n\t    }\n\t    return (this.negative !== 0) ? -ret : ret;\n\t  };\n\n\t  BN.prototype.toJSON = function toJSON () {\n\t    return this.toString(16);\n\t  };\n\n\t  BN.prototype.toBuffer = function toBuffer (endian, length) {\n\t    assert(typeof Buffer !== 'undefined');\n\t    return this.toArrayLike(Buffer, endian, length);\n\t  };\n\n\t  BN.prototype.toArray = function toArray (endian, length) {\n\t    return this.toArrayLike(Array, endian, length);\n\t  };\n\n\t  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n\t    var byteLength = this.byteLength();\n\t    var reqLength = length || Math.max(1, byteLength);\n\t    assert(byteLength <= reqLength, 'byte array longer than desired length');\n\t    assert(reqLength > 0, 'Requested array length <= 0');\n\n\t    this.strip();\n\t    var littleEndian = endian === 'le';\n\t    var res = new ArrayType(reqLength);\n\n\t    var b, i;\n\t    var q = this.clone();\n\t    if (!littleEndian) {\n\t      // Assume big-endian\n\t      for (i = 0; i < reqLength - byteLength; i++) {\n\t        res[i] = 0;\n\t      }\n\n\t      for (i = 0; !q.isZero(); i++) {\n\t        b = q.andln(0xff);\n\t        q.iushrn(8);\n\n\t        res[reqLength - i - 1] = b;\n\t      }\n\t    } else {\n\t      for (i = 0; !q.isZero(); i++) {\n\t        b = q.andln(0xff);\n\t        q.iushrn(8);\n\n\t        res[i] = b;\n\t      }\n\n\t      for (; i < reqLength; i++) {\n\t        res[i] = 0;\n\t      }\n\t    }\n\n\t    return res;\n\t  };\n\n\t  if (Math.clz32) {\n\t    BN.prototype._countBits = function _countBits (w) {\n\t      return 32 - Math.clz32(w);\n\t    };\n\t  } else {\n\t    BN.prototype._countBits = function _countBits (w) {\n\t      var t = w;\n\t      var r = 0;\n\t      if (t >= 0x1000) {\n\t        r += 13;\n\t        t >>>= 13;\n\t      }\n\t      if (t >= 0x40) {\n\t        r += 7;\n\t        t >>>= 7;\n\t      }\n\t      if (t >= 0x8) {\n\t        r += 4;\n\t        t >>>= 4;\n\t      }\n\t      if (t >= 0x02) {\n\t        r += 2;\n\t        t >>>= 2;\n\t      }\n\t      return r + t;\n\t    };\n\t  }\n\n\t  BN.prototype._zeroBits = function _zeroBits (w) {\n\t    // Short-cut\n\t    if (w === 0) return 26;\n\n\t    var t = w;\n\t    var r = 0;\n\t    if ((t & 0x1fff) === 0) {\n\t      r += 13;\n\t      t >>>= 13;\n\t    }\n\t    if ((t & 0x7f) === 0) {\n\t      r += 7;\n\t      t >>>= 7;\n\t    }\n\t    if ((t & 0xf) === 0) {\n\t      r += 4;\n\t      t >>>= 4;\n\t    }\n\t    if ((t & 0x3) === 0) {\n\t      r += 2;\n\t      t >>>= 2;\n\t    }\n\t    if ((t & 0x1) === 0) {\n\t      r++;\n\t    }\n\t    return r;\n\t  };\n\n\t  // Return number of used bits in a BN\n\t  BN.prototype.bitLength = function bitLength () {\n\t    var w = this.words[this.length - 1];\n\t    var hi = this._countBits(w);\n\t    return (this.length - 1) * 26 + hi;\n\t  };\n\n\t  function toBitArray (num) {\n\t    var w = new Array(num.bitLength());\n\n\t    for (var bit = 0; bit < w.length; bit++) {\n\t      var off = (bit / 26) | 0;\n\t      var wbit = bit % 26;\n\n\t      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n\t    }\n\n\t    return w;\n\t  }\n\n\t  // Number of trailing zero bits\n\t  BN.prototype.zeroBits = function zeroBits () {\n\t    if (this.isZero()) return 0;\n\n\t    var r = 0;\n\t    for (var i = 0; i < this.length; i++) {\n\t      var b = this._zeroBits(this.words[i]);\n\t      r += b;\n\t      if (b !== 26) break;\n\t    }\n\t    return r;\n\t  };\n\n\t  BN.prototype.byteLength = function byteLength () {\n\t    return Math.ceil(this.bitLength() / 8);\n\t  };\n\n\t  BN.prototype.toTwos = function toTwos (width) {\n\t    if (this.negative !== 0) {\n\t      return this.abs().inotn(width).iaddn(1);\n\t    }\n\t    return this.clone();\n\t  };\n\n\t  BN.prototype.fromTwos = function fromTwos (width) {\n\t    if (this.testn(width - 1)) {\n\t      return this.notn(width).iaddn(1).ineg();\n\t    }\n\t    return this.clone();\n\t  };\n\n\t  BN.prototype.isNeg = function isNeg () {\n\t    return this.negative !== 0;\n\t  };\n\n\t  // Return negative clone of `this`\n\t  BN.prototype.neg = function neg () {\n\t    return this.clone().ineg();\n\t  };\n\n\t  BN.prototype.ineg = function ineg () {\n\t    if (!this.isZero()) {\n\t      this.negative ^= 1;\n\t    }\n\n\t    return this;\n\t  };\n\n\t  // Or `num` with `this` in-place\n\t  BN.prototype.iuor = function iuor (num) {\n\t    while (this.length < num.length) {\n\t      this.words[this.length++] = 0;\n\t    }\n\n\t    for (var i = 0; i < num.length; i++) {\n\t      this.words[i] = this.words[i] | num.words[i];\n\t    }\n\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype.ior = function ior (num) {\n\t    assert((this.negative | num.negative) === 0);\n\t    return this.iuor(num);\n\t  };\n\n\t  // Or `num` with `this`\n\t  BN.prototype.or = function or (num) {\n\t    if (this.length > num.length) return this.clone().ior(num);\n\t    return num.clone().ior(this);\n\t  };\n\n\t  BN.prototype.uor = function uor (num) {\n\t    if (this.length > num.length) return this.clone().iuor(num);\n\t    return num.clone().iuor(this);\n\t  };\n\n\t  // And `num` with `this` in-place\n\t  BN.prototype.iuand = function iuand (num) {\n\t    // b = min-length(num, this)\n\t    var b;\n\t    if (this.length > num.length) {\n\t      b = num;\n\t    } else {\n\t      b = this;\n\t    }\n\n\t    for (var i = 0; i < b.length; i++) {\n\t      this.words[i] = this.words[i] & num.words[i];\n\t    }\n\n\t    this.length = b.length;\n\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype.iand = function iand (num) {\n\t    assert((this.negative | num.negative) === 0);\n\t    return this.iuand(num);\n\t  };\n\n\t  // And `num` with `this`\n\t  BN.prototype.and = function and (num) {\n\t    if (this.length > num.length) return this.clone().iand(num);\n\t    return num.clone().iand(this);\n\t  };\n\n\t  BN.prototype.uand = function uand (num) {\n\t    if (this.length > num.length) return this.clone().iuand(num);\n\t    return num.clone().iuand(this);\n\t  };\n\n\t  // Xor `num` with `this` in-place\n\t  BN.prototype.iuxor = function iuxor (num) {\n\t    // a.length > b.length\n\t    var a;\n\t    var b;\n\t    if (this.length > num.length) {\n\t      a = this;\n\t      b = num;\n\t    } else {\n\t      a = num;\n\t      b = this;\n\t    }\n\n\t    for (var i = 0; i < b.length; i++) {\n\t      this.words[i] = a.words[i] ^ b.words[i];\n\t    }\n\n\t    if (this !== a) {\n\t      for (; i < a.length; i++) {\n\t        this.words[i] = a.words[i];\n\t      }\n\t    }\n\n\t    this.length = a.length;\n\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype.ixor = function ixor (num) {\n\t    assert((this.negative | num.negative) === 0);\n\t    return this.iuxor(num);\n\t  };\n\n\t  // Xor `num` with `this`\n\t  BN.prototype.xor = function xor (num) {\n\t    if (this.length > num.length) return this.clone().ixor(num);\n\t    return num.clone().ixor(this);\n\t  };\n\n\t  BN.prototype.uxor = function uxor (num) {\n\t    if (this.length > num.length) return this.clone().iuxor(num);\n\t    return num.clone().iuxor(this);\n\t  };\n\n\t  // Not ``this`` with ``width`` bitwidth\n\t  BN.prototype.inotn = function inotn (width) {\n\t    assert(typeof width === 'number' && width >= 0);\n\n\t    var bytesNeeded = Math.ceil(width / 26) | 0;\n\t    var bitsLeft = width % 26;\n\n\t    // Extend the buffer with leading zeroes\n\t    this._expand(bytesNeeded);\n\n\t    if (bitsLeft > 0) {\n\t      bytesNeeded--;\n\t    }\n\n\t    // Handle complete words\n\t    for (var i = 0; i < bytesNeeded; i++) {\n\t      this.words[i] = ~this.words[i] & 0x3ffffff;\n\t    }\n\n\t    // Handle the residue\n\t    if (bitsLeft > 0) {\n\t      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n\t    }\n\n\t    // And remove leading zeroes\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype.notn = function notn (width) {\n\t    return this.clone().inotn(width);\n\t  };\n\n\t  // Set `bit` of `this`\n\t  BN.prototype.setn = function setn (bit, val) {\n\t    assert(typeof bit === 'number' && bit >= 0);\n\n\t    var off = (bit / 26) | 0;\n\t    var wbit = bit % 26;\n\n\t    this._expand(off + 1);\n\n\t    if (val) {\n\t      this.words[off] = this.words[off] | (1 << wbit);\n\t    } else {\n\t      this.words[off] = this.words[off] & ~(1 << wbit);\n\t    }\n\n\t    return this.strip();\n\t  };\n\n\t  // Add `num` to `this` in-place\n\t  BN.prototype.iadd = function iadd (num) {\n\t    var r;\n\n\t    // negative + positive\n\t    if (this.negative !== 0 && num.negative === 0) {\n\t      this.negative = 0;\n\t      r = this.isub(num);\n\t      this.negative ^= 1;\n\t      return this._normSign();\n\n\t    // positive + negative\n\t    } else if (this.negative === 0 && num.negative !== 0) {\n\t      num.negative = 0;\n\t      r = this.isub(num);\n\t      num.negative = 1;\n\t      return r._normSign();\n\t    }\n\n\t    // a.length > b.length\n\t    var a, b;\n\t    if (this.length > num.length) {\n\t      a = this;\n\t      b = num;\n\t    } else {\n\t      a = num;\n\t      b = this;\n\t    }\n\n\t    var carry = 0;\n\t    for (var i = 0; i < b.length; i++) {\n\t      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n\t      this.words[i] = r & 0x3ffffff;\n\t      carry = r >>> 26;\n\t    }\n\t    for (; carry !== 0 && i < a.length; i++) {\n\t      r = (a.words[i] | 0) + carry;\n\t      this.words[i] = r & 0x3ffffff;\n\t      carry = r >>> 26;\n\t    }\n\n\t    this.length = a.length;\n\t    if (carry !== 0) {\n\t      this.words[this.length] = carry;\n\t      this.length++;\n\t    // Copy the rest of the words\n\t    } else if (a !== this) {\n\t      for (; i < a.length; i++) {\n\t        this.words[i] = a.words[i];\n\t      }\n\t    }\n\n\t    return this;\n\t  };\n\n\t  // Add `num` to `this`\n\t  BN.prototype.add = function add (num) {\n\t    var res;\n\t    if (num.negative !== 0 && this.negative === 0) {\n\t      num.negative = 0;\n\t      res = this.sub(num);\n\t      num.negative ^= 1;\n\t      return res;\n\t    } else if (num.negative === 0 && this.negative !== 0) {\n\t      this.negative = 0;\n\t      res = num.sub(this);\n\t      this.negative = 1;\n\t      return res;\n\t    }\n\n\t    if (this.length > num.length) return this.clone().iadd(num);\n\n\t    return num.clone().iadd(this);\n\t  };\n\n\t  // Subtract `num` from `this` in-place\n\t  BN.prototype.isub = function isub (num) {\n\t    // this - (-num) = this + num\n\t    if (num.negative !== 0) {\n\t      num.negative = 0;\n\t      var r = this.iadd(num);\n\t      num.negative = 1;\n\t      return r._normSign();\n\n\t    // -this - num = -(this + num)\n\t    } else if (this.negative !== 0) {\n\t      this.negative = 0;\n\t      this.iadd(num);\n\t      this.negative = 1;\n\t      return this._normSign();\n\t    }\n\n\t    // At this point both numbers are positive\n\t    var cmp = this.cmp(num);\n\n\t    // Optimization - zeroify\n\t    if (cmp === 0) {\n\t      this.negative = 0;\n\t      this.length = 1;\n\t      this.words[0] = 0;\n\t      return this;\n\t    }\n\n\t    // a > b\n\t    var a, b;\n\t    if (cmp > 0) {\n\t      a = this;\n\t      b = num;\n\t    } else {\n\t      a = num;\n\t      b = this;\n\t    }\n\n\t    var carry = 0;\n\t    for (var i = 0; i < b.length; i++) {\n\t      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n\t      carry = r >> 26;\n\t      this.words[i] = r & 0x3ffffff;\n\t    }\n\t    for (; carry !== 0 && i < a.length; i++) {\n\t      r = (a.words[i] | 0) + carry;\n\t      carry = r >> 26;\n\t      this.words[i] = r & 0x3ffffff;\n\t    }\n\n\t    // Copy rest of the words\n\t    if (carry === 0 && i < a.length && a !== this) {\n\t      for (; i < a.length; i++) {\n\t        this.words[i] = a.words[i];\n\t      }\n\t    }\n\n\t    this.length = Math.max(this.length, i);\n\n\t    if (a !== this) {\n\t      this.negative = 1;\n\t    }\n\n\t    return this.strip();\n\t  };\n\n\t  // Subtract `num` from `this`\n\t  BN.prototype.sub = function sub (num) {\n\t    return this.clone().isub(num);\n\t  };\n\n\t  function smallMulTo (self, num, out) {\n\t    out.negative = num.negative ^ self.negative;\n\t    var len = (self.length + num.length) | 0;\n\t    out.length = len;\n\t    len = (len - 1) | 0;\n\n\t    // Peel one iteration (compiler can't do it, because of code complexity)\n\t    var a = self.words[0] | 0;\n\t    var b = num.words[0] | 0;\n\t    var r = a * b;\n\n\t    var lo = r & 0x3ffffff;\n\t    var carry = (r / 0x4000000) | 0;\n\t    out.words[0] = lo;\n\n\t    for (var k = 1; k < len; k++) {\n\t      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n\t      // note that ncarry could be >= 0x3ffffff\n\t      var ncarry = carry >>> 26;\n\t      var rword = carry & 0x3ffffff;\n\t      var maxJ = Math.min(k, num.length - 1);\n\t      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n\t        var i = (k - j) | 0;\n\t        a = self.words[i] | 0;\n\t        b = num.words[j] | 0;\n\t        r = a * b + rword;\n\t        ncarry += (r / 0x4000000) | 0;\n\t        rword = r & 0x3ffffff;\n\t      }\n\t      out.words[k] = rword | 0;\n\t      carry = ncarry | 0;\n\t    }\n\t    if (carry !== 0) {\n\t      out.words[k] = carry | 0;\n\t    } else {\n\t      out.length--;\n\t    }\n\n\t    return out.strip();\n\t  }\n\n\t  // TODO(indutny): it may be reasonable to omit it for users who don't need\n\t  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n\t  // multiplication (like elliptic secp256k1).\n\t  var comb10MulTo = function comb10MulTo (self, num, out) {\n\t    var a = self.words;\n\t    var b = num.words;\n\t    var o = out.words;\n\t    var c = 0;\n\t    var lo;\n\t    var mid;\n\t    var hi;\n\t    var a0 = a[0] | 0;\n\t    var al0 = a0 & 0x1fff;\n\t    var ah0 = a0 >>> 13;\n\t    var a1 = a[1] | 0;\n\t    var al1 = a1 & 0x1fff;\n\t    var ah1 = a1 >>> 13;\n\t    var a2 = a[2] | 0;\n\t    var al2 = a2 & 0x1fff;\n\t    var ah2 = a2 >>> 13;\n\t    var a3 = a[3] | 0;\n\t    var al3 = a3 & 0x1fff;\n\t    var ah3 = a3 >>> 13;\n\t    var a4 = a[4] | 0;\n\t    var al4 = a4 & 0x1fff;\n\t    var ah4 = a4 >>> 13;\n\t    var a5 = a[5] | 0;\n\t    var al5 = a5 & 0x1fff;\n\t    var ah5 = a5 >>> 13;\n\t    var a6 = a[6] | 0;\n\t    var al6 = a6 & 0x1fff;\n\t    var ah6 = a6 >>> 13;\n\t    var a7 = a[7] | 0;\n\t    var al7 = a7 & 0x1fff;\n\t    var ah7 = a7 >>> 13;\n\t    var a8 = a[8] | 0;\n\t    var al8 = a8 & 0x1fff;\n\t    var ah8 = a8 >>> 13;\n\t    var a9 = a[9] | 0;\n\t    var al9 = a9 & 0x1fff;\n\t    var ah9 = a9 >>> 13;\n\t    var b0 = b[0] | 0;\n\t    var bl0 = b0 & 0x1fff;\n\t    var bh0 = b0 >>> 13;\n\t    var b1 = b[1] | 0;\n\t    var bl1 = b1 & 0x1fff;\n\t    var bh1 = b1 >>> 13;\n\t    var b2 = b[2] | 0;\n\t    var bl2 = b2 & 0x1fff;\n\t    var bh2 = b2 >>> 13;\n\t    var b3 = b[3] | 0;\n\t    var bl3 = b3 & 0x1fff;\n\t    var bh3 = b3 >>> 13;\n\t    var b4 = b[4] | 0;\n\t    var bl4 = b4 & 0x1fff;\n\t    var bh4 = b4 >>> 13;\n\t    var b5 = b[5] | 0;\n\t    var bl5 = b5 & 0x1fff;\n\t    var bh5 = b5 >>> 13;\n\t    var b6 = b[6] | 0;\n\t    var bl6 = b6 & 0x1fff;\n\t    var bh6 = b6 >>> 13;\n\t    var b7 = b[7] | 0;\n\t    var bl7 = b7 & 0x1fff;\n\t    var bh7 = b7 >>> 13;\n\t    var b8 = b[8] | 0;\n\t    var bl8 = b8 & 0x1fff;\n\t    var bh8 = b8 >>> 13;\n\t    var b9 = b[9] | 0;\n\t    var bl9 = b9 & 0x1fff;\n\t    var bh9 = b9 >>> 13;\n\n\t    out.negative = self.negative ^ num.negative;\n\t    out.length = 19;\n\t    /* k = 0 */\n\t    lo = Math.imul(al0, bl0);\n\t    mid = Math.imul(al0, bh0);\n\t    mid = (mid + Math.imul(ah0, bl0)) | 0;\n\t    hi = Math.imul(ah0, bh0);\n\t    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n\t    w0 &= 0x3ffffff;\n\t    /* k = 1 */\n\t    lo = Math.imul(al1, bl0);\n\t    mid = Math.imul(al1, bh0);\n\t    mid = (mid + Math.imul(ah1, bl0)) | 0;\n\t    hi = Math.imul(ah1, bh0);\n\t    lo = (lo + Math.imul(al0, bl1)) | 0;\n\t    mid = (mid + Math.imul(al0, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh1)) | 0;\n\t    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n\t    w1 &= 0x3ffffff;\n\t    /* k = 2 */\n\t    lo = Math.imul(al2, bl0);\n\t    mid = Math.imul(al2, bh0);\n\t    mid = (mid + Math.imul(ah2, bl0)) | 0;\n\t    hi = Math.imul(ah2, bh0);\n\t    lo = (lo + Math.imul(al1, bl1)) | 0;\n\t    mid = (mid + Math.imul(al1, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh1)) | 0;\n\t    lo = (lo + Math.imul(al0, bl2)) | 0;\n\t    mid = (mid + Math.imul(al0, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh2)) | 0;\n\t    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n\t    w2 &= 0x3ffffff;\n\t    /* k = 3 */\n\t    lo = Math.imul(al3, bl0);\n\t    mid = Math.imul(al3, bh0);\n\t    mid = (mid + Math.imul(ah3, bl0)) | 0;\n\t    hi = Math.imul(ah3, bh0);\n\t    lo = (lo + Math.imul(al2, bl1)) | 0;\n\t    mid = (mid + Math.imul(al2, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh1)) | 0;\n\t    lo = (lo + Math.imul(al1, bl2)) | 0;\n\t    mid = (mid + Math.imul(al1, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh2)) | 0;\n\t    lo = (lo + Math.imul(al0, bl3)) | 0;\n\t    mid = (mid + Math.imul(al0, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh3)) | 0;\n\t    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n\t    w3 &= 0x3ffffff;\n\t    /* k = 4 */\n\t    lo = Math.imul(al4, bl0);\n\t    mid = Math.imul(al4, bh0);\n\t    mid = (mid + Math.imul(ah4, bl0)) | 0;\n\t    hi = Math.imul(ah4, bh0);\n\t    lo = (lo + Math.imul(al3, bl1)) | 0;\n\t    mid = (mid + Math.imul(al3, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh1)) | 0;\n\t    lo = (lo + Math.imul(al2, bl2)) | 0;\n\t    mid = (mid + Math.imul(al2, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh2)) | 0;\n\t    lo = (lo + Math.imul(al1, bl3)) | 0;\n\t    mid = (mid + Math.imul(al1, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh3)) | 0;\n\t    lo = (lo + Math.imul(al0, bl4)) | 0;\n\t    mid = (mid + Math.imul(al0, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh4)) | 0;\n\t    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n\t    w4 &= 0x3ffffff;\n\t    /* k = 5 */\n\t    lo = Math.imul(al5, bl0);\n\t    mid = Math.imul(al5, bh0);\n\t    mid = (mid + Math.imul(ah5, bl0)) | 0;\n\t    hi = Math.imul(ah5, bh0);\n\t    lo = (lo + Math.imul(al4, bl1)) | 0;\n\t    mid = (mid + Math.imul(al4, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh1)) | 0;\n\t    lo = (lo + Math.imul(al3, bl2)) | 0;\n\t    mid = (mid + Math.imul(al3, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh2)) | 0;\n\t    lo = (lo + Math.imul(al2, bl3)) | 0;\n\t    mid = (mid + Math.imul(al2, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh3)) | 0;\n\t    lo = (lo + Math.imul(al1, bl4)) | 0;\n\t    mid = (mid + Math.imul(al1, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh4)) | 0;\n\t    lo = (lo + Math.imul(al0, bl5)) | 0;\n\t    mid = (mid + Math.imul(al0, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh5)) | 0;\n\t    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n\t    w5 &= 0x3ffffff;\n\t    /* k = 6 */\n\t    lo = Math.imul(al6, bl0);\n\t    mid = Math.imul(al6, bh0);\n\t    mid = (mid + Math.imul(ah6, bl0)) | 0;\n\t    hi = Math.imul(ah6, bh0);\n\t    lo = (lo + Math.imul(al5, bl1)) | 0;\n\t    mid = (mid + Math.imul(al5, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh1)) | 0;\n\t    lo = (lo + Math.imul(al4, bl2)) | 0;\n\t    mid = (mid + Math.imul(al4, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh2)) | 0;\n\t    lo = (lo + Math.imul(al3, bl3)) | 0;\n\t    mid = (mid + Math.imul(al3, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh3)) | 0;\n\t    lo = (lo + Math.imul(al2, bl4)) | 0;\n\t    mid = (mid + Math.imul(al2, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh4)) | 0;\n\t    lo = (lo + Math.imul(al1, bl5)) | 0;\n\t    mid = (mid + Math.imul(al1, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh5)) | 0;\n\t    lo = (lo + Math.imul(al0, bl6)) | 0;\n\t    mid = (mid + Math.imul(al0, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh6)) | 0;\n\t    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n\t    w6 &= 0x3ffffff;\n\t    /* k = 7 */\n\t    lo = Math.imul(al7, bl0);\n\t    mid = Math.imul(al7, bh0);\n\t    mid = (mid + Math.imul(ah7, bl0)) | 0;\n\t    hi = Math.imul(ah7, bh0);\n\t    lo = (lo + Math.imul(al6, bl1)) | 0;\n\t    mid = (mid + Math.imul(al6, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh1)) | 0;\n\t    lo = (lo + Math.imul(al5, bl2)) | 0;\n\t    mid = (mid + Math.imul(al5, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh2)) | 0;\n\t    lo = (lo + Math.imul(al4, bl3)) | 0;\n\t    mid = (mid + Math.imul(al4, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh3)) | 0;\n\t    lo = (lo + Math.imul(al3, bl4)) | 0;\n\t    mid = (mid + Math.imul(al3, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh4)) | 0;\n\t    lo = (lo + Math.imul(al2, bl5)) | 0;\n\t    mid = (mid + Math.imul(al2, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh5)) | 0;\n\t    lo = (lo + Math.imul(al1, bl6)) | 0;\n\t    mid = (mid + Math.imul(al1, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh6)) | 0;\n\t    lo = (lo + Math.imul(al0, bl7)) | 0;\n\t    mid = (mid + Math.imul(al0, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh7)) | 0;\n\t    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n\t    w7 &= 0x3ffffff;\n\t    /* k = 8 */\n\t    lo = Math.imul(al8, bl0);\n\t    mid = Math.imul(al8, bh0);\n\t    mid = (mid + Math.imul(ah8, bl0)) | 0;\n\t    hi = Math.imul(ah8, bh0);\n\t    lo = (lo + Math.imul(al7, bl1)) | 0;\n\t    mid = (mid + Math.imul(al7, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh1)) | 0;\n\t    lo = (lo + Math.imul(al6, bl2)) | 0;\n\t    mid = (mid + Math.imul(al6, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh2)) | 0;\n\t    lo = (lo + Math.imul(al5, bl3)) | 0;\n\t    mid = (mid + Math.imul(al5, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh3)) | 0;\n\t    lo = (lo + Math.imul(al4, bl4)) | 0;\n\t    mid = (mid + Math.imul(al4, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh4)) | 0;\n\t    lo = (lo + Math.imul(al3, bl5)) | 0;\n\t    mid = (mid + Math.imul(al3, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh5)) | 0;\n\t    lo = (lo + Math.imul(al2, bl6)) | 0;\n\t    mid = (mid + Math.imul(al2, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh6)) | 0;\n\t    lo = (lo + Math.imul(al1, bl7)) | 0;\n\t    mid = (mid + Math.imul(al1, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh7)) | 0;\n\t    lo = (lo + Math.imul(al0, bl8)) | 0;\n\t    mid = (mid + Math.imul(al0, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh8)) | 0;\n\t    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n\t    w8 &= 0x3ffffff;\n\t    /* k = 9 */\n\t    lo = Math.imul(al9, bl0);\n\t    mid = Math.imul(al9, bh0);\n\t    mid = (mid + Math.imul(ah9, bl0)) | 0;\n\t    hi = Math.imul(ah9, bh0);\n\t    lo = (lo + Math.imul(al8, bl1)) | 0;\n\t    mid = (mid + Math.imul(al8, bh1)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl1)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh1)) | 0;\n\t    lo = (lo + Math.imul(al7, bl2)) | 0;\n\t    mid = (mid + Math.imul(al7, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh2)) | 0;\n\t    lo = (lo + Math.imul(al6, bl3)) | 0;\n\t    mid = (mid + Math.imul(al6, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh3)) | 0;\n\t    lo = (lo + Math.imul(al5, bl4)) | 0;\n\t    mid = (mid + Math.imul(al5, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh4)) | 0;\n\t    lo = (lo + Math.imul(al4, bl5)) | 0;\n\t    mid = (mid + Math.imul(al4, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh5)) | 0;\n\t    lo = (lo + Math.imul(al3, bl6)) | 0;\n\t    mid = (mid + Math.imul(al3, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh6)) | 0;\n\t    lo = (lo + Math.imul(al2, bl7)) | 0;\n\t    mid = (mid + Math.imul(al2, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh7)) | 0;\n\t    lo = (lo + Math.imul(al1, bl8)) | 0;\n\t    mid = (mid + Math.imul(al1, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh8)) | 0;\n\t    lo = (lo + Math.imul(al0, bl9)) | 0;\n\t    mid = (mid + Math.imul(al0, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah0, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah0, bh9)) | 0;\n\t    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n\t    w9 &= 0x3ffffff;\n\t    /* k = 10 */\n\t    lo = Math.imul(al9, bl1);\n\t    mid = Math.imul(al9, bh1);\n\t    mid = (mid + Math.imul(ah9, bl1)) | 0;\n\t    hi = Math.imul(ah9, bh1);\n\t    lo = (lo + Math.imul(al8, bl2)) | 0;\n\t    mid = (mid + Math.imul(al8, bh2)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl2)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh2)) | 0;\n\t    lo = (lo + Math.imul(al7, bl3)) | 0;\n\t    mid = (mid + Math.imul(al7, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh3)) | 0;\n\t    lo = (lo + Math.imul(al6, bl4)) | 0;\n\t    mid = (mid + Math.imul(al6, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh4)) | 0;\n\t    lo = (lo + Math.imul(al5, bl5)) | 0;\n\t    mid = (mid + Math.imul(al5, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh5)) | 0;\n\t    lo = (lo + Math.imul(al4, bl6)) | 0;\n\t    mid = (mid + Math.imul(al4, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh6)) | 0;\n\t    lo = (lo + Math.imul(al3, bl7)) | 0;\n\t    mid = (mid + Math.imul(al3, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh7)) | 0;\n\t    lo = (lo + Math.imul(al2, bl8)) | 0;\n\t    mid = (mid + Math.imul(al2, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh8)) | 0;\n\t    lo = (lo + Math.imul(al1, bl9)) | 0;\n\t    mid = (mid + Math.imul(al1, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah1, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah1, bh9)) | 0;\n\t    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n\t    w10 &= 0x3ffffff;\n\t    /* k = 11 */\n\t    lo = Math.imul(al9, bl2);\n\t    mid = Math.imul(al9, bh2);\n\t    mid = (mid + Math.imul(ah9, bl2)) | 0;\n\t    hi = Math.imul(ah9, bh2);\n\t    lo = (lo + Math.imul(al8, bl3)) | 0;\n\t    mid = (mid + Math.imul(al8, bh3)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl3)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh3)) | 0;\n\t    lo = (lo + Math.imul(al7, bl4)) | 0;\n\t    mid = (mid + Math.imul(al7, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh4)) | 0;\n\t    lo = (lo + Math.imul(al6, bl5)) | 0;\n\t    mid = (mid + Math.imul(al6, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh5)) | 0;\n\t    lo = (lo + Math.imul(al5, bl6)) | 0;\n\t    mid = (mid + Math.imul(al5, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh6)) | 0;\n\t    lo = (lo + Math.imul(al4, bl7)) | 0;\n\t    mid = (mid + Math.imul(al4, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh7)) | 0;\n\t    lo = (lo + Math.imul(al3, bl8)) | 0;\n\t    mid = (mid + Math.imul(al3, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh8)) | 0;\n\t    lo = (lo + Math.imul(al2, bl9)) | 0;\n\t    mid = (mid + Math.imul(al2, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah2, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah2, bh9)) | 0;\n\t    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n\t    w11 &= 0x3ffffff;\n\t    /* k = 12 */\n\t    lo = Math.imul(al9, bl3);\n\t    mid = Math.imul(al9, bh3);\n\t    mid = (mid + Math.imul(ah9, bl3)) | 0;\n\t    hi = Math.imul(ah9, bh3);\n\t    lo = (lo + Math.imul(al8, bl4)) | 0;\n\t    mid = (mid + Math.imul(al8, bh4)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl4)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh4)) | 0;\n\t    lo = (lo + Math.imul(al7, bl5)) | 0;\n\t    mid = (mid + Math.imul(al7, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh5)) | 0;\n\t    lo = (lo + Math.imul(al6, bl6)) | 0;\n\t    mid = (mid + Math.imul(al6, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh6)) | 0;\n\t    lo = (lo + Math.imul(al5, bl7)) | 0;\n\t    mid = (mid + Math.imul(al5, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh7)) | 0;\n\t    lo = (lo + Math.imul(al4, bl8)) | 0;\n\t    mid = (mid + Math.imul(al4, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh8)) | 0;\n\t    lo = (lo + Math.imul(al3, bl9)) | 0;\n\t    mid = (mid + Math.imul(al3, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah3, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah3, bh9)) | 0;\n\t    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n\t    w12 &= 0x3ffffff;\n\t    /* k = 13 */\n\t    lo = Math.imul(al9, bl4);\n\t    mid = Math.imul(al9, bh4);\n\t    mid = (mid + Math.imul(ah9, bl4)) | 0;\n\t    hi = Math.imul(ah9, bh4);\n\t    lo = (lo + Math.imul(al8, bl5)) | 0;\n\t    mid = (mid + Math.imul(al8, bh5)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl5)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh5)) | 0;\n\t    lo = (lo + Math.imul(al7, bl6)) | 0;\n\t    mid = (mid + Math.imul(al7, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh6)) | 0;\n\t    lo = (lo + Math.imul(al6, bl7)) | 0;\n\t    mid = (mid + Math.imul(al6, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh7)) | 0;\n\t    lo = (lo + Math.imul(al5, bl8)) | 0;\n\t    mid = (mid + Math.imul(al5, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh8)) | 0;\n\t    lo = (lo + Math.imul(al4, bl9)) | 0;\n\t    mid = (mid + Math.imul(al4, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah4, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah4, bh9)) | 0;\n\t    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n\t    w13 &= 0x3ffffff;\n\t    /* k = 14 */\n\t    lo = Math.imul(al9, bl5);\n\t    mid = Math.imul(al9, bh5);\n\t    mid = (mid + Math.imul(ah9, bl5)) | 0;\n\t    hi = Math.imul(ah9, bh5);\n\t    lo = (lo + Math.imul(al8, bl6)) | 0;\n\t    mid = (mid + Math.imul(al8, bh6)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl6)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh6)) | 0;\n\t    lo = (lo + Math.imul(al7, bl7)) | 0;\n\t    mid = (mid + Math.imul(al7, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh7)) | 0;\n\t    lo = (lo + Math.imul(al6, bl8)) | 0;\n\t    mid = (mid + Math.imul(al6, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh8)) | 0;\n\t    lo = (lo + Math.imul(al5, bl9)) | 0;\n\t    mid = (mid + Math.imul(al5, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah5, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah5, bh9)) | 0;\n\t    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n\t    w14 &= 0x3ffffff;\n\t    /* k = 15 */\n\t    lo = Math.imul(al9, bl6);\n\t    mid = Math.imul(al9, bh6);\n\t    mid = (mid + Math.imul(ah9, bl6)) | 0;\n\t    hi = Math.imul(ah9, bh6);\n\t    lo = (lo + Math.imul(al8, bl7)) | 0;\n\t    mid = (mid + Math.imul(al8, bh7)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl7)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh7)) | 0;\n\t    lo = (lo + Math.imul(al7, bl8)) | 0;\n\t    mid = (mid + Math.imul(al7, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh8)) | 0;\n\t    lo = (lo + Math.imul(al6, bl9)) | 0;\n\t    mid = (mid + Math.imul(al6, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah6, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah6, bh9)) | 0;\n\t    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n\t    w15 &= 0x3ffffff;\n\t    /* k = 16 */\n\t    lo = Math.imul(al9, bl7);\n\t    mid = Math.imul(al9, bh7);\n\t    mid = (mid + Math.imul(ah9, bl7)) | 0;\n\t    hi = Math.imul(ah9, bh7);\n\t    lo = (lo + Math.imul(al8, bl8)) | 0;\n\t    mid = (mid + Math.imul(al8, bh8)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl8)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh8)) | 0;\n\t    lo = (lo + Math.imul(al7, bl9)) | 0;\n\t    mid = (mid + Math.imul(al7, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah7, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah7, bh9)) | 0;\n\t    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n\t    w16 &= 0x3ffffff;\n\t    /* k = 17 */\n\t    lo = Math.imul(al9, bl8);\n\t    mid = Math.imul(al9, bh8);\n\t    mid = (mid + Math.imul(ah9, bl8)) | 0;\n\t    hi = Math.imul(ah9, bh8);\n\t    lo = (lo + Math.imul(al8, bl9)) | 0;\n\t    mid = (mid + Math.imul(al8, bh9)) | 0;\n\t    mid = (mid + Math.imul(ah8, bl9)) | 0;\n\t    hi = (hi + Math.imul(ah8, bh9)) | 0;\n\t    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n\t    w17 &= 0x3ffffff;\n\t    /* k = 18 */\n\t    lo = Math.imul(al9, bl9);\n\t    mid = Math.imul(al9, bh9);\n\t    mid = (mid + Math.imul(ah9, bl9)) | 0;\n\t    hi = Math.imul(ah9, bh9);\n\t    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n\t    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n\t    w18 &= 0x3ffffff;\n\t    o[0] = w0;\n\t    o[1] = w1;\n\t    o[2] = w2;\n\t    o[3] = w3;\n\t    o[4] = w4;\n\t    o[5] = w5;\n\t    o[6] = w6;\n\t    o[7] = w7;\n\t    o[8] = w8;\n\t    o[9] = w9;\n\t    o[10] = w10;\n\t    o[11] = w11;\n\t    o[12] = w12;\n\t    o[13] = w13;\n\t    o[14] = w14;\n\t    o[15] = w15;\n\t    o[16] = w16;\n\t    o[17] = w17;\n\t    o[18] = w18;\n\t    if (c !== 0) {\n\t      o[19] = c;\n\t      out.length++;\n\t    }\n\t    return out;\n\t  };\n\n\t  // Polyfill comb\n\t  if (!Math.imul) {\n\t    comb10MulTo = smallMulTo;\n\t  }\n\n\t  function bigMulTo (self, num, out) {\n\t    out.negative = num.negative ^ self.negative;\n\t    out.length = self.length + num.length;\n\n\t    var carry = 0;\n\t    var hncarry = 0;\n\t    for (var k = 0; k < out.length - 1; k++) {\n\t      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n\t      // note that ncarry could be >= 0x3ffffff\n\t      var ncarry = hncarry;\n\t      hncarry = 0;\n\t      var rword = carry & 0x3ffffff;\n\t      var maxJ = Math.min(k, num.length - 1);\n\t      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n\t        var i = k - j;\n\t        var a = self.words[i] | 0;\n\t        var b = num.words[j] | 0;\n\t        var r = a * b;\n\n\t        var lo = r & 0x3ffffff;\n\t        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n\t        lo = (lo + rword) | 0;\n\t        rword = lo & 0x3ffffff;\n\t        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n\t        hncarry += ncarry >>> 26;\n\t        ncarry &= 0x3ffffff;\n\t      }\n\t      out.words[k] = rword;\n\t      carry = ncarry;\n\t      ncarry = hncarry;\n\t    }\n\t    if (carry !== 0) {\n\t      out.words[k] = carry;\n\t    } else {\n\t      out.length--;\n\t    }\n\n\t    return out.strip();\n\t  }\n\n\t  function jumboMulTo (self, num, out) {\n\t    var fftm = new FFTM();\n\t    return fftm.mulp(self, num, out);\n\t  }\n\n\t  BN.prototype.mulTo = function mulTo (num, out) {\n\t    var res;\n\t    var len = this.length + num.length;\n\t    if (this.length === 10 && num.length === 10) {\n\t      res = comb10MulTo(this, num, out);\n\t    } else if (len < 63) {\n\t      res = smallMulTo(this, num, out);\n\t    } else if (len < 1024) {\n\t      res = bigMulTo(this, num, out);\n\t    } else {\n\t      res = jumboMulTo(this, num, out);\n\t    }\n\n\t    return res;\n\t  };\n\n\t  // Cooley-Tukey algorithm for FFT\n\t  // slightly revisited to rely on looping instead of recursion\n\n\t  function FFTM (x, y) {\n\t    this.x = x;\n\t    this.y = y;\n\t  }\n\n\t  FFTM.prototype.makeRBT = function makeRBT (N) {\n\t    var t = new Array(N);\n\t    var l = BN.prototype._countBits(N) - 1;\n\t    for (var i = 0; i < N; i++) {\n\t      t[i] = this.revBin(i, l, N);\n\t    }\n\n\t    return t;\n\t  };\n\n\t  // Returns binary-reversed representation of `x`\n\t  FFTM.prototype.revBin = function revBin (x, l, N) {\n\t    if (x === 0 || x === N - 1) return x;\n\n\t    var rb = 0;\n\t    for (var i = 0; i < l; i++) {\n\t      rb |= (x & 1) << (l - i - 1);\n\t      x >>= 1;\n\t    }\n\n\t    return rb;\n\t  };\n\n\t  // Performs \"tweedling\" phase, therefore 'emulating'\n\t  // behaviour of the recursive algorithm\n\t  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n\t    for (var i = 0; i < N; i++) {\n\t      rtws[i] = rws[rbt[i]];\n\t      itws[i] = iws[rbt[i]];\n\t    }\n\t  };\n\n\t  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n\t    this.permute(rbt, rws, iws, rtws, itws, N);\n\n\t    for (var s = 1; s < N; s <<= 1) {\n\t      var l = s << 1;\n\n\t      var rtwdf = Math.cos(2 * Math.PI / l);\n\t      var itwdf = Math.sin(2 * Math.PI / l);\n\n\t      for (var p = 0; p < N; p += l) {\n\t        var rtwdf_ = rtwdf;\n\t        var itwdf_ = itwdf;\n\n\t        for (var j = 0; j < s; j++) {\n\t          var re = rtws[p + j];\n\t          var ie = itws[p + j];\n\n\t          var ro = rtws[p + j + s];\n\t          var io = itws[p + j + s];\n\n\t          var rx = rtwdf_ * ro - itwdf_ * io;\n\n\t          io = rtwdf_ * io + itwdf_ * ro;\n\t          ro = rx;\n\n\t          rtws[p + j] = re + ro;\n\t          itws[p + j] = ie + io;\n\n\t          rtws[p + j + s] = re - ro;\n\t          itws[p + j + s] = ie - io;\n\n\t          /* jshint maxdepth : false */\n\t          if (j !== l) {\n\t            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n\t            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n\t            rtwdf_ = rx;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n\t    var N = Math.max(m, n) | 1;\n\t    var odd = N & 1;\n\t    var i = 0;\n\t    for (N = N / 2 | 0; N; N = N >>> 1) {\n\t      i++;\n\t    }\n\n\t    return 1 << i + 1 + odd;\n\t  };\n\n\t  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n\t    if (N <= 1) return;\n\n\t    for (var i = 0; i < N / 2; i++) {\n\t      var t = rws[i];\n\n\t      rws[i] = rws[N - i - 1];\n\t      rws[N - i - 1] = t;\n\n\t      t = iws[i];\n\n\t      iws[i] = -iws[N - i - 1];\n\t      iws[N - i - 1] = -t;\n\t    }\n\t  };\n\n\t  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n\t    var carry = 0;\n\t    for (var i = 0; i < N / 2; i++) {\n\t      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n\t        Math.round(ws[2 * i] / N) +\n\t        carry;\n\n\t      ws[i] = w & 0x3ffffff;\n\n\t      if (w < 0x4000000) {\n\t        carry = 0;\n\t      } else {\n\t        carry = w / 0x4000000 | 0;\n\t      }\n\t    }\n\n\t    return ws;\n\t  };\n\n\t  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n\t    var carry = 0;\n\t    for (var i = 0; i < len; i++) {\n\t      carry = carry + (ws[i] | 0);\n\n\t      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n\t      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n\t    }\n\n\t    // Pad with zeroes\n\t    for (i = 2 * len; i < N; ++i) {\n\t      rws[i] = 0;\n\t    }\n\n\t    assert(carry === 0);\n\t    assert((carry & ~0x1fff) === 0);\n\t  };\n\n\t  FFTM.prototype.stub = function stub (N) {\n\t    var ph = new Array(N);\n\t    for (var i = 0; i < N; i++) {\n\t      ph[i] = 0;\n\t    }\n\n\t    return ph;\n\t  };\n\n\t  FFTM.prototype.mulp = function mulp (x, y, out) {\n\t    var N = 2 * this.guessLen13b(x.length, y.length);\n\n\t    var rbt = this.makeRBT(N);\n\n\t    var _ = this.stub(N);\n\n\t    var rws = new Array(N);\n\t    var rwst = new Array(N);\n\t    var iwst = new Array(N);\n\n\t    var nrws = new Array(N);\n\t    var nrwst = new Array(N);\n\t    var niwst = new Array(N);\n\n\t    var rmws = out.words;\n\t    rmws.length = N;\n\n\t    this.convert13b(x.words, x.length, rws, N);\n\t    this.convert13b(y.words, y.length, nrws, N);\n\n\t    this.transform(rws, _, rwst, iwst, N, rbt);\n\t    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n\t    for (var i = 0; i < N; i++) {\n\t      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n\t      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n\t      rwst[i] = rx;\n\t    }\n\n\t    this.conjugate(rwst, iwst, N);\n\t    this.transform(rwst, iwst, rmws, _, N, rbt);\n\t    this.conjugate(rmws, _, N);\n\t    this.normalize13b(rmws, N);\n\n\t    out.negative = x.negative ^ y.negative;\n\t    out.length = x.length + y.length;\n\t    return out.strip();\n\t  };\n\n\t  // Multiply `this` by `num`\n\t  BN.prototype.mul = function mul (num) {\n\t    var out = new BN(null);\n\t    out.words = new Array(this.length + num.length);\n\t    return this.mulTo(num, out);\n\t  };\n\n\t  // Multiply employing FFT\n\t  BN.prototype.mulf = function mulf (num) {\n\t    var out = new BN(null);\n\t    out.words = new Array(this.length + num.length);\n\t    return jumboMulTo(this, num, out);\n\t  };\n\n\t  // In-place Multiplication\n\t  BN.prototype.imul = function imul (num) {\n\t    return this.clone().mulTo(num, this);\n\t  };\n\n\t  BN.prototype.imuln = function imuln (num) {\n\t    assert(typeof num === 'number');\n\t    assert(num < 0x4000000);\n\n\t    // Carry\n\t    var carry = 0;\n\t    for (var i = 0; i < this.length; i++) {\n\t      var w = (this.words[i] | 0) * num;\n\t      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n\t      carry >>= 26;\n\t      carry += (w / 0x4000000) | 0;\n\t      // NOTE: lo is 27bit maximum\n\t      carry += lo >>> 26;\n\t      this.words[i] = lo & 0x3ffffff;\n\t    }\n\n\t    if (carry !== 0) {\n\t      this.words[i] = carry;\n\t      this.length++;\n\t    }\n\n\t    return this;\n\t  };\n\n\t  BN.prototype.muln = function muln (num) {\n\t    return this.clone().imuln(num);\n\t  };\n\n\t  // `this` * `this`\n\t  BN.prototype.sqr = function sqr () {\n\t    return this.mul(this);\n\t  };\n\n\t  // `this` * `this` in-place\n\t  BN.prototype.isqr = function isqr () {\n\t    return this.imul(this.clone());\n\t  };\n\n\t  // Math.pow(`this`, `num`)\n\t  BN.prototype.pow = function pow (num) {\n\t    var w = toBitArray(num);\n\t    if (w.length === 0) return new BN(1);\n\n\t    // Skip leading zeroes\n\t    var res = this;\n\t    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n\t      if (w[i] !== 0) break;\n\t    }\n\n\t    if (++i < w.length) {\n\t      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n\t        if (w[i] === 0) continue;\n\n\t        res = res.mul(q);\n\t      }\n\t    }\n\n\t    return res;\n\t  };\n\n\t  // Shift-left in-place\n\t  BN.prototype.iushln = function iushln (bits) {\n\t    assert(typeof bits === 'number' && bits >= 0);\n\t    var r = bits % 26;\n\t    var s = (bits - r) / 26;\n\t    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n\t    var i;\n\n\t    if (r !== 0) {\n\t      var carry = 0;\n\n\t      for (i = 0; i < this.length; i++) {\n\t        var newCarry = this.words[i] & carryMask;\n\t        var c = ((this.words[i] | 0) - newCarry) << r;\n\t        this.words[i] = c | carry;\n\t        carry = newCarry >>> (26 - r);\n\t      }\n\n\t      if (carry) {\n\t        this.words[i] = carry;\n\t        this.length++;\n\t      }\n\t    }\n\n\t    if (s !== 0) {\n\t      for (i = this.length - 1; i >= 0; i--) {\n\t        this.words[i + s] = this.words[i];\n\t      }\n\n\t      for (i = 0; i < s; i++) {\n\t        this.words[i] = 0;\n\t      }\n\n\t      this.length += s;\n\t    }\n\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype.ishln = function ishln (bits) {\n\t    // TODO(indutny): implement me\n\t    assert(this.negative === 0);\n\t    return this.iushln(bits);\n\t  };\n\n\t  // Shift-right in-place\n\t  // NOTE: `hint` is a lowest bit before trailing zeroes\n\t  // NOTE: if `extended` is present - it will be filled with destroyed bits\n\t  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n\t    assert(typeof bits === 'number' && bits >= 0);\n\t    var h;\n\t    if (hint) {\n\t      h = (hint - (hint % 26)) / 26;\n\t    } else {\n\t      h = 0;\n\t    }\n\n\t    var r = bits % 26;\n\t    var s = Math.min((bits - r) / 26, this.length);\n\t    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n\t    var maskedWords = extended;\n\n\t    h -= s;\n\t    h = Math.max(0, h);\n\n\t    // Extended mode, copy masked part\n\t    if (maskedWords) {\n\t      for (var i = 0; i < s; i++) {\n\t        maskedWords.words[i] = this.words[i];\n\t      }\n\t      maskedWords.length = s;\n\t    }\n\n\t    if (s === 0) {\n\t      // No-op, we should not move anything at all\n\t    } else if (this.length > s) {\n\t      this.length -= s;\n\t      for (i = 0; i < this.length; i++) {\n\t        this.words[i] = this.words[i + s];\n\t      }\n\t    } else {\n\t      this.words[0] = 0;\n\t      this.length = 1;\n\t    }\n\n\t    var carry = 0;\n\t    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n\t      var word = this.words[i] | 0;\n\t      this.words[i] = (carry << (26 - r)) | (word >>> r);\n\t      carry = word & mask;\n\t    }\n\n\t    // Push carried bits as a mask\n\t    if (maskedWords && carry !== 0) {\n\t      maskedWords.words[maskedWords.length++] = carry;\n\t    }\n\n\t    if (this.length === 0) {\n\t      this.words[0] = 0;\n\t      this.length = 1;\n\t    }\n\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n\t    // TODO(indutny): implement me\n\t    assert(this.negative === 0);\n\t    return this.iushrn(bits, hint, extended);\n\t  };\n\n\t  // Shift-left\n\t  BN.prototype.shln = function shln (bits) {\n\t    return this.clone().ishln(bits);\n\t  };\n\n\t  BN.prototype.ushln = function ushln (bits) {\n\t    return this.clone().iushln(bits);\n\t  };\n\n\t  // Shift-right\n\t  BN.prototype.shrn = function shrn (bits) {\n\t    return this.clone().ishrn(bits);\n\t  };\n\n\t  BN.prototype.ushrn = function ushrn (bits) {\n\t    return this.clone().iushrn(bits);\n\t  };\n\n\t  // Test if n bit is set\n\t  BN.prototype.testn = function testn (bit) {\n\t    assert(typeof bit === 'number' && bit >= 0);\n\t    var r = bit % 26;\n\t    var s = (bit - r) / 26;\n\t    var q = 1 << r;\n\n\t    // Fast case: bit is much higher than all existing words\n\t    if (this.length <= s) return false;\n\n\t    // Check bit and return\n\t    var w = this.words[s];\n\n\t    return !!(w & q);\n\t  };\n\n\t  // Return only lowers bits of number (in-place)\n\t  BN.prototype.imaskn = function imaskn (bits) {\n\t    assert(typeof bits === 'number' && bits >= 0);\n\t    var r = bits % 26;\n\t    var s = (bits - r) / 26;\n\n\t    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n\t    if (this.length <= s) {\n\t      return this;\n\t    }\n\n\t    if (r !== 0) {\n\t      s++;\n\t    }\n\t    this.length = Math.min(s, this.length);\n\n\t    if (r !== 0) {\n\t      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n\t      this.words[this.length - 1] &= mask;\n\t    }\n\n\t    return this.strip();\n\t  };\n\n\t  // Return only lowers bits of number\n\t  BN.prototype.maskn = function maskn (bits) {\n\t    return this.clone().imaskn(bits);\n\t  };\n\n\t  // Add plain number `num` to `this`\n\t  BN.prototype.iaddn = function iaddn (num) {\n\t    assert(typeof num === 'number');\n\t    assert(num < 0x4000000);\n\t    if (num < 0) return this.isubn(-num);\n\n\t    // Possible sign change\n\t    if (this.negative !== 0) {\n\t      if (this.length === 1 && (this.words[0] | 0) < num) {\n\t        this.words[0] = num - (this.words[0] | 0);\n\t        this.negative = 0;\n\t        return this;\n\t      }\n\n\t      this.negative = 0;\n\t      this.isubn(num);\n\t      this.negative = 1;\n\t      return this;\n\t    }\n\n\t    // Add without checks\n\t    return this._iaddn(num);\n\t  };\n\n\t  BN.prototype._iaddn = function _iaddn (num) {\n\t    this.words[0] += num;\n\n\t    // Carry\n\t    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n\t      this.words[i] -= 0x4000000;\n\t      if (i === this.length - 1) {\n\t        this.words[i + 1] = 1;\n\t      } else {\n\t        this.words[i + 1]++;\n\t      }\n\t    }\n\t    this.length = Math.max(this.length, i + 1);\n\n\t    return this;\n\t  };\n\n\t  // Subtract plain number `num` from `this`\n\t  BN.prototype.isubn = function isubn (num) {\n\t    assert(typeof num === 'number');\n\t    assert(num < 0x4000000);\n\t    if (num < 0) return this.iaddn(-num);\n\n\t    if (this.negative !== 0) {\n\t      this.negative = 0;\n\t      this.iaddn(num);\n\t      this.negative = 1;\n\t      return this;\n\t    }\n\n\t    this.words[0] -= num;\n\n\t    if (this.length === 1 && this.words[0] < 0) {\n\t      this.words[0] = -this.words[0];\n\t      this.negative = 1;\n\t    } else {\n\t      // Carry\n\t      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n\t        this.words[i] += 0x4000000;\n\t        this.words[i + 1] -= 1;\n\t      }\n\t    }\n\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype.addn = function addn (num) {\n\t    return this.clone().iaddn(num);\n\t  };\n\n\t  BN.prototype.subn = function subn (num) {\n\t    return this.clone().isubn(num);\n\t  };\n\n\t  BN.prototype.iabs = function iabs () {\n\t    this.negative = 0;\n\n\t    return this;\n\t  };\n\n\t  BN.prototype.abs = function abs () {\n\t    return this.clone().iabs();\n\t  };\n\n\t  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n\t    var len = num.length + shift;\n\t    var i;\n\n\t    this._expand(len);\n\n\t    var w;\n\t    var carry = 0;\n\t    for (i = 0; i < num.length; i++) {\n\t      w = (this.words[i + shift] | 0) + carry;\n\t      var right = (num.words[i] | 0) * mul;\n\t      w -= right & 0x3ffffff;\n\t      carry = (w >> 26) - ((right / 0x4000000) | 0);\n\t      this.words[i + shift] = w & 0x3ffffff;\n\t    }\n\t    for (; i < this.length - shift; i++) {\n\t      w = (this.words[i + shift] | 0) + carry;\n\t      carry = w >> 26;\n\t      this.words[i + shift] = w & 0x3ffffff;\n\t    }\n\n\t    if (carry === 0) return this.strip();\n\n\t    // Subtraction overflow\n\t    assert(carry === -1);\n\t    carry = 0;\n\t    for (i = 0; i < this.length; i++) {\n\t      w = -(this.words[i] | 0) + carry;\n\t      carry = w >> 26;\n\t      this.words[i] = w & 0x3ffffff;\n\t    }\n\t    this.negative = 1;\n\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n\t    var shift = this.length - num.length;\n\n\t    var a = this.clone();\n\t    var b = num;\n\n\t    // Normalize\n\t    var bhi = b.words[b.length - 1] | 0;\n\t    var bhiBits = this._countBits(bhi);\n\t    shift = 26 - bhiBits;\n\t    if (shift !== 0) {\n\t      b = b.ushln(shift);\n\t      a.iushln(shift);\n\t      bhi = b.words[b.length - 1] | 0;\n\t    }\n\n\t    // Initialize quotient\n\t    var m = a.length - b.length;\n\t    var q;\n\n\t    if (mode !== 'mod') {\n\t      q = new BN(null);\n\t      q.length = m + 1;\n\t      q.words = new Array(q.length);\n\t      for (var i = 0; i < q.length; i++) {\n\t        q.words[i] = 0;\n\t      }\n\t    }\n\n\t    var diff = a.clone()._ishlnsubmul(b, 1, m);\n\t    if (diff.negative === 0) {\n\t      a = diff;\n\t      if (q) {\n\t        q.words[m] = 1;\n\t      }\n\t    }\n\n\t    for (var j = m - 1; j >= 0; j--) {\n\t      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n\t        (a.words[b.length + j - 1] | 0);\n\n\t      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n\t      // (0x7ffffff)\n\t      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n\t      a._ishlnsubmul(b, qj, j);\n\t      while (a.negative !== 0) {\n\t        qj--;\n\t        a.negative = 0;\n\t        a._ishlnsubmul(b, 1, j);\n\t        if (!a.isZero()) {\n\t          a.negative ^= 1;\n\t        }\n\t      }\n\t      if (q) {\n\t        q.words[j] = qj;\n\t      }\n\t    }\n\t    if (q) {\n\t      q.strip();\n\t    }\n\t    a.strip();\n\n\t    // Denormalize\n\t    if (mode !== 'div' && shift !== 0) {\n\t      a.iushrn(shift);\n\t    }\n\n\t    return {\n\t      div: q || null,\n\t      mod: a\n\t    };\n\t  };\n\n\t  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n\t  //       to `div` to request div only, or be absent to\n\t  //       request both div & mod\n\t  //       2) `positive` is true if unsigned mod is requested\n\t  BN.prototype.divmod = function divmod (num, mode, positive) {\n\t    assert(!num.isZero());\n\n\t    if (this.isZero()) {\n\t      return {\n\t        div: new BN(0),\n\t        mod: new BN(0)\n\t      };\n\t    }\n\n\t    var div, mod, res;\n\t    if (this.negative !== 0 && num.negative === 0) {\n\t      res = this.neg().divmod(num, mode);\n\n\t      if (mode !== 'mod') {\n\t        div = res.div.neg();\n\t      }\n\n\t      if (mode !== 'div') {\n\t        mod = res.mod.neg();\n\t        if (positive && mod.negative !== 0) {\n\t          mod.iadd(num);\n\t        }\n\t      }\n\n\t      return {\n\t        div: div,\n\t        mod: mod\n\t      };\n\t    }\n\n\t    if (this.negative === 0 && num.negative !== 0) {\n\t      res = this.divmod(num.neg(), mode);\n\n\t      if (mode !== 'mod') {\n\t        div = res.div.neg();\n\t      }\n\n\t      return {\n\t        div: div,\n\t        mod: res.mod\n\t      };\n\t    }\n\n\t    if ((this.negative & num.negative) !== 0) {\n\t      res = this.neg().divmod(num.neg(), mode);\n\n\t      if (mode !== 'div') {\n\t        mod = res.mod.neg();\n\t        if (positive && mod.negative !== 0) {\n\t          mod.isub(num);\n\t        }\n\t      }\n\n\t      return {\n\t        div: res.div,\n\t        mod: mod\n\t      };\n\t    }\n\n\t    // Both numbers are positive at this point\n\n\t    // Strip both numbers to approximate shift value\n\t    if (num.length > this.length || this.cmp(num) < 0) {\n\t      return {\n\t        div: new BN(0),\n\t        mod: this\n\t      };\n\t    }\n\n\t    // Very short reduction\n\t    if (num.length === 1) {\n\t      if (mode === 'div') {\n\t        return {\n\t          div: this.divn(num.words[0]),\n\t          mod: null\n\t        };\n\t      }\n\n\t      if (mode === 'mod') {\n\t        return {\n\t          div: null,\n\t          mod: new BN(this.modn(num.words[0]))\n\t        };\n\t      }\n\n\t      return {\n\t        div: this.divn(num.words[0]),\n\t        mod: new BN(this.modn(num.words[0]))\n\t      };\n\t    }\n\n\t    return this._wordDiv(num, mode);\n\t  };\n\n\t  // Find `this` / `num`\n\t  BN.prototype.div = function div (num) {\n\t    return this.divmod(num, 'div', false).div;\n\t  };\n\n\t  // Find `this` % `num`\n\t  BN.prototype.mod = function mod (num) {\n\t    return this.divmod(num, 'mod', false).mod;\n\t  };\n\n\t  BN.prototype.umod = function umod (num) {\n\t    return this.divmod(num, 'mod', true).mod;\n\t  };\n\n\t  // Find Round(`this` / `num`)\n\t  BN.prototype.divRound = function divRound (num) {\n\t    var dm = this.divmod(num);\n\n\t    // Fast case - exact division\n\t    if (dm.mod.isZero()) return dm.div;\n\n\t    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n\t    var half = num.ushrn(1);\n\t    var r2 = num.andln(1);\n\t    var cmp = mod.cmp(half);\n\n\t    // Round down\n\t    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n\t    // Round up\n\t    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n\t  };\n\n\t  BN.prototype.modn = function modn (num) {\n\t    assert(num <= 0x3ffffff);\n\t    var p = (1 << 26) % num;\n\n\t    var acc = 0;\n\t    for (var i = this.length - 1; i >= 0; i--) {\n\t      acc = (p * acc + (this.words[i] | 0)) % num;\n\t    }\n\n\t    return acc;\n\t  };\n\n\t  // In-place division by number\n\t  BN.prototype.idivn = function idivn (num) {\n\t    assert(num <= 0x3ffffff);\n\n\t    var carry = 0;\n\t    for (var i = this.length - 1; i >= 0; i--) {\n\t      var w = (this.words[i] | 0) + carry * 0x4000000;\n\t      this.words[i] = (w / num) | 0;\n\t      carry = w % num;\n\t    }\n\n\t    return this.strip();\n\t  };\n\n\t  BN.prototype.divn = function divn (num) {\n\t    return this.clone().idivn(num);\n\t  };\n\n\t  BN.prototype.egcd = function egcd (p) {\n\t    assert(p.negative === 0);\n\t    assert(!p.isZero());\n\n\t    var x = this;\n\t    var y = p.clone();\n\n\t    if (x.negative !== 0) {\n\t      x = x.umod(p);\n\t    } else {\n\t      x = x.clone();\n\t    }\n\n\t    // A * x + B * y = x\n\t    var A = new BN(1);\n\t    var B = new BN(0);\n\n\t    // C * x + D * y = y\n\t    var C = new BN(0);\n\t    var D = new BN(1);\n\n\t    var g = 0;\n\n\t    while (x.isEven() && y.isEven()) {\n\t      x.iushrn(1);\n\t      y.iushrn(1);\n\t      ++g;\n\t    }\n\n\t    var yp = y.clone();\n\t    var xp = x.clone();\n\n\t    while (!x.isZero()) {\n\t      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\t      if (i > 0) {\n\t        x.iushrn(i);\n\t        while (i-- > 0) {\n\t          if (A.isOdd() || B.isOdd()) {\n\t            A.iadd(yp);\n\t            B.isub(xp);\n\t          }\n\n\t          A.iushrn(1);\n\t          B.iushrn(1);\n\t        }\n\t      }\n\n\t      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\t      if (j > 0) {\n\t        y.iushrn(j);\n\t        while (j-- > 0) {\n\t          if (C.isOdd() || D.isOdd()) {\n\t            C.iadd(yp);\n\t            D.isub(xp);\n\t          }\n\n\t          C.iushrn(1);\n\t          D.iushrn(1);\n\t        }\n\t      }\n\n\t      if (x.cmp(y) >= 0) {\n\t        x.isub(y);\n\t        A.isub(C);\n\t        B.isub(D);\n\t      } else {\n\t        y.isub(x);\n\t        C.isub(A);\n\t        D.isub(B);\n\t      }\n\t    }\n\n\t    return {\n\t      a: C,\n\t      b: D,\n\t      gcd: y.iushln(g)\n\t    };\n\t  };\n\n\t  // This is reduced incarnation of the binary EEA\n\t  // above, designated to invert members of the\n\t  // _prime_ fields F(p) at a maximal speed\n\t  BN.prototype._invmp = function _invmp (p) {\n\t    assert(p.negative === 0);\n\t    assert(!p.isZero());\n\n\t    var a = this;\n\t    var b = p.clone();\n\n\t    if (a.negative !== 0) {\n\t      a = a.umod(p);\n\t    } else {\n\t      a = a.clone();\n\t    }\n\n\t    var x1 = new BN(1);\n\t    var x2 = new BN(0);\n\n\t    var delta = b.clone();\n\n\t    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n\t      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\t      if (i > 0) {\n\t        a.iushrn(i);\n\t        while (i-- > 0) {\n\t          if (x1.isOdd()) {\n\t            x1.iadd(delta);\n\t          }\n\n\t          x1.iushrn(1);\n\t        }\n\t      }\n\n\t      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\t      if (j > 0) {\n\t        b.iushrn(j);\n\t        while (j-- > 0) {\n\t          if (x2.isOdd()) {\n\t            x2.iadd(delta);\n\t          }\n\n\t          x2.iushrn(1);\n\t        }\n\t      }\n\n\t      if (a.cmp(b) >= 0) {\n\t        a.isub(b);\n\t        x1.isub(x2);\n\t      } else {\n\t        b.isub(a);\n\t        x2.isub(x1);\n\t      }\n\t    }\n\n\t    var res;\n\t    if (a.cmpn(1) === 0) {\n\t      res = x1;\n\t    } else {\n\t      res = x2;\n\t    }\n\n\t    if (res.cmpn(0) < 0) {\n\t      res.iadd(p);\n\t    }\n\n\t    return res;\n\t  };\n\n\t  BN.prototype.gcd = function gcd (num) {\n\t    if (this.isZero()) return num.abs();\n\t    if (num.isZero()) return this.abs();\n\n\t    var a = this.clone();\n\t    var b = num.clone();\n\t    a.negative = 0;\n\t    b.negative = 0;\n\n\t    // Remove common factor of two\n\t    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n\t      a.iushrn(1);\n\t      b.iushrn(1);\n\t    }\n\n\t    do {\n\t      while (a.isEven()) {\n\t        a.iushrn(1);\n\t      }\n\t      while (b.isEven()) {\n\t        b.iushrn(1);\n\t      }\n\n\t      var r = a.cmp(b);\n\t      if (r < 0) {\n\t        // Swap `a` and `b` to make `a` always bigger than `b`\n\t        var t = a;\n\t        a = b;\n\t        b = t;\n\t      } else if (r === 0 || b.cmpn(1) === 0) {\n\t        break;\n\t      }\n\n\t      a.isub(b);\n\t    } while (true);\n\n\t    return b.iushln(shift);\n\t  };\n\n\t  // Invert number in the field F(num)\n\t  BN.prototype.invm = function invm (num) {\n\t    return this.egcd(num).a.umod(num);\n\t  };\n\n\t  BN.prototype.isEven = function isEven () {\n\t    return (this.words[0] & 1) === 0;\n\t  };\n\n\t  BN.prototype.isOdd = function isOdd () {\n\t    return (this.words[0] & 1) === 1;\n\t  };\n\n\t  // And first word and num\n\t  BN.prototype.andln = function andln (num) {\n\t    return this.words[0] & num;\n\t  };\n\n\t  // Increment at the bit position in-line\n\t  BN.prototype.bincn = function bincn (bit) {\n\t    assert(typeof bit === 'number');\n\t    var r = bit % 26;\n\t    var s = (bit - r) / 26;\n\t    var q = 1 << r;\n\n\t    // Fast case: bit is much higher than all existing words\n\t    if (this.length <= s) {\n\t      this._expand(s + 1);\n\t      this.words[s] |= q;\n\t      return this;\n\t    }\n\n\t    // Add bit and propagate, if needed\n\t    var carry = q;\n\t    for (var i = s; carry !== 0 && i < this.length; i++) {\n\t      var w = this.words[i] | 0;\n\t      w += carry;\n\t      carry = w >>> 26;\n\t      w &= 0x3ffffff;\n\t      this.words[i] = w;\n\t    }\n\t    if (carry !== 0) {\n\t      this.words[i] = carry;\n\t      this.length++;\n\t    }\n\t    return this;\n\t  };\n\n\t  BN.prototype.isZero = function isZero () {\n\t    return this.length === 1 && this.words[0] === 0;\n\t  };\n\n\t  BN.prototype.cmpn = function cmpn (num) {\n\t    var negative = num < 0;\n\n\t    if (this.negative !== 0 && !negative) return -1;\n\t    if (this.negative === 0 && negative) return 1;\n\n\t    this.strip();\n\n\t    var res;\n\t    if (this.length > 1) {\n\t      res = 1;\n\t    } else {\n\t      if (negative) {\n\t        num = -num;\n\t      }\n\n\t      assert(num <= 0x3ffffff, 'Number is too big');\n\n\t      var w = this.words[0] | 0;\n\t      res = w === num ? 0 : w < num ? -1 : 1;\n\t    }\n\t    if (this.negative !== 0) return -res | 0;\n\t    return res;\n\t  };\n\n\t  // Compare two numbers and return:\n\t  // 1 - if `this` > `num`\n\t  // 0 - if `this` == `num`\n\t  // -1 - if `this` < `num`\n\t  BN.prototype.cmp = function cmp (num) {\n\t    if (this.negative !== 0 && num.negative === 0) return -1;\n\t    if (this.negative === 0 && num.negative !== 0) return 1;\n\n\t    var res = this.ucmp(num);\n\t    if (this.negative !== 0) return -res | 0;\n\t    return res;\n\t  };\n\n\t  // Unsigned comparison\n\t  BN.prototype.ucmp = function ucmp (num) {\n\t    // At this point both numbers have the same sign\n\t    if (this.length > num.length) return 1;\n\t    if (this.length < num.length) return -1;\n\n\t    var res = 0;\n\t    for (var i = this.length - 1; i >= 0; i--) {\n\t      var a = this.words[i] | 0;\n\t      var b = num.words[i] | 0;\n\n\t      if (a === b) continue;\n\t      if (a < b) {\n\t        res = -1;\n\t      } else if (a > b) {\n\t        res = 1;\n\t      }\n\t      break;\n\t    }\n\t    return res;\n\t  };\n\n\t  BN.prototype.gtn = function gtn (num) {\n\t    return this.cmpn(num) === 1;\n\t  };\n\n\t  BN.prototype.gt = function gt (num) {\n\t    return this.cmp(num) === 1;\n\t  };\n\n\t  BN.prototype.gten = function gten (num) {\n\t    return this.cmpn(num) >= 0;\n\t  };\n\n\t  BN.prototype.gte = function gte (num) {\n\t    return this.cmp(num) >= 0;\n\t  };\n\n\t  BN.prototype.ltn = function ltn (num) {\n\t    return this.cmpn(num) === -1;\n\t  };\n\n\t  BN.prototype.lt = function lt (num) {\n\t    return this.cmp(num) === -1;\n\t  };\n\n\t  BN.prototype.lten = function lten (num) {\n\t    return this.cmpn(num) <= 0;\n\t  };\n\n\t  BN.prototype.lte = function lte (num) {\n\t    return this.cmp(num) <= 0;\n\t  };\n\n\t  BN.prototype.eqn = function eqn (num) {\n\t    return this.cmpn(num) === 0;\n\t  };\n\n\t  BN.prototype.eq = function eq (num) {\n\t    return this.cmp(num) === 0;\n\t  };\n\n\t  //\n\t  // A reduce context, could be using montgomery or something better, depending\n\t  // on the `m` itself.\n\t  //\n\t  BN.red = function red (num) {\n\t    return new Red(num);\n\t  };\n\n\t  BN.prototype.toRed = function toRed (ctx) {\n\t    assert(!this.red, 'Already a number in reduction context');\n\t    assert(this.negative === 0, 'red works only with positives');\n\t    return ctx.convertTo(this)._forceRed(ctx);\n\t  };\n\n\t  BN.prototype.fromRed = function fromRed () {\n\t    assert(this.red, 'fromRed works only with numbers in reduction context');\n\t    return this.red.convertFrom(this);\n\t  };\n\n\t  BN.prototype._forceRed = function _forceRed (ctx) {\n\t    this.red = ctx;\n\t    return this;\n\t  };\n\n\t  BN.prototype.forceRed = function forceRed (ctx) {\n\t    assert(!this.red, 'Already a number in reduction context');\n\t    return this._forceRed(ctx);\n\t  };\n\n\t  BN.prototype.redAdd = function redAdd (num) {\n\t    assert(this.red, 'redAdd works only with red numbers');\n\t    return this.red.add(this, num);\n\t  };\n\n\t  BN.prototype.redIAdd = function redIAdd (num) {\n\t    assert(this.red, 'redIAdd works only with red numbers');\n\t    return this.red.iadd(this, num);\n\t  };\n\n\t  BN.prototype.redSub = function redSub (num) {\n\t    assert(this.red, 'redSub works only with red numbers');\n\t    return this.red.sub(this, num);\n\t  };\n\n\t  BN.prototype.redISub = function redISub (num) {\n\t    assert(this.red, 'redISub works only with red numbers');\n\t    return this.red.isub(this, num);\n\t  };\n\n\t  BN.prototype.redShl = function redShl (num) {\n\t    assert(this.red, 'redShl works only with red numbers');\n\t    return this.red.shl(this, num);\n\t  };\n\n\t  BN.prototype.redMul = function redMul (num) {\n\t    assert(this.red, 'redMul works only with red numbers');\n\t    this.red._verify2(this, num);\n\t    return this.red.mul(this, num);\n\t  };\n\n\t  BN.prototype.redIMul = function redIMul (num) {\n\t    assert(this.red, 'redMul works only with red numbers');\n\t    this.red._verify2(this, num);\n\t    return this.red.imul(this, num);\n\t  };\n\n\t  BN.prototype.redSqr = function redSqr () {\n\t    assert(this.red, 'redSqr works only with red numbers');\n\t    this.red._verify1(this);\n\t    return this.red.sqr(this);\n\t  };\n\n\t  BN.prototype.redISqr = function redISqr () {\n\t    assert(this.red, 'redISqr works only with red numbers');\n\t    this.red._verify1(this);\n\t    return this.red.isqr(this);\n\t  };\n\n\t  // Square root over p\n\t  BN.prototype.redSqrt = function redSqrt () {\n\t    assert(this.red, 'redSqrt works only with red numbers');\n\t    this.red._verify1(this);\n\t    return this.red.sqrt(this);\n\t  };\n\n\t  BN.prototype.redInvm = function redInvm () {\n\t    assert(this.red, 'redInvm works only with red numbers');\n\t    this.red._verify1(this);\n\t    return this.red.invm(this);\n\t  };\n\n\t  // Return negative clone of `this` % `red modulo`\n\t  BN.prototype.redNeg = function redNeg () {\n\t    assert(this.red, 'redNeg works only with red numbers');\n\t    this.red._verify1(this);\n\t    return this.red.neg(this);\n\t  };\n\n\t  BN.prototype.redPow = function redPow (num) {\n\t    assert(this.red && !num.red, 'redPow(normalNum)');\n\t    this.red._verify1(this);\n\t    return this.red.pow(this, num);\n\t  };\n\n\t  // Prime numbers with efficient reduction\n\t  var primes = {\n\t    k256: null,\n\t    p224: null,\n\t    p192: null,\n\t    p25519: null\n\t  };\n\n\t  // Pseudo-Mersenne prime\n\t  function MPrime (name, p) {\n\t    // P = 2 ^ N - K\n\t    this.name = name;\n\t    this.p = new BN(p, 16);\n\t    this.n = this.p.bitLength();\n\t    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n\t    this.tmp = this._tmp();\n\t  }\n\n\t  MPrime.prototype._tmp = function _tmp () {\n\t    var tmp = new BN(null);\n\t    tmp.words = new Array(Math.ceil(this.n / 13));\n\t    return tmp;\n\t  };\n\n\t  MPrime.prototype.ireduce = function ireduce (num) {\n\t    // Assumes that `num` is less than `P^2`\n\t    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n\t    var r = num;\n\t    var rlen;\n\n\t    do {\n\t      this.split(r, this.tmp);\n\t      r = this.imulK(r);\n\t      r = r.iadd(this.tmp);\n\t      rlen = r.bitLength();\n\t    } while (rlen > this.n);\n\n\t    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n\t    if (cmp === 0) {\n\t      r.words[0] = 0;\n\t      r.length = 1;\n\t    } else if (cmp > 0) {\n\t      r.isub(this.p);\n\t    } else {\n\t      if (r.strip !== undefined) {\n\t        // r is BN v4 instance\n\t        r.strip();\n\t      } else {\n\t        // r is BN v5 instance\n\t        r._strip();\n\t      }\n\t    }\n\n\t    return r;\n\t  };\n\n\t  MPrime.prototype.split = function split (input, out) {\n\t    input.iushrn(this.n, 0, out);\n\t  };\n\n\t  MPrime.prototype.imulK = function imulK (num) {\n\t    return num.imul(this.k);\n\t  };\n\n\t  function K256 () {\n\t    MPrime.call(\n\t      this,\n\t      'k256',\n\t      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n\t  }\n\t  inherits(K256, MPrime);\n\n\t  K256.prototype.split = function split (input, output) {\n\t    // 256 = 9 * 26 + 22\n\t    var mask = 0x3fffff;\n\n\t    var outLen = Math.min(input.length, 9);\n\t    for (var i = 0; i < outLen; i++) {\n\t      output.words[i] = input.words[i];\n\t    }\n\t    output.length = outLen;\n\n\t    if (input.length <= 9) {\n\t      input.words[0] = 0;\n\t      input.length = 1;\n\t      return;\n\t    }\n\n\t    // Shift by 9 limbs\n\t    var prev = input.words[9];\n\t    output.words[output.length++] = prev & mask;\n\n\t    for (i = 10; i < input.length; i++) {\n\t      var next = input.words[i] | 0;\n\t      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n\t      prev = next;\n\t    }\n\t    prev >>>= 22;\n\t    input.words[i - 10] = prev;\n\t    if (prev === 0 && input.length > 10) {\n\t      input.length -= 10;\n\t    } else {\n\t      input.length -= 9;\n\t    }\n\t  };\n\n\t  K256.prototype.imulK = function imulK (num) {\n\t    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n\t    num.words[num.length] = 0;\n\t    num.words[num.length + 1] = 0;\n\t    num.length += 2;\n\n\t    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n\t    var lo = 0;\n\t    for (var i = 0; i < num.length; i++) {\n\t      var w = num.words[i] | 0;\n\t      lo += w * 0x3d1;\n\t      num.words[i] = lo & 0x3ffffff;\n\t      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n\t    }\n\n\t    // Fast length reduction\n\t    if (num.words[num.length - 1] === 0) {\n\t      num.length--;\n\t      if (num.words[num.length - 1] === 0) {\n\t        num.length--;\n\t      }\n\t    }\n\t    return num;\n\t  };\n\n\t  function P224 () {\n\t    MPrime.call(\n\t      this,\n\t      'p224',\n\t      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n\t  }\n\t  inherits(P224, MPrime);\n\n\t  function P192 () {\n\t    MPrime.call(\n\t      this,\n\t      'p192',\n\t      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n\t  }\n\t  inherits(P192, MPrime);\n\n\t  function P25519 () {\n\t    // 2 ^ 255 - 19\n\t    MPrime.call(\n\t      this,\n\t      '25519',\n\t      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n\t  }\n\t  inherits(P25519, MPrime);\n\n\t  P25519.prototype.imulK = function imulK (num) {\n\t    // K = 0x13\n\t    var carry = 0;\n\t    for (var i = 0; i < num.length; i++) {\n\t      var hi = (num.words[i] | 0) * 0x13 + carry;\n\t      var lo = hi & 0x3ffffff;\n\t      hi >>>= 26;\n\n\t      num.words[i] = lo;\n\t      carry = hi;\n\t    }\n\t    if (carry !== 0) {\n\t      num.words[num.length++] = carry;\n\t    }\n\t    return num;\n\t  };\n\n\t  // Exported mostly for testing purposes, use plain name instead\n\t  BN._prime = function prime (name) {\n\t    // Cached version of prime\n\t    if (primes[name]) return primes[name];\n\n\t    var prime;\n\t    if (name === 'k256') {\n\t      prime = new K256();\n\t    } else if (name === 'p224') {\n\t      prime = new P224();\n\t    } else if (name === 'p192') {\n\t      prime = new P192();\n\t    } else if (name === 'p25519') {\n\t      prime = new P25519();\n\t    } else {\n\t      throw new Error('Unknown prime ' + name);\n\t    }\n\t    primes[name] = prime;\n\n\t    return prime;\n\t  };\n\n\t  //\n\t  // Base reduction engine\n\t  //\n\t  function Red (m) {\n\t    if (typeof m === 'string') {\n\t      var prime = BN._prime(m);\n\t      this.m = prime.p;\n\t      this.prime = prime;\n\t    } else {\n\t      assert(m.gtn(1), 'modulus must be greater than 1');\n\t      this.m = m;\n\t      this.prime = null;\n\t    }\n\t  }\n\n\t  Red.prototype._verify1 = function _verify1 (a) {\n\t    assert(a.negative === 0, 'red works only with positives');\n\t    assert(a.red, 'red works only with red numbers');\n\t  };\n\n\t  Red.prototype._verify2 = function _verify2 (a, b) {\n\t    assert((a.negative | b.negative) === 0, 'red works only with positives');\n\t    assert(a.red && a.red === b.red,\n\t      'red works only with red numbers');\n\t  };\n\n\t  Red.prototype.imod = function imod (a) {\n\t    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\t    return a.umod(this.m)._forceRed(this);\n\t  };\n\n\t  Red.prototype.neg = function neg (a) {\n\t    if (a.isZero()) {\n\t      return a.clone();\n\t    }\n\n\t    return this.m.sub(a)._forceRed(this);\n\t  };\n\n\t  Red.prototype.add = function add (a, b) {\n\t    this._verify2(a, b);\n\n\t    var res = a.add(b);\n\t    if (res.cmp(this.m) >= 0) {\n\t      res.isub(this.m);\n\t    }\n\t    return res._forceRed(this);\n\t  };\n\n\t  Red.prototype.iadd = function iadd (a, b) {\n\t    this._verify2(a, b);\n\n\t    var res = a.iadd(b);\n\t    if (res.cmp(this.m) >= 0) {\n\t      res.isub(this.m);\n\t    }\n\t    return res;\n\t  };\n\n\t  Red.prototype.sub = function sub (a, b) {\n\t    this._verify2(a, b);\n\n\t    var res = a.sub(b);\n\t    if (res.cmpn(0) < 0) {\n\t      res.iadd(this.m);\n\t    }\n\t    return res._forceRed(this);\n\t  };\n\n\t  Red.prototype.isub = function isub (a, b) {\n\t    this._verify2(a, b);\n\n\t    var res = a.isub(b);\n\t    if (res.cmpn(0) < 0) {\n\t      res.iadd(this.m);\n\t    }\n\t    return res;\n\t  };\n\n\t  Red.prototype.shl = function shl (a, num) {\n\t    this._verify1(a);\n\t    return this.imod(a.ushln(num));\n\t  };\n\n\t  Red.prototype.imul = function imul (a, b) {\n\t    this._verify2(a, b);\n\t    return this.imod(a.imul(b));\n\t  };\n\n\t  Red.prototype.mul = function mul (a, b) {\n\t    this._verify2(a, b);\n\t    return this.imod(a.mul(b));\n\t  };\n\n\t  Red.prototype.isqr = function isqr (a) {\n\t    return this.imul(a, a.clone());\n\t  };\n\n\t  Red.prototype.sqr = function sqr (a) {\n\t    return this.mul(a, a);\n\t  };\n\n\t  Red.prototype.sqrt = function sqrt (a) {\n\t    if (a.isZero()) return a.clone();\n\n\t    var mod3 = this.m.andln(3);\n\t    assert(mod3 % 2 === 1);\n\n\t    // Fast case\n\t    if (mod3 === 3) {\n\t      var pow = this.m.add(new BN(1)).iushrn(2);\n\t      return this.pow(a, pow);\n\t    }\n\n\t    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n\t    //\n\t    // Find Q and S, that Q * 2 ^ S = (P - 1)\n\t    var q = this.m.subn(1);\n\t    var s = 0;\n\t    while (!q.isZero() && q.andln(1) === 0) {\n\t      s++;\n\t      q.iushrn(1);\n\t    }\n\t    assert(!q.isZero());\n\n\t    var one = new BN(1).toRed(this);\n\t    var nOne = one.redNeg();\n\n\t    // Find quadratic non-residue\n\t    // NOTE: Max is such because of generalized Riemann hypothesis.\n\t    var lpow = this.m.subn(1).iushrn(1);\n\t    var z = this.m.bitLength();\n\t    z = new BN(2 * z * z).toRed(this);\n\n\t    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n\t      z.redIAdd(nOne);\n\t    }\n\n\t    var c = this.pow(z, q);\n\t    var r = this.pow(a, q.addn(1).iushrn(1));\n\t    var t = this.pow(a, q);\n\t    var m = s;\n\t    while (t.cmp(one) !== 0) {\n\t      var tmp = t;\n\t      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n\t        tmp = tmp.redSqr();\n\t      }\n\t      assert(i < m);\n\t      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n\t      r = r.redMul(b);\n\t      c = b.redSqr();\n\t      t = t.redMul(c);\n\t      m = i;\n\t    }\n\n\t    return r;\n\t  };\n\n\t  Red.prototype.invm = function invm (a) {\n\t    var inv = a._invmp(this.m);\n\t    if (inv.negative !== 0) {\n\t      inv.negative = 0;\n\t      return this.imod(inv).redNeg();\n\t    } else {\n\t      return this.imod(inv);\n\t    }\n\t  };\n\n\t  Red.prototype.pow = function pow (a, num) {\n\t    if (num.isZero()) return new BN(1).toRed(this);\n\t    if (num.cmpn(1) === 0) return a.clone();\n\n\t    var windowSize = 4;\n\t    var wnd = new Array(1 << windowSize);\n\t    wnd[0] = new BN(1).toRed(this);\n\t    wnd[1] = a;\n\t    for (var i = 2; i < wnd.length; i++) {\n\t      wnd[i] = this.mul(wnd[i - 1], a);\n\t    }\n\n\t    var res = wnd[0];\n\t    var current = 0;\n\t    var currentLen = 0;\n\t    var start = num.bitLength() % 26;\n\t    if (start === 0) {\n\t      start = 26;\n\t    }\n\n\t    for (i = num.length - 1; i >= 0; i--) {\n\t      var word = num.words[i];\n\t      for (var j = start - 1; j >= 0; j--) {\n\t        var bit = (word >> j) & 1;\n\t        if (res !== wnd[0]) {\n\t          res = this.sqr(res);\n\t        }\n\n\t        if (bit === 0 && current === 0) {\n\t          currentLen = 0;\n\t          continue;\n\t        }\n\n\t        current <<= 1;\n\t        current |= bit;\n\t        currentLen++;\n\t        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n\t        res = this.mul(res, wnd[current]);\n\t        currentLen = 0;\n\t        current = 0;\n\t      }\n\t      start = 26;\n\t    }\n\n\t    return res;\n\t  };\n\n\t  Red.prototype.convertTo = function convertTo (num) {\n\t    var r = num.umod(this.m);\n\n\t    return r === num ? r.clone() : r;\n\t  };\n\n\t  Red.prototype.convertFrom = function convertFrom (num) {\n\t    var res = num.clone();\n\t    res.red = null;\n\t    return res;\n\t  };\n\n\t  //\n\t  // Montgomery method engine\n\t  //\n\n\t  BN.mont = function mont (num) {\n\t    return new Mont(num);\n\t  };\n\n\t  function Mont (m) {\n\t    Red.call(this, m);\n\n\t    this.shift = this.m.bitLength();\n\t    if (this.shift % 26 !== 0) {\n\t      this.shift += 26 - (this.shift % 26);\n\t    }\n\n\t    this.r = new BN(1).iushln(this.shift);\n\t    this.r2 = this.imod(this.r.sqr());\n\t    this.rinv = this.r._invmp(this.m);\n\n\t    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n\t    this.minv = this.minv.umod(this.r);\n\t    this.minv = this.r.sub(this.minv);\n\t  }\n\t  inherits(Mont, Red);\n\n\t  Mont.prototype.convertTo = function convertTo (num) {\n\t    return this.imod(num.ushln(this.shift));\n\t  };\n\n\t  Mont.prototype.convertFrom = function convertFrom (num) {\n\t    var r = this.imod(num.mul(this.rinv));\n\t    r.red = null;\n\t    return r;\n\t  };\n\n\t  Mont.prototype.imul = function imul (a, b) {\n\t    if (a.isZero() || b.isZero()) {\n\t      a.words[0] = 0;\n\t      a.length = 1;\n\t      return a;\n\t    }\n\n\t    var t = a.imul(b);\n\t    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n\t    var u = t.isub(c).iushrn(this.shift);\n\t    var res = u;\n\n\t    if (u.cmp(this.m) >= 0) {\n\t      res = u.isub(this.m);\n\t    } else if (u.cmpn(0) < 0) {\n\t      res = u.iadd(this.m);\n\t    }\n\n\t    return res._forceRed(this);\n\t  };\n\n\t  Mont.prototype.mul = function mul (a, b) {\n\t    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n\t    var t = a.mul(b);\n\t    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n\t    var u = t.isub(c).iushrn(this.shift);\n\t    var res = u;\n\t    if (u.cmp(this.m) >= 0) {\n\t      res = u.isub(this.m);\n\t    } else if (u.cmpn(0) < 0) {\n\t      res = u.iadd(this.m);\n\t    }\n\n\t    return res._forceRed(this);\n\t  };\n\n\t  Mont.prototype.invm = function invm (a) {\n\t    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n\t    var res = this.imod(a._invmp(this.m).mul(this.r2));\n\t    return res._forceRed(this);\n\t  };\n\t})( false || module, commonjsGlobal);\n\t});\n\n\tvar _version = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"logger/5.5.0\";\n\n\t});\n\n\tvar _version$1 = /*@__PURE__*/getDefaultExportFromCjs(_version);\n\n\tvar lib = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Logger = exports.ErrorCode = exports.LogLevel = void 0;\n\tvar _permanentCensorErrors = false;\n\tvar _censorErrors = false;\n\tvar LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\n\tvar _logLevel = LogLevels[\"default\"];\n\n\tvar _globalLogger = null;\n\tfunction _checkNormalize() {\n\t    try {\n\t        var missing_1 = [];\n\t        // Make sure all forms of normalization are supported\n\t        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n\t            try {\n\t                if (\"test\".normalize(form) !== \"test\") {\n\t                    throw new Error(\"bad normalize\");\n\t                }\n\t                ;\n\t            }\n\t            catch (error) {\n\t                missing_1.push(form);\n\t            }\n\t        });\n\t        if (missing_1.length) {\n\t            throw new Error(\"missing \" + missing_1.join(\", \"));\n\t        }\n\t        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n\t            throw new Error(\"broken implementation\");\n\t        }\n\t    }\n\t    catch (error) {\n\t        return error.message;\n\t    }\n\t    return null;\n\t}\n\tvar _normalizeError = _checkNormalize();\n\tvar LogLevel;\n\t(function (LogLevel) {\n\t    LogLevel[\"DEBUG\"] = \"DEBUG\";\n\t    LogLevel[\"INFO\"] = \"INFO\";\n\t    LogLevel[\"WARNING\"] = \"WARNING\";\n\t    LogLevel[\"ERROR\"] = \"ERROR\";\n\t    LogLevel[\"OFF\"] = \"OFF\";\n\t})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n\tvar ErrorCode;\n\t(function (ErrorCode) {\n\t    ///////////////////\n\t    // Generic Errors\n\t    // Unknown Error\n\t    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n\t    // Not Implemented\n\t    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n\t    // Unsupported Operation\n\t    //   - operation\n\t    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n\t    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n\t    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\t    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n\t    // Some sort of bad response from the server\n\t    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n\t    // Timeout\n\t    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n\t    ///////////////////\n\t    // Operational  Errors\n\t    // Buffer Overrun\n\t    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n\t    // Numeric Fault\n\t    //   - operation: the operation being executed\n\t    //   - fault: the reason this faulted\n\t    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n\t    ///////////////////\n\t    // Argument Errors\n\t    // Missing new operator to an object\n\t    //  - name: The name of the class\n\t    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n\t    // Invalid argument (e.g. value is incompatible with type) to a function:\n\t    //   - argument: The argument name that was invalid\n\t    //   - value: The value of the argument\n\t    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n\t    // Missing argument to a function:\n\t    //   - count: The number of arguments received\n\t    //   - expectedCount: The number of arguments expected\n\t    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n\t    // Too many arguments\n\t    //   - count: The number of arguments received\n\t    //   - expectedCount: The number of arguments expected\n\t    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n\t    ///////////////////\n\t    // Blockchain Errors\n\t    // Call exception\n\t    //  - transaction: the transaction\n\t    //  - address?: the contract address\n\t    //  - args?: The arguments passed into the function\n\t    //  - method?: The Solidity method signature\n\t    //  - errorSignature?: The EIP848 error signature\n\t    //  - errorArgs?: The EIP848 error parameters\n\t    //  - reason: The reason (only for EIP848 \"Error(string)\")\n\t    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n\t    // Insufficient funds (< value + gasLimit * gasPrice)\n\t    //   - transaction: the transaction attempted\n\t    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n\t    // Nonce has already been used\n\t    //   - transaction: the transaction attempted\n\t    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n\t    // The replacement fee for the transaction is too low\n\t    //   - transaction: the transaction attempted\n\t    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n\t    // The gas limit could not be estimated\n\t    //   - transaction: the transaction passed to estimateGas\n\t    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n\t    // The transaction was replaced by one with a higher gas price\n\t    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n\t    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n\t    //   - hash: original transaction hash\n\t    //   - replacement: the full TransactionsResponse for the replacement\n\t    //   - receipt: the receipt of the replacement\n\t    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n\t})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));\n\t;\n\tvar HEX = \"0123456789abcdef\";\n\tvar Logger = /** @class */ (function () {\n\t    function Logger(version) {\n\t        Object.defineProperty(this, \"version\", {\n\t            enumerable: true,\n\t            value: version,\n\t            writable: false\n\t        });\n\t    }\n\t    Logger.prototype._log = function (logLevel, args) {\n\t        var level = logLevel.toLowerCase();\n\t        if (LogLevels[level] == null) {\n\t            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n\t        }\n\t        if (_logLevel > LogLevels[level]) {\n\t            return;\n\t        }\n\t        console.log.apply(console, args);\n\t    };\n\t    Logger.prototype.debug = function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        this._log(Logger.levels.DEBUG, args);\n\t    };\n\t    Logger.prototype.info = function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        this._log(Logger.levels.INFO, args);\n\t    };\n\t    Logger.prototype.warn = function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        this._log(Logger.levels.WARNING, args);\n\t    };\n\t    Logger.prototype.makeError = function (message, code, params) {\n\t        // Errors are being censored\n\t        if (_censorErrors) {\n\t            return this.makeError(\"censored error\", code, {});\n\t        }\n\t        if (!code) {\n\t            code = Logger.errors.UNKNOWN_ERROR;\n\t        }\n\t        if (!params) {\n\t            params = {};\n\t        }\n\t        var messageDetails = [];\n\t        Object.keys(params).forEach(function (key) {\n\t            var value = params[key];\n\t            try {\n\t                if (value instanceof Uint8Array) {\n\t                    var hex = \"\";\n\t                    for (var i = 0; i < value.length; i++) {\n\t                        hex += HEX[value[i] >> 4];\n\t                        hex += HEX[value[i] & 0x0f];\n\t                    }\n\t                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n\t                }\n\t                else {\n\t                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n\t                }\n\t            }\n\t            catch (error) {\n\t                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n\t            }\n\t        });\n\t        messageDetails.push(\"code=\" + code);\n\t        messageDetails.push(\"version=\" + this.version);\n\t        var reason = message;\n\t        if (messageDetails.length) {\n\t            message += \" (\" + messageDetails.join(\", \") + \")\";\n\t        }\n\t        // @TODO: Any??\n\t        var error = new Error(message);\n\t        error.reason = reason;\n\t        error.code = code;\n\t        Object.keys(params).forEach(function (key) {\n\t            error[key] = params[key];\n\t        });\n\t        return error;\n\t    };\n\t    Logger.prototype.throwError = function (message, code, params) {\n\t        throw this.makeError(message, code, params);\n\t    };\n\t    Logger.prototype.throwArgumentError = function (message, name, value) {\n\t        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n\t            argument: name,\n\t            value: value\n\t        });\n\t    };\n\t    Logger.prototype.assert = function (condition, message, code, params) {\n\t        if (!!condition) {\n\t            return;\n\t        }\n\t        this.throwError(message, code, params);\n\t    };\n\t    Logger.prototype.assertArgument = function (condition, message, name, value) {\n\t        if (!!condition) {\n\t            return;\n\t        }\n\t        this.throwArgumentError(message, name, value);\n\t    };\n\t    Logger.prototype.checkNormalize = function (message) {\n\t        if (message == null) {\n\t            message = \"platform missing String.prototype.normalize\";\n\t        }\n\t        if (_normalizeError) {\n\t            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"String.prototype.normalize\", form: _normalizeError\n\t            });\n\t        }\n\t    };\n\t    Logger.prototype.checkSafeUint53 = function (value, message) {\n\t        if (typeof (value) !== \"number\") {\n\t            return;\n\t        }\n\t        if (message == null) {\n\t            message = \"value not safe\";\n\t        }\n\t        if (value < 0 || value >= 0x1fffffffffffff) {\n\t            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n\t                operation: \"checkSafeInteger\",\n\t                fault: \"out-of-safe-range\",\n\t                value: value\n\t            });\n\t        }\n\t        if (value % 1) {\n\t            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n\t                operation: \"checkSafeInteger\",\n\t                fault: \"non-integer\",\n\t                value: value\n\t            });\n\t        }\n\t    };\n\t    Logger.prototype.checkArgumentCount = function (count, expectedCount, message) {\n\t        if (message) {\n\t            message = \": \" + message;\n\t        }\n\t        else {\n\t            message = \"\";\n\t        }\n\t        if (count < expectedCount) {\n\t            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n\t                count: count,\n\t                expectedCount: expectedCount\n\t            });\n\t        }\n\t        if (count > expectedCount) {\n\t            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n\t                count: count,\n\t                expectedCount: expectedCount\n\t            });\n\t        }\n\t    };\n\t    Logger.prototype.checkNew = function (target, kind) {\n\t        if (target === Object || target == null) {\n\t            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n\t        }\n\t    };\n\t    Logger.prototype.checkAbstract = function (target, kind) {\n\t        if (target === kind) {\n\t            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n\t        }\n\t        else if (target === Object || target == null) {\n\t            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n\t        }\n\t    };\n\t    Logger.globalLogger = function () {\n\t        if (!_globalLogger) {\n\t            _globalLogger = new Logger(_version.version);\n\t        }\n\t        return _globalLogger;\n\t    };\n\t    Logger.setCensorship = function (censorship, permanent) {\n\t        if (!censorship && permanent) {\n\t            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"setCensorship\"\n\t            });\n\t        }\n\t        if (_permanentCensorErrors) {\n\t            if (!censorship) {\n\t                return;\n\t            }\n\t            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"setCensorship\"\n\t            });\n\t        }\n\t        _censorErrors = !!censorship;\n\t        _permanentCensorErrors = !!permanent;\n\t    };\n\t    Logger.setLogLevel = function (logLevel) {\n\t        var level = LogLevels[logLevel.toLowerCase()];\n\t        if (level == null) {\n\t            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n\t            return;\n\t        }\n\t        _logLevel = level;\n\t    };\n\t    Logger.from = function (version) {\n\t        return new Logger(version);\n\t    };\n\t    Logger.errors = ErrorCode;\n\t    Logger.levels = LogLevel;\n\t    return Logger;\n\t}());\n\texports.Logger = Logger;\n\n\t});\n\n\tvar index = /*@__PURE__*/getDefaultExportFromCjs(lib);\n\n\tvar _version$2 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"bytes/5.5.0\";\n\n\t});\n\n\tvar _version$3 = /*@__PURE__*/getDefaultExportFromCjs(_version$2);\n\n\tvar lib$1 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.joinSignature = exports.splitSignature = exports.hexZeroPad = exports.hexStripZeros = exports.hexValue = exports.hexConcat = exports.hexDataSlice = exports.hexDataLength = exports.hexlify = exports.isHexString = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.isBytes = exports.isBytesLike = void 0;\n\n\n\tvar logger = new lib.Logger(_version$2.version);\n\t///////////////////////////////\n\tfunction isHexable(value) {\n\t    return !!(value.toHexString);\n\t}\n\tfunction addSlice(array) {\n\t    if (array.slice) {\n\t        return array;\n\t    }\n\t    array.slice = function () {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n\t    };\n\t    return array;\n\t}\n\tfunction isBytesLike(value) {\n\t    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n\t}\n\texports.isBytesLike = isBytesLike;\n\tfunction isInteger(value) {\n\t    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n\t}\n\tfunction isBytes(value) {\n\t    if (value == null) {\n\t        return false;\n\t    }\n\t    if (value.constructor === Uint8Array) {\n\t        return true;\n\t    }\n\t    if (typeof (value) === \"string\") {\n\t        return false;\n\t    }\n\t    if (!isInteger(value.length) || value.length < 0) {\n\t        return false;\n\t    }\n\t    for (var i = 0; i < value.length; i++) {\n\t        var v = value[i];\n\t        if (!isInteger(v) || v < 0 || v >= 256) {\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\texports.isBytes = isBytes;\n\tfunction arrayify(value, options) {\n\t    if (!options) {\n\t        options = {};\n\t    }\n\t    if (typeof (value) === \"number\") {\n\t        logger.checkSafeUint53(value, \"invalid arrayify value\");\n\t        var result = [];\n\t        while (value) {\n\t            result.unshift(value & 0xff);\n\t            value = parseInt(String(value / 256));\n\t        }\n\t        if (result.length === 0) {\n\t            result.push(0);\n\t        }\n\t        return addSlice(new Uint8Array(result));\n\t    }\n\t    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n\t        value = \"0x\" + value;\n\t    }\n\t    if (isHexable(value)) {\n\t        value = value.toHexString();\n\t    }\n\t    if (isHexString(value)) {\n\t        var hex = value.substring(2);\n\t        if (hex.length % 2) {\n\t            if (options.hexPad === \"left\") {\n\t                hex = \"0x0\" + hex.substring(2);\n\t            }\n\t            else if (options.hexPad === \"right\") {\n\t                hex += \"0\";\n\t            }\n\t            else {\n\t                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n\t            }\n\t        }\n\t        var result = [];\n\t        for (var i = 0; i < hex.length; i += 2) {\n\t            result.push(parseInt(hex.substring(i, i + 2), 16));\n\t        }\n\t        return addSlice(new Uint8Array(result));\n\t    }\n\t    if (isBytes(value)) {\n\t        return addSlice(new Uint8Array(value));\n\t    }\n\t    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n\t}\n\texports.arrayify = arrayify;\n\tfunction concat(items) {\n\t    var objects = items.map(function (item) { return arrayify(item); });\n\t    var length = objects.reduce(function (accum, item) { return (accum + item.length); }, 0);\n\t    var result = new Uint8Array(length);\n\t    objects.reduce(function (offset, object) {\n\t        result.set(object, offset);\n\t        return offset + object.length;\n\t    }, 0);\n\t    return addSlice(result);\n\t}\n\texports.concat = concat;\n\tfunction stripZeros(value) {\n\t    var result = arrayify(value);\n\t    if (result.length === 0) {\n\t        return result;\n\t    }\n\t    // Find the first non-zero entry\n\t    var start = 0;\n\t    while (start < result.length && result[start] === 0) {\n\t        start++;\n\t    }\n\t    // If we started with zeros, strip them\n\t    if (start) {\n\t        result = result.slice(start);\n\t    }\n\t    return result;\n\t}\n\texports.stripZeros = stripZeros;\n\tfunction zeroPad(value, length) {\n\t    value = arrayify(value);\n\t    if (value.length > length) {\n\t        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n\t    }\n\t    var result = new Uint8Array(length);\n\t    result.set(value, length - value.length);\n\t    return addSlice(result);\n\t}\n\texports.zeroPad = zeroPad;\n\tfunction isHexString(value, length) {\n\t    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n\t        return false;\n\t    }\n\t    if (length && value.length !== 2 + 2 * length) {\n\t        return false;\n\t    }\n\t    return true;\n\t}\n\texports.isHexString = isHexString;\n\tvar HexCharacters = \"0123456789abcdef\";\n\tfunction hexlify(value, options) {\n\t    if (!options) {\n\t        options = {};\n\t    }\n\t    if (typeof (value) === \"number\") {\n\t        logger.checkSafeUint53(value, \"invalid hexlify value\");\n\t        var hex = \"\";\n\t        while (value) {\n\t            hex = HexCharacters[value & 0xf] + hex;\n\t            value = Math.floor(value / 16);\n\t        }\n\t        if (hex.length) {\n\t            if (hex.length % 2) {\n\t                hex = \"0\" + hex;\n\t            }\n\t            return \"0x\" + hex;\n\t        }\n\t        return \"0x00\";\n\t    }\n\t    if (typeof (value) === \"bigint\") {\n\t        value = value.toString(16);\n\t        if (value.length % 2) {\n\t            return (\"0x0\" + value);\n\t        }\n\t        return \"0x\" + value;\n\t    }\n\t    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n\t        value = \"0x\" + value;\n\t    }\n\t    if (isHexable(value)) {\n\t        return value.toHexString();\n\t    }\n\t    if (isHexString(value)) {\n\t        if (value.length % 2) {\n\t            if (options.hexPad === \"left\") {\n\t                value = \"0x0\" + value.substring(2);\n\t            }\n\t            else if (options.hexPad === \"right\") {\n\t                value += \"0\";\n\t            }\n\t            else {\n\t                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n\t            }\n\t        }\n\t        return value.toLowerCase();\n\t    }\n\t    if (isBytes(value)) {\n\t        var result = \"0x\";\n\t        for (var i = 0; i < value.length; i++) {\n\t            var v = value[i];\n\t            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n\t        }\n\t        return result;\n\t    }\n\t    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n\t}\n\texports.hexlify = hexlify;\n\t/*\n\tfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n\t    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n\t        return \"0x0\" + value.substring(2);\n\t    }\n\t    return value;\n\t}\n\t*/\n\tfunction hexDataLength(data) {\n\t    if (typeof (data) !== \"string\") {\n\t        data = hexlify(data);\n\t    }\n\t    else if (!isHexString(data) || (data.length % 2)) {\n\t        return null;\n\t    }\n\t    return (data.length - 2) / 2;\n\t}\n\texports.hexDataLength = hexDataLength;\n\tfunction hexDataSlice(data, offset, endOffset) {\n\t    if (typeof (data) !== \"string\") {\n\t        data = hexlify(data);\n\t    }\n\t    else if (!isHexString(data) || (data.length % 2)) {\n\t        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n\t    }\n\t    offset = 2 + 2 * offset;\n\t    if (endOffset != null) {\n\t        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n\t    }\n\t    return \"0x\" + data.substring(offset);\n\t}\n\texports.hexDataSlice = hexDataSlice;\n\tfunction hexConcat(items) {\n\t    var result = \"0x\";\n\t    items.forEach(function (item) {\n\t        result += hexlify(item).substring(2);\n\t    });\n\t    return result;\n\t}\n\texports.hexConcat = hexConcat;\n\tfunction hexValue(value) {\n\t    var trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n\t    if (trimmed === \"0x\") {\n\t        return \"0x0\";\n\t    }\n\t    return trimmed;\n\t}\n\texports.hexValue = hexValue;\n\tfunction hexStripZeros(value) {\n\t    if (typeof (value) !== \"string\") {\n\t        value = hexlify(value);\n\t    }\n\t    if (!isHexString(value)) {\n\t        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n\t    }\n\t    value = value.substring(2);\n\t    var offset = 0;\n\t    while (offset < value.length && value[offset] === \"0\") {\n\t        offset++;\n\t    }\n\t    return \"0x\" + value.substring(offset);\n\t}\n\texports.hexStripZeros = hexStripZeros;\n\tfunction hexZeroPad(value, length) {\n\t    if (typeof (value) !== \"string\") {\n\t        value = hexlify(value);\n\t    }\n\t    else if (!isHexString(value)) {\n\t        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n\t    }\n\t    if (value.length > 2 * length + 2) {\n\t        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n\t    }\n\t    while (value.length < 2 * length + 2) {\n\t        value = \"0x0\" + value.substring(2);\n\t    }\n\t    return value;\n\t}\n\texports.hexZeroPad = hexZeroPad;\n\tfunction splitSignature(signature) {\n\t    var result = {\n\t        r: \"0x\",\n\t        s: \"0x\",\n\t        _vs: \"0x\",\n\t        recoveryParam: 0,\n\t        v: 0\n\t    };\n\t    if (isBytesLike(signature)) {\n\t        var bytes = arrayify(signature);\n\t        if (bytes.length !== 65) {\n\t            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n\t        }\n\t        // Get the r, s and v\n\t        result.r = hexlify(bytes.slice(0, 32));\n\t        result.s = hexlify(bytes.slice(32, 64));\n\t        result.v = bytes[64];\n\t        // Allow a recid to be used as the v\n\t        if (result.v < 27) {\n\t            if (result.v === 0 || result.v === 1) {\n\t                result.v += 27;\n\t            }\n\t            else {\n\t                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n\t            }\n\t        }\n\t        // Compute recoveryParam from v\n\t        result.recoveryParam = 1 - (result.v % 2);\n\t        // Compute _vs from recoveryParam and s\n\t        if (result.recoveryParam) {\n\t            bytes[32] |= 0x80;\n\t        }\n\t        result._vs = hexlify(bytes.slice(32, 64));\n\t    }\n\t    else {\n\t        result.r = signature.r;\n\t        result.s = signature.s;\n\t        result.v = signature.v;\n\t        result.recoveryParam = signature.recoveryParam;\n\t        result._vs = signature._vs;\n\t        // If the _vs is available, use it to populate missing s, v and recoveryParam\n\t        // and verify non-missing s, v and recoveryParam\n\t        if (result._vs != null) {\n\t            var vs_1 = zeroPad(arrayify(result._vs), 32);\n\t            result._vs = hexlify(vs_1);\n\t            // Set or check the recid\n\t            var recoveryParam = ((vs_1[0] >= 128) ? 1 : 0);\n\t            if (result.recoveryParam == null) {\n\t                result.recoveryParam = recoveryParam;\n\t            }\n\t            else if (result.recoveryParam !== recoveryParam) {\n\t                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n\t            }\n\t            // Set or check the s\n\t            vs_1[0] &= 0x7f;\n\t            var s = hexlify(vs_1);\n\t            if (result.s == null) {\n\t                result.s = s;\n\t            }\n\t            else if (result.s !== s) {\n\t                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n\t            }\n\t        }\n\t        // Use recid and v to populate each other\n\t        if (result.recoveryParam == null) {\n\t            if (result.v == null) {\n\t                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n\t            }\n\t            else if (result.v === 0 || result.v === 1) {\n\t                result.recoveryParam = result.v;\n\t            }\n\t            else {\n\t                result.recoveryParam = 1 - (result.v % 2);\n\t            }\n\t        }\n\t        else {\n\t            if (result.v == null) {\n\t                result.v = 27 + result.recoveryParam;\n\t            }\n\t            else {\n\t                var recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n\t                if (result.recoveryParam !== recId) {\n\t                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n\t                }\n\t            }\n\t        }\n\t        if (result.r == null || !isHexString(result.r)) {\n\t            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n\t        }\n\t        else {\n\t            result.r = hexZeroPad(result.r, 32);\n\t        }\n\t        if (result.s == null || !isHexString(result.s)) {\n\t            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n\t        }\n\t        else {\n\t            result.s = hexZeroPad(result.s, 32);\n\t        }\n\t        var vs = arrayify(result.s);\n\t        if (vs[0] >= 128) {\n\t            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n\t        }\n\t        if (result.recoveryParam) {\n\t            vs[0] |= 0x80;\n\t        }\n\t        var _vs = hexlify(vs);\n\t        if (result._vs) {\n\t            if (!isHexString(result._vs)) {\n\t                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n\t            }\n\t            result._vs = hexZeroPad(result._vs, 32);\n\t        }\n\t        // Set or check the _vs\n\t        if (result._vs == null) {\n\t            result._vs = _vs;\n\t        }\n\t        else if (result._vs !== _vs) {\n\t            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n\t        }\n\t    }\n\t    return result;\n\t}\n\texports.splitSignature = splitSignature;\n\tfunction joinSignature(signature) {\n\t    signature = splitSignature(signature);\n\t    return hexlify(concat([\n\t        signature.r,\n\t        signature.s,\n\t        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n\t    ]));\n\t}\n\texports.joinSignature = joinSignature;\n\n\t});\n\n\tvar index$1 = /*@__PURE__*/getDefaultExportFromCjs(lib$1);\n\n\tvar _version$4 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"bignumber/5.5.0\";\n\n\t});\n\n\tvar _version$5 = /*@__PURE__*/getDefaultExportFromCjs(_version$4);\n\n\tvar bignumber = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {\n\t    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports._base16To36 = exports._base36To16 = exports.BigNumber = exports.isBigNumberish = void 0;\n\t/**\n\t *  BigNumber\n\t *\n\t *  A wrapper around the BN.js object. We use the BN.js library\n\t *  because it is used by elliptic, so it is required regardless.\n\t *\n\t */\n\tvar bn_js_1 = __importDefault(bn);\n\tvar BN = bn_js_1.default.BN;\n\n\n\n\tvar logger = new lib.Logger(_version$4.version);\n\tvar _constructorGuard = {};\n\tvar MAX_SAFE = 0x1fffffffffffff;\n\tfunction isBigNumberish(value) {\n\t    return (value != null) && (BigNumber.isBigNumber(value) ||\n\t        (typeof (value) === \"number\" && (value % 1) === 0) ||\n\t        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n\t        (0, lib$1.isHexString)(value) ||\n\t        (typeof (value) === \"bigint\") ||\n\t        (0, lib$1.isBytes)(value));\n\t}\n\texports.isBigNumberish = isBigNumberish;\n\t// Only warn about passing 10 into radix once\n\tvar _warnedToStringRadix = false;\n\tvar BigNumber = /** @class */ (function () {\n\t    function BigNumber(constructorGuard, hex) {\n\t        var _newTarget = this.constructor;\n\t        logger.checkNew(_newTarget, BigNumber);\n\t        if (constructorGuard !== _constructorGuard) {\n\t            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"new (BigNumber)\"\n\t            });\n\t        }\n\t        this._hex = hex;\n\t        this._isBigNumber = true;\n\t        Object.freeze(this);\n\t    }\n\t    BigNumber.prototype.fromTwos = function (value) {\n\t        return toBigNumber(toBN(this).fromTwos(value));\n\t    };\n\t    BigNumber.prototype.toTwos = function (value) {\n\t        return toBigNumber(toBN(this).toTwos(value));\n\t    };\n\t    BigNumber.prototype.abs = function () {\n\t        if (this._hex[0] === \"-\") {\n\t            return BigNumber.from(this._hex.substring(1));\n\t        }\n\t        return this;\n\t    };\n\t    BigNumber.prototype.add = function (other) {\n\t        return toBigNumber(toBN(this).add(toBN(other)));\n\t    };\n\t    BigNumber.prototype.sub = function (other) {\n\t        return toBigNumber(toBN(this).sub(toBN(other)));\n\t    };\n\t    BigNumber.prototype.div = function (other) {\n\t        var o = BigNumber.from(other);\n\t        if (o.isZero()) {\n\t            throwFault(\"division by zero\", \"div\");\n\t        }\n\t        return toBigNumber(toBN(this).div(toBN(other)));\n\t    };\n\t    BigNumber.prototype.mul = function (other) {\n\t        return toBigNumber(toBN(this).mul(toBN(other)));\n\t    };\n\t    BigNumber.prototype.mod = function (other) {\n\t        var value = toBN(other);\n\t        if (value.isNeg()) {\n\t            throwFault(\"cannot modulo negative values\", \"mod\");\n\t        }\n\t        return toBigNumber(toBN(this).umod(value));\n\t    };\n\t    BigNumber.prototype.pow = function (other) {\n\t        var value = toBN(other);\n\t        if (value.isNeg()) {\n\t            throwFault(\"cannot raise to negative values\", \"pow\");\n\t        }\n\t        return toBigNumber(toBN(this).pow(value));\n\t    };\n\t    BigNumber.prototype.and = function (other) {\n\t        var value = toBN(other);\n\t        if (this.isNegative() || value.isNeg()) {\n\t            throwFault(\"cannot 'and' negative values\", \"and\");\n\t        }\n\t        return toBigNumber(toBN(this).and(value));\n\t    };\n\t    BigNumber.prototype.or = function (other) {\n\t        var value = toBN(other);\n\t        if (this.isNegative() || value.isNeg()) {\n\t            throwFault(\"cannot 'or' negative values\", \"or\");\n\t        }\n\t        return toBigNumber(toBN(this).or(value));\n\t    };\n\t    BigNumber.prototype.xor = function (other) {\n\t        var value = toBN(other);\n\t        if (this.isNegative() || value.isNeg()) {\n\t            throwFault(\"cannot 'xor' negative values\", \"xor\");\n\t        }\n\t        return toBigNumber(toBN(this).xor(value));\n\t    };\n\t    BigNumber.prototype.mask = function (value) {\n\t        if (this.isNegative() || value < 0) {\n\t            throwFault(\"cannot mask negative values\", \"mask\");\n\t        }\n\t        return toBigNumber(toBN(this).maskn(value));\n\t    };\n\t    BigNumber.prototype.shl = function (value) {\n\t        if (this.isNegative() || value < 0) {\n\t            throwFault(\"cannot shift negative values\", \"shl\");\n\t        }\n\t        return toBigNumber(toBN(this).shln(value));\n\t    };\n\t    BigNumber.prototype.shr = function (value) {\n\t        if (this.isNegative() || value < 0) {\n\t            throwFault(\"cannot shift negative values\", \"shr\");\n\t        }\n\t        return toBigNumber(toBN(this).shrn(value));\n\t    };\n\t    BigNumber.prototype.eq = function (other) {\n\t        return toBN(this).eq(toBN(other));\n\t    };\n\t    BigNumber.prototype.lt = function (other) {\n\t        return toBN(this).lt(toBN(other));\n\t    };\n\t    BigNumber.prototype.lte = function (other) {\n\t        return toBN(this).lte(toBN(other));\n\t    };\n\t    BigNumber.prototype.gt = function (other) {\n\t        return toBN(this).gt(toBN(other));\n\t    };\n\t    BigNumber.prototype.gte = function (other) {\n\t        return toBN(this).gte(toBN(other));\n\t    };\n\t    BigNumber.prototype.isNegative = function () {\n\t        return (this._hex[0] === \"-\");\n\t    };\n\t    BigNumber.prototype.isZero = function () {\n\t        return toBN(this).isZero();\n\t    };\n\t    BigNumber.prototype.toNumber = function () {\n\t        try {\n\t            return toBN(this).toNumber();\n\t        }\n\t        catch (error) {\n\t            throwFault(\"overflow\", \"toNumber\", this.toString());\n\t        }\n\t        return null;\n\t    };\n\t    BigNumber.prototype.toBigInt = function () {\n\t        try {\n\t            return BigInt(this.toString());\n\t        }\n\t        catch (e) { }\n\t        return logger.throwError(\"this platform does not support BigInt\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t            value: this.toString()\n\t        });\n\t    };\n\t    BigNumber.prototype.toString = function () {\n\t        // Lots of people expect this, which we do not support, so check (See: #889)\n\t        if (arguments.length > 0) {\n\t            if (arguments[0] === 10) {\n\t                if (!_warnedToStringRadix) {\n\t                    _warnedToStringRadix = true;\n\t                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n\t                }\n\t            }\n\t            else if (arguments[0] === 16) {\n\t                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", lib.Logger.errors.UNEXPECTED_ARGUMENT, {});\n\t            }\n\t            else {\n\t                logger.throwError(\"BigNumber.toString does not accept parameters\", lib.Logger.errors.UNEXPECTED_ARGUMENT, {});\n\t            }\n\t        }\n\t        return toBN(this).toString(10);\n\t    };\n\t    BigNumber.prototype.toHexString = function () {\n\t        return this._hex;\n\t    };\n\t    BigNumber.prototype.toJSON = function (key) {\n\t        return { type: \"BigNumber\", hex: this.toHexString() };\n\t    };\n\t    BigNumber.from = function (value) {\n\t        if (value instanceof BigNumber) {\n\t            return value;\n\t        }\n\t        if (typeof (value) === \"string\") {\n\t            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n\t                return new BigNumber(_constructorGuard, toHex(value));\n\t            }\n\t            if (value.match(/^-?[0-9]+$/)) {\n\t                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n\t            }\n\t            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n\t        }\n\t        if (typeof (value) === \"number\") {\n\t            if (value % 1) {\n\t                throwFault(\"underflow\", \"BigNumber.from\", value);\n\t            }\n\t            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n\t                throwFault(\"overflow\", \"BigNumber.from\", value);\n\t            }\n\t            return BigNumber.from(String(value));\n\t        }\n\t        var anyValue = value;\n\t        if (typeof (anyValue) === \"bigint\") {\n\t            return BigNumber.from(anyValue.toString());\n\t        }\n\t        if ((0, lib$1.isBytes)(anyValue)) {\n\t            return BigNumber.from((0, lib$1.hexlify)(anyValue));\n\t        }\n\t        if (anyValue) {\n\t            // Hexable interface (takes priority)\n\t            if (anyValue.toHexString) {\n\t                var hex = anyValue.toHexString();\n\t                if (typeof (hex) === \"string\") {\n\t                    return BigNumber.from(hex);\n\t                }\n\t            }\n\t            else {\n\t                // For now, handle legacy JSON-ified values (goes away in v6)\n\t                var hex = anyValue._hex;\n\t                // New-form JSON\n\t                if (hex == null && anyValue.type === \"BigNumber\") {\n\t                    hex = anyValue.hex;\n\t                }\n\t                if (typeof (hex) === \"string\") {\n\t                    if ((0, lib$1.isHexString)(hex) || (hex[0] === \"-\" && (0, lib$1.isHexString)(hex.substring(1)))) {\n\t                        return BigNumber.from(hex);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n\t    };\n\t    BigNumber.isBigNumber = function (value) {\n\t        return !!(value && value._isBigNumber);\n\t    };\n\t    return BigNumber;\n\t}());\n\texports.BigNumber = BigNumber;\n\t// Normalize the hex string\n\tfunction toHex(value) {\n\t    // For BN, call on the hex string\n\t    if (typeof (value) !== \"string\") {\n\t        return toHex(value.toString(16));\n\t    }\n\t    // If negative, prepend the negative sign to the normalized positive value\n\t    if (value[0] === \"-\") {\n\t        // Strip off the negative sign\n\t        value = value.substring(1);\n\t        // Cannot have multiple negative signs (e.g. \"--0x04\")\n\t        if (value[0] === \"-\") {\n\t            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n\t        }\n\t        // Call toHex on the positive component\n\t        value = toHex(value);\n\t        // Do not allow \"-0x00\"\n\t        if (value === \"0x00\") {\n\t            return value;\n\t        }\n\t        // Negate the value\n\t        return \"-\" + value;\n\t    }\n\t    // Add a \"0x\" prefix if missing\n\t    if (value.substring(0, 2) !== \"0x\") {\n\t        value = \"0x\" + value;\n\t    }\n\t    // Normalize zero\n\t    if (value === \"0x\") {\n\t        return \"0x00\";\n\t    }\n\t    // Make the string even length\n\t    if (value.length % 2) {\n\t        value = \"0x0\" + value.substring(2);\n\t    }\n\t    // Trim to smallest even-length string\n\t    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n\t        value = \"0x\" + value.substring(4);\n\t    }\n\t    return value;\n\t}\n\tfunction toBigNumber(value) {\n\t    return BigNumber.from(toHex(value));\n\t}\n\tfunction toBN(value) {\n\t    var hex = BigNumber.from(value).toHexString();\n\t    if (hex[0] === \"-\") {\n\t        return (new BN(\"-\" + hex.substring(3), 16));\n\t    }\n\t    return new BN(hex.substring(2), 16);\n\t}\n\tfunction throwFault(fault, operation, value) {\n\t    var params = { fault: fault, operation: operation };\n\t    if (value != null) {\n\t        params.value = value;\n\t    }\n\t    return logger.throwError(fault, lib.Logger.errors.NUMERIC_FAULT, params);\n\t}\n\t// value should have no prefix\n\tfunction _base36To16(value) {\n\t    return (new BN(value, 36)).toString(16);\n\t}\n\texports._base36To16 = _base36To16;\n\t// value should have no prefix\n\tfunction _base16To36(value) {\n\t    return (new BN(value, 16)).toString(36);\n\t}\n\texports._base16To36 = _base16To36;\n\n\t});\n\n\tvar bignumber$1 = /*@__PURE__*/getDefaultExportFromCjs(bignumber);\n\n\tvar fixednumber = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.FixedNumber = exports.FixedFormat = exports.parseFixed = exports.formatFixed = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$4.version);\n\n\tvar _constructorGuard = {};\n\tvar Zero = bignumber.BigNumber.from(0);\n\tvar NegativeOne = bignumber.BigNumber.from(-1);\n\tfunction throwFault(message, fault, operation, value) {\n\t    var params = { fault: fault, operation: operation };\n\t    if (value !== undefined) {\n\t        params.value = value;\n\t    }\n\t    return logger.throwError(message, lib.Logger.errors.NUMERIC_FAULT, params);\n\t}\n\t// Constant to pull zeros from for multipliers\n\tvar zeros = \"0\";\n\twhile (zeros.length < 256) {\n\t    zeros += zeros;\n\t}\n\t// Returns a string \"1\" followed by decimal \"0\"s\n\tfunction getMultiplier(decimals) {\n\t    if (typeof (decimals) !== \"number\") {\n\t        try {\n\t            decimals = bignumber.BigNumber.from(decimals).toNumber();\n\t        }\n\t        catch (e) { }\n\t    }\n\t    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n\t        return (\"1\" + zeros.substring(0, decimals));\n\t    }\n\t    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n\t}\n\tfunction formatFixed(value, decimals) {\n\t    if (decimals == null) {\n\t        decimals = 0;\n\t    }\n\t    var multiplier = getMultiplier(decimals);\n\t    // Make sure wei is a big number (convert as necessary)\n\t    value = bignumber.BigNumber.from(value);\n\t    var negative = value.lt(Zero);\n\t    if (negative) {\n\t        value = value.mul(NegativeOne);\n\t    }\n\t    var fraction = value.mod(multiplier).toString();\n\t    while (fraction.length < multiplier.length - 1) {\n\t        fraction = \"0\" + fraction;\n\t    }\n\t    // Strip training 0\n\t    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n\t    var whole = value.div(multiplier).toString();\n\t    if (multiplier.length === 1) {\n\t        value = whole;\n\t    }\n\t    else {\n\t        value = whole + \".\" + fraction;\n\t    }\n\t    if (negative) {\n\t        value = \"-\" + value;\n\t    }\n\t    return value;\n\t}\n\texports.formatFixed = formatFixed;\n\tfunction parseFixed(value, decimals) {\n\t    if (decimals == null) {\n\t        decimals = 0;\n\t    }\n\t    var multiplier = getMultiplier(decimals);\n\t    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n\t        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n\t    }\n\t    // Is it negative?\n\t    var negative = (value.substring(0, 1) === \"-\");\n\t    if (negative) {\n\t        value = value.substring(1);\n\t    }\n\t    if (value === \".\") {\n\t        logger.throwArgumentError(\"missing value\", \"value\", value);\n\t    }\n\t    // Split it into a whole and fractional part\n\t    var comps = value.split(\".\");\n\t    if (comps.length > 2) {\n\t        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n\t    }\n\t    var whole = comps[0], fraction = comps[1];\n\t    if (!whole) {\n\t        whole = \"0\";\n\t    }\n\t    if (!fraction) {\n\t        fraction = \"0\";\n\t    }\n\t    // Trim trailing zeros\n\t    while (fraction[fraction.length - 1] === \"0\") {\n\t        fraction = fraction.substring(0, fraction.length - 1);\n\t    }\n\t    // Check the fraction doesn't exceed our decimals size\n\t    if (fraction.length > multiplier.length - 1) {\n\t        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n\t    }\n\t    // If decimals is 0, we have an empty string for fraction\n\t    if (fraction === \"\") {\n\t        fraction = \"0\";\n\t    }\n\t    // Fully pad the string with zeros to get to wei\n\t    while (fraction.length < multiplier.length - 1) {\n\t        fraction += \"0\";\n\t    }\n\t    var wholeValue = bignumber.BigNumber.from(whole);\n\t    var fractionValue = bignumber.BigNumber.from(fraction);\n\t    var wei = (wholeValue.mul(multiplier)).add(fractionValue);\n\t    if (negative) {\n\t        wei = wei.mul(NegativeOne);\n\t    }\n\t    return wei;\n\t}\n\texports.parseFixed = parseFixed;\n\tvar FixedFormat = /** @class */ (function () {\n\t    function FixedFormat(constructorGuard, signed, width, decimals) {\n\t        if (constructorGuard !== _constructorGuard) {\n\t            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"new FixedFormat\"\n\t            });\n\t        }\n\t        this.signed = signed;\n\t        this.width = width;\n\t        this.decimals = decimals;\n\t        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n\t        this._multiplier = getMultiplier(decimals);\n\t        Object.freeze(this);\n\t    }\n\t    FixedFormat.from = function (value) {\n\t        if (value instanceof FixedFormat) {\n\t            return value;\n\t        }\n\t        if (typeof (value) === \"number\") {\n\t            value = \"fixed128x\" + value;\n\t        }\n\t        var signed = true;\n\t        var width = 128;\n\t        var decimals = 18;\n\t        if (typeof (value) === \"string\") {\n\t            if (value === \"fixed\") {\n\t                // defaults...\n\t            }\n\t            else if (value === \"ufixed\") {\n\t                signed = false;\n\t            }\n\t            else {\n\t                var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n\t                if (!match) {\n\t                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n\t                }\n\t                signed = (match[1] !== \"u\");\n\t                width = parseInt(match[2]);\n\t                decimals = parseInt(match[3]);\n\t            }\n\t        }\n\t        else if (value) {\n\t            var check = function (key, type, defaultValue) {\n\t                if (value[key] == null) {\n\t                    return defaultValue;\n\t                }\n\t                if (typeof (value[key]) !== type) {\n\t                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n\t                }\n\t                return value[key];\n\t            };\n\t            signed = check(\"signed\", \"boolean\", signed);\n\t            width = check(\"width\", \"number\", width);\n\t            decimals = check(\"decimals\", \"number\", decimals);\n\t        }\n\t        if (width % 8) {\n\t            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n\t        }\n\t        if (decimals > 80) {\n\t            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n\t        }\n\t        return new FixedFormat(_constructorGuard, signed, width, decimals);\n\t    };\n\t    return FixedFormat;\n\t}());\n\texports.FixedFormat = FixedFormat;\n\tvar FixedNumber = /** @class */ (function () {\n\t    function FixedNumber(constructorGuard, hex, value, format) {\n\t        var _newTarget = this.constructor;\n\t        logger.checkNew(_newTarget, FixedNumber);\n\t        if (constructorGuard !== _constructorGuard) {\n\t            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"new FixedFormat\"\n\t            });\n\t        }\n\t        this.format = format;\n\t        this._hex = hex;\n\t        this._value = value;\n\t        this._isFixedNumber = true;\n\t        Object.freeze(this);\n\t    }\n\t    FixedNumber.prototype._checkFormat = function (other) {\n\t        if (this.format.name !== other.format.name) {\n\t            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n\t        }\n\t    };\n\t    FixedNumber.prototype.addUnsafe = function (other) {\n\t        this._checkFormat(other);\n\t        var a = parseFixed(this._value, this.format.decimals);\n\t        var b = parseFixed(other._value, other.format.decimals);\n\t        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n\t    };\n\t    FixedNumber.prototype.subUnsafe = function (other) {\n\t        this._checkFormat(other);\n\t        var a = parseFixed(this._value, this.format.decimals);\n\t        var b = parseFixed(other._value, other.format.decimals);\n\t        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n\t    };\n\t    FixedNumber.prototype.mulUnsafe = function (other) {\n\t        this._checkFormat(other);\n\t        var a = parseFixed(this._value, this.format.decimals);\n\t        var b = parseFixed(other._value, other.format.decimals);\n\t        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n\t    };\n\t    FixedNumber.prototype.divUnsafe = function (other) {\n\t        this._checkFormat(other);\n\t        var a = parseFixed(this._value, this.format.decimals);\n\t        var b = parseFixed(other._value, other.format.decimals);\n\t        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n\t    };\n\t    FixedNumber.prototype.floor = function () {\n\t        var comps = this.toString().split(\".\");\n\t        if (comps.length === 1) {\n\t            comps.push(\"0\");\n\t        }\n\t        var result = FixedNumber.from(comps[0], this.format);\n\t        var hasFraction = !comps[1].match(/^(0*)$/);\n\t        if (this.isNegative() && hasFraction) {\n\t            result = result.subUnsafe(ONE.toFormat(result.format));\n\t        }\n\t        return result;\n\t    };\n\t    FixedNumber.prototype.ceiling = function () {\n\t        var comps = this.toString().split(\".\");\n\t        if (comps.length === 1) {\n\t            comps.push(\"0\");\n\t        }\n\t        var result = FixedNumber.from(comps[0], this.format);\n\t        var hasFraction = !comps[1].match(/^(0*)$/);\n\t        if (!this.isNegative() && hasFraction) {\n\t            result = result.addUnsafe(ONE.toFormat(result.format));\n\t        }\n\t        return result;\n\t    };\n\t    // @TODO: Support other rounding algorithms\n\t    FixedNumber.prototype.round = function (decimals) {\n\t        if (decimals == null) {\n\t            decimals = 0;\n\t        }\n\t        // If we are already in range, we're done\n\t        var comps = this.toString().split(\".\");\n\t        if (comps.length === 1) {\n\t            comps.push(\"0\");\n\t        }\n\t        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n\t            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n\t        }\n\t        if (comps[1].length <= decimals) {\n\t            return this;\n\t        }\n\t        var factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n\t        var bump = BUMP.toFormat(this.format);\n\t        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n\t    };\n\t    FixedNumber.prototype.isZero = function () {\n\t        return (this._value === \"0.0\" || this._value === \"0\");\n\t    };\n\t    FixedNumber.prototype.isNegative = function () {\n\t        return (this._value[0] === \"-\");\n\t    };\n\t    FixedNumber.prototype.toString = function () { return this._value; };\n\t    FixedNumber.prototype.toHexString = function (width) {\n\t        if (width == null) {\n\t            return this._hex;\n\t        }\n\t        if (width % 8) {\n\t            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n\t        }\n\t        var hex = bignumber.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n\t        return (0, lib$1.hexZeroPad)(hex, width / 8);\n\t    };\n\t    FixedNumber.prototype.toUnsafeFloat = function () { return parseFloat(this.toString()); };\n\t    FixedNumber.prototype.toFormat = function (format) {\n\t        return FixedNumber.fromString(this._value, format);\n\t    };\n\t    FixedNumber.fromValue = function (value, decimals, format) {\n\t        // If decimals looks more like a format, and there is no format, shift the parameters\n\t        if (format == null && decimals != null && !(0, bignumber.isBigNumberish)(decimals)) {\n\t            format = decimals;\n\t            decimals = null;\n\t        }\n\t        if (decimals == null) {\n\t            decimals = 0;\n\t        }\n\t        if (format == null) {\n\t            format = \"fixed\";\n\t        }\n\t        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n\t    };\n\t    FixedNumber.fromString = function (value, format) {\n\t        if (format == null) {\n\t            format = \"fixed\";\n\t        }\n\t        var fixedFormat = FixedFormat.from(format);\n\t        var numeric = parseFixed(value, fixedFormat.decimals);\n\t        if (!fixedFormat.signed && numeric.lt(Zero)) {\n\t            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n\t        }\n\t        var hex = null;\n\t        if (fixedFormat.signed) {\n\t            hex = numeric.toTwos(fixedFormat.width).toHexString();\n\t        }\n\t        else {\n\t            hex = numeric.toHexString();\n\t            hex = (0, lib$1.hexZeroPad)(hex, fixedFormat.width / 8);\n\t        }\n\t        var decimal = formatFixed(numeric, fixedFormat.decimals);\n\t        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n\t    };\n\t    FixedNumber.fromBytes = function (value, format) {\n\t        if (format == null) {\n\t            format = \"fixed\";\n\t        }\n\t        var fixedFormat = FixedFormat.from(format);\n\t        if ((0, lib$1.arrayify)(value).length > fixedFormat.width / 8) {\n\t            throw new Error(\"overflow\");\n\t        }\n\t        var numeric = bignumber.BigNumber.from(value);\n\t        if (fixedFormat.signed) {\n\t            numeric = numeric.fromTwos(fixedFormat.width);\n\t        }\n\t        var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n\t        var decimal = formatFixed(numeric, fixedFormat.decimals);\n\t        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n\t    };\n\t    FixedNumber.from = function (value, format) {\n\t        if (typeof (value) === \"string\") {\n\t            return FixedNumber.fromString(value, format);\n\t        }\n\t        if ((0, lib$1.isBytes)(value)) {\n\t            return FixedNumber.fromBytes(value, format);\n\t        }\n\t        try {\n\t            return FixedNumber.fromValue(value, 0, format);\n\t        }\n\t        catch (error) {\n\t            // Allow NUMERIC_FAULT to bubble up\n\t            if (error.code !== lib.Logger.errors.INVALID_ARGUMENT) {\n\t                throw error;\n\t            }\n\t        }\n\t        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n\t    };\n\t    FixedNumber.isFixedNumber = function (value) {\n\t        return !!(value && value._isFixedNumber);\n\t    };\n\t    return FixedNumber;\n\t}());\n\texports.FixedNumber = FixedNumber;\n\tvar ONE = FixedNumber.from(1);\n\tvar BUMP = FixedNumber.from(\"0.5\");\n\n\t});\n\n\tvar fixednumber$1 = /*@__PURE__*/getDefaultExportFromCjs(fixednumber);\n\n\tvar lib$2 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports._base36To16 = exports._base16To36 = exports.parseFixed = exports.FixedNumber = exports.FixedFormat = exports.formatFixed = exports.BigNumber = void 0;\n\n\tObject.defineProperty(exports, \"BigNumber\", { enumerable: true, get: function () { return bignumber.BigNumber; } });\n\n\tObject.defineProperty(exports, \"formatFixed\", { enumerable: true, get: function () { return fixednumber.formatFixed; } });\n\tObject.defineProperty(exports, \"FixedFormat\", { enumerable: true, get: function () { return fixednumber.FixedFormat; } });\n\tObject.defineProperty(exports, \"FixedNumber\", { enumerable: true, get: function () { return fixednumber.FixedNumber; } });\n\tObject.defineProperty(exports, \"parseFixed\", { enumerable: true, get: function () { return fixednumber.parseFixed; } });\n\t// Internal methods used by address\n\tvar bignumber_2 = bignumber;\n\tObject.defineProperty(exports, \"_base16To36\", { enumerable: true, get: function () { return bignumber_2._base16To36; } });\n\tObject.defineProperty(exports, \"_base36To16\", { enumerable: true, get: function () { return bignumber_2._base36To16; } });\n\n\t});\n\n\tvar index$2 = /*@__PURE__*/getDefaultExportFromCjs(lib$2);\n\n\tvar _version$6 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"properties/5.5.0\";\n\n\t});\n\n\tvar _version$7 = /*@__PURE__*/getDefaultExportFromCjs(_version$6);\n\n\tvar lib$3 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Description = exports.deepCopy = exports.shallowCopy = exports.checkProperties = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = void 0;\n\n\n\tvar logger = new lib.Logger(_version$6.version);\n\tfunction defineReadOnly(object, name, value) {\n\t    Object.defineProperty(object, name, {\n\t        enumerable: true,\n\t        value: value,\n\t        writable: false,\n\t    });\n\t}\n\texports.defineReadOnly = defineReadOnly;\n\t// Crawl up the constructor chain to find a static method\n\tfunction getStatic(ctor, key) {\n\t    for (var i = 0; i < 32; i++) {\n\t        if (ctor[key]) {\n\t            return ctor[key];\n\t        }\n\t        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n\t            break;\n\t        }\n\t        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n\t    }\n\t    return null;\n\t}\n\texports.getStatic = getStatic;\n\tfunction resolveProperties(object) {\n\t    return __awaiter(this, void 0, void 0, function () {\n\t        var promises, results;\n\t        return __generator(this, function (_a) {\n\t            switch (_a.label) {\n\t                case 0:\n\t                    promises = Object.keys(object).map(function (key) {\n\t                        var value = object[key];\n\t                        return Promise.resolve(value).then(function (v) { return ({ key: key, value: v }); });\n\t                    });\n\t                    return [4 /*yield*/, Promise.all(promises)];\n\t                case 1:\n\t                    results = _a.sent();\n\t                    return [2 /*return*/, results.reduce(function (accum, result) {\n\t                            accum[(result.key)] = result.value;\n\t                            return accum;\n\t                        }, {})];\n\t            }\n\t        });\n\t    });\n\t}\n\texports.resolveProperties = resolveProperties;\n\tfunction checkProperties(object, properties) {\n\t    if (!object || typeof (object) !== \"object\") {\n\t        logger.throwArgumentError(\"invalid object\", \"object\", object);\n\t    }\n\t    Object.keys(object).forEach(function (key) {\n\t        if (!properties[key]) {\n\t            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n\t        }\n\t    });\n\t}\n\texports.checkProperties = checkProperties;\n\tfunction shallowCopy(object) {\n\t    var result = {};\n\t    for (var key in object) {\n\t        result[key] = object[key];\n\t    }\n\t    return result;\n\t}\n\texports.shallowCopy = shallowCopy;\n\tvar opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\n\tfunction _isFrozen(object) {\n\t    // Opaque objects are not mutable, so safe to copy by assignment\n\t    if (object === undefined || object === null || opaque[typeof (object)]) {\n\t        return true;\n\t    }\n\t    if (Array.isArray(object) || typeof (object) === \"object\") {\n\t        if (!Object.isFrozen(object)) {\n\t            return false;\n\t        }\n\t        var keys = Object.keys(object);\n\t        for (var i = 0; i < keys.length; i++) {\n\t            var value = null;\n\t            try {\n\t                value = object[keys[i]];\n\t            }\n\t            catch (error) {\n\t                // If accessing a value triggers an error, it is a getter\n\t                // designed to do so (e.g. Result) and is therefore \"frozen\"\n\t                continue;\n\t            }\n\t            if (!_isFrozen(value)) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return logger.throwArgumentError(\"Cannot deepCopy \" + typeof (object), \"object\", object);\n\t}\n\t// Returns a new copy of object, such that no properties may be replaced.\n\t// New properties may be added only to objects.\n\tfunction _deepCopy(object) {\n\t    if (_isFrozen(object)) {\n\t        return object;\n\t    }\n\t    // Arrays are mutable, so we need to create a copy\n\t    if (Array.isArray(object)) {\n\t        return Object.freeze(object.map(function (item) { return deepCopy(item); }));\n\t    }\n\t    if (typeof (object) === \"object\") {\n\t        var result = {};\n\t        for (var key in object) {\n\t            var value = object[key];\n\t            if (value === undefined) {\n\t                continue;\n\t            }\n\t            defineReadOnly(result, key, deepCopy(value));\n\t        }\n\t        return result;\n\t    }\n\t    return logger.throwArgumentError(\"Cannot deepCopy \" + typeof (object), \"object\", object);\n\t}\n\tfunction deepCopy(object) {\n\t    return _deepCopy(object);\n\t}\n\texports.deepCopy = deepCopy;\n\tvar Description = /** @class */ (function () {\n\t    function Description(info) {\n\t        for (var key in info) {\n\t            this[key] = deepCopy(info[key]);\n\t        }\n\t    }\n\t    return Description;\n\t}());\n\texports.Description = Description;\n\n\t});\n\n\tvar index$3 = /*@__PURE__*/getDefaultExportFromCjs(lib$3);\n\n\tvar _version$8 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"abi/5.5.0\";\n\n\t});\n\n\tvar _version$9 = /*@__PURE__*/getDefaultExportFromCjs(_version$8);\n\n\tvar fragments = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.ErrorFragment = exports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;\n\n\n\n\n\tvar logger = new lib.Logger(_version$8.version);\n\t;\n\tvar _constructorGuard = {};\n\tvar ModifiersBytes = { calldata: true, memory: true, storage: true };\n\tvar ModifiersNest = { calldata: true, memory: true };\n\tfunction checkModifier(type, name) {\n\t    if (type === \"bytes\" || type === \"string\") {\n\t        if (ModifiersBytes[name]) {\n\t            return true;\n\t        }\n\t    }\n\t    else if (type === \"address\") {\n\t        if (name === \"payable\") {\n\t            return true;\n\t        }\n\t    }\n\t    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n\t        if (ModifiersNest[name]) {\n\t            return true;\n\t        }\n\t    }\n\t    if (ModifiersBytes[name] || name === \"payable\") {\n\t        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n\t    }\n\t    return false;\n\t}\n\t// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\n\tfunction parseParamType(param, allowIndexed) {\n\t    var originalParam = param;\n\t    function throwError(i) {\n\t        logger.throwArgumentError(\"unexpected character at position \" + i, \"param\", param);\n\t    }\n\t    param = param.replace(/\\s/g, \" \");\n\t    function newNode(parent) {\n\t        var node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n\t        if (allowIndexed) {\n\t            node.indexed = false;\n\t        }\n\t        return node;\n\t    }\n\t    var parent = { type: \"\", name: \"\", state: { allowType: true } };\n\t    var node = parent;\n\t    for (var i = 0; i < param.length; i++) {\n\t        var c = param[i];\n\t        switch (c) {\n\t            case \"(\":\n\t                if (node.state.allowType && node.type === \"\") {\n\t                    node.type = \"tuple\";\n\t                }\n\t                else if (!node.state.allowParams) {\n\t                    throwError(i);\n\t                }\n\t                node.state.allowType = false;\n\t                node.type = verifyType(node.type);\n\t                node.components = [newNode(node)];\n\t                node = node.components[0];\n\t                break;\n\t            case \")\":\n\t                delete node.state;\n\t                if (node.name === \"indexed\") {\n\t                    if (!allowIndexed) {\n\t                        throwError(i);\n\t                    }\n\t                    node.indexed = true;\n\t                    node.name = \"\";\n\t                }\n\t                if (checkModifier(node.type, node.name)) {\n\t                    node.name = \"\";\n\t                }\n\t                node.type = verifyType(node.type);\n\t                var child = node;\n\t                node = node.parent;\n\t                if (!node) {\n\t                    throwError(i);\n\t                }\n\t                delete child.parent;\n\t                node.state.allowParams = false;\n\t                node.state.allowName = true;\n\t                node.state.allowArray = true;\n\t                break;\n\t            case \",\":\n\t                delete node.state;\n\t                if (node.name === \"indexed\") {\n\t                    if (!allowIndexed) {\n\t                        throwError(i);\n\t                    }\n\t                    node.indexed = true;\n\t                    node.name = \"\";\n\t                }\n\t                if (checkModifier(node.type, node.name)) {\n\t                    node.name = \"\";\n\t                }\n\t                node.type = verifyType(node.type);\n\t                var sibling = newNode(node.parent);\n\t                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n\t                node.parent.components.push(sibling);\n\t                delete node.parent;\n\t                node = sibling;\n\t                break;\n\t            // Hit a space...\n\t            case \" \":\n\t                // If reading type, the type is done and may read a param or name\n\t                if (node.state.allowType) {\n\t                    if (node.type !== \"\") {\n\t                        node.type = verifyType(node.type);\n\t                        delete node.state.allowType;\n\t                        node.state.allowName = true;\n\t                        node.state.allowParams = true;\n\t                    }\n\t                }\n\t                // If reading name, the name is done\n\t                if (node.state.allowName) {\n\t                    if (node.name !== \"\") {\n\t                        if (node.name === \"indexed\") {\n\t                            if (!allowIndexed) {\n\t                                throwError(i);\n\t                            }\n\t                            if (node.indexed) {\n\t                                throwError(i);\n\t                            }\n\t                            node.indexed = true;\n\t                            node.name = \"\";\n\t                        }\n\t                        else if (checkModifier(node.type, node.name)) {\n\t                            node.name = \"\";\n\t                        }\n\t                        else {\n\t                            node.state.allowName = false;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            case \"[\":\n\t                if (!node.state.allowArray) {\n\t                    throwError(i);\n\t                }\n\t                node.type += c;\n\t                node.state.allowArray = false;\n\t                node.state.allowName = false;\n\t                node.state.readArray = true;\n\t                break;\n\t            case \"]\":\n\t                if (!node.state.readArray) {\n\t                    throwError(i);\n\t                }\n\t                node.type += c;\n\t                node.state.readArray = false;\n\t                node.state.allowArray = true;\n\t                node.state.allowName = true;\n\t                break;\n\t            default:\n\t                if (node.state.allowType) {\n\t                    node.type += c;\n\t                    node.state.allowParams = true;\n\t                    node.state.allowArray = true;\n\t                }\n\t                else if (node.state.allowName) {\n\t                    node.name += c;\n\t                    delete node.state.allowArray;\n\t                }\n\t                else if (node.state.readArray) {\n\t                    node.type += c;\n\t                }\n\t                else {\n\t                    throwError(i);\n\t                }\n\t        }\n\t    }\n\t    if (node.parent) {\n\t        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n\t    }\n\t    delete parent.state;\n\t    if (node.name === \"indexed\") {\n\t        if (!allowIndexed) {\n\t            throwError(originalParam.length - 7);\n\t        }\n\t        if (node.indexed) {\n\t            throwError(originalParam.length - 7);\n\t        }\n\t        node.indexed = true;\n\t        node.name = \"\";\n\t    }\n\t    else if (checkModifier(node.type, node.name)) {\n\t        node.name = \"\";\n\t    }\n\t    parent.type = verifyType(parent.type);\n\t    return parent;\n\t}\n\tfunction populate(object, params) {\n\t    for (var key in params) {\n\t        (0, lib$3.defineReadOnly)(object, key, params[key]);\n\t    }\n\t}\n\texports.FormatTypes = Object.freeze({\n\t    // Bare formatting, as is needed for computing a sighash of an event or function\n\t    sighash: \"sighash\",\n\t    // Human-Readable with Minimal spacing and without names (compact human-readable)\n\t    minimal: \"minimal\",\n\t    // Human-Readable with nice spacing, including all names\n\t    full: \"full\",\n\t    // JSON-format a la Solidity\n\t    json: \"json\"\n\t});\n\tvar paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\tvar ParamType = /** @class */ (function () {\n\t    function ParamType(constructorGuard, params) {\n\t        if (constructorGuard !== _constructorGuard) {\n\t            logger.throwError(\"use fromString\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"new ParamType()\"\n\t            });\n\t        }\n\t        populate(this, params);\n\t        var match = this.type.match(paramTypeArray);\n\t        if (match) {\n\t            populate(this, {\n\t                arrayLength: parseInt(match[2] || \"-1\"),\n\t                arrayChildren: ParamType.fromObject({\n\t                    type: match[1],\n\t                    components: this.components\n\t                }),\n\t                baseType: \"array\"\n\t            });\n\t        }\n\t        else {\n\t            populate(this, {\n\t                arrayLength: null,\n\t                arrayChildren: null,\n\t                baseType: ((this.components != null) ? \"tuple\" : this.type)\n\t            });\n\t        }\n\t        this._isParamType = true;\n\t        Object.freeze(this);\n\t    }\n\t    // Format the parameter fragment\n\t    //   - sighash: \"(uint256,address)\"\n\t    //   - minimal: \"tuple(uint256,address) indexed\"\n\t    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n\t    ParamType.prototype.format = function (format) {\n\t        if (!format) {\n\t            format = exports.FormatTypes.sighash;\n\t        }\n\t        if (!exports.FormatTypes[format]) {\n\t            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n\t        }\n\t        if (format === exports.FormatTypes.json) {\n\t            var result_1 = {\n\t                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n\t                name: (this.name || undefined)\n\t            };\n\t            if (typeof (this.indexed) === \"boolean\") {\n\t                result_1.indexed = this.indexed;\n\t            }\n\t            if (this.components) {\n\t                result_1.components = this.components.map(function (comp) { return JSON.parse(comp.format(format)); });\n\t            }\n\t            return JSON.stringify(result_1);\n\t        }\n\t        var result = \"\";\n\t        // Array\n\t        if (this.baseType === \"array\") {\n\t            result += this.arrayChildren.format(format);\n\t            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n\t        }\n\t        else {\n\t            if (this.baseType === \"tuple\") {\n\t                if (format !== exports.FormatTypes.sighash) {\n\t                    result += this.type;\n\t                }\n\t                result += \"(\" + this.components.map(function (comp) { return comp.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \")\";\n\t            }\n\t            else {\n\t                result += this.type;\n\t            }\n\t        }\n\t        if (format !== exports.FormatTypes.sighash) {\n\t            if (this.indexed === true) {\n\t                result += \" indexed\";\n\t            }\n\t            if (format === exports.FormatTypes.full && this.name) {\n\t                result += \" \" + this.name;\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    ParamType.from = function (value, allowIndexed) {\n\t        if (typeof (value) === \"string\") {\n\t            return ParamType.fromString(value, allowIndexed);\n\t        }\n\t        return ParamType.fromObject(value);\n\t    };\n\t    ParamType.fromObject = function (value) {\n\t        if (ParamType.isParamType(value)) {\n\t            return value;\n\t        }\n\t        return new ParamType(_constructorGuard, {\n\t            name: (value.name || null),\n\t            type: verifyType(value.type),\n\t            indexed: ((value.indexed == null) ? null : !!value.indexed),\n\t            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n\t        });\n\t    };\n\t    ParamType.fromString = function (value, allowIndexed) {\n\t        function ParamTypify(node) {\n\t            return ParamType.fromObject({\n\t                name: node.name,\n\t                type: node.type,\n\t                indexed: node.indexed,\n\t                components: node.components\n\t            });\n\t        }\n\t        return ParamTypify(parseParamType(value, !!allowIndexed));\n\t    };\n\t    ParamType.isParamType = function (value) {\n\t        return !!(value != null && value._isParamType);\n\t    };\n\t    return ParamType;\n\t}());\n\texports.ParamType = ParamType;\n\t;\n\tfunction parseParams(value, allowIndex) {\n\t    return splitNesting(value).map(function (param) { return ParamType.fromString(param, allowIndex); });\n\t}\n\tvar Fragment = /** @class */ (function () {\n\t    function Fragment(constructorGuard, params) {\n\t        if (constructorGuard !== _constructorGuard) {\n\t            logger.throwError(\"use a static from method\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"new Fragment()\"\n\t            });\n\t        }\n\t        populate(this, params);\n\t        this._isFragment = true;\n\t        Object.freeze(this);\n\t    }\n\t    Fragment.from = function (value) {\n\t        if (Fragment.isFragment(value)) {\n\t            return value;\n\t        }\n\t        if (typeof (value) === \"string\") {\n\t            return Fragment.fromString(value);\n\t        }\n\t        return Fragment.fromObject(value);\n\t    };\n\t    Fragment.fromObject = function (value) {\n\t        if (Fragment.isFragment(value)) {\n\t            return value;\n\t        }\n\t        switch (value.type) {\n\t            case \"function\":\n\t                return FunctionFragment.fromObject(value);\n\t            case \"event\":\n\t                return EventFragment.fromObject(value);\n\t            case \"constructor\":\n\t                return ConstructorFragment.fromObject(value);\n\t            case \"error\":\n\t                return ErrorFragment.fromObject(value);\n\t            case \"fallback\":\n\t            case \"receive\":\n\t                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n\t                return null;\n\t        }\n\t        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n\t    };\n\t    Fragment.fromString = function (value) {\n\t        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n\t        value = value.replace(/\\s/g, \" \");\n\t        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n\t        value = value.trim();\n\t        if (value.split(\" \")[0] === \"event\") {\n\t            return EventFragment.fromString(value.substring(5).trim());\n\t        }\n\t        else if (value.split(\" \")[0] === \"function\") {\n\t            return FunctionFragment.fromString(value.substring(8).trim());\n\t        }\n\t        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n\t            return ConstructorFragment.fromString(value.trim());\n\t        }\n\t        else if (value.split(\" \")[0] === \"error\") {\n\t            return ErrorFragment.fromString(value.substring(5).trim());\n\t        }\n\t        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n\t    };\n\t    Fragment.isFragment = function (value) {\n\t        return !!(value && value._isFragment);\n\t    };\n\t    return Fragment;\n\t}());\n\texports.Fragment = Fragment;\n\tvar EventFragment = /** @class */ (function (_super) {\n\t    __extends(EventFragment, _super);\n\t    function EventFragment() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    EventFragment.prototype.format = function (format) {\n\t        if (!format) {\n\t            format = exports.FormatTypes.sighash;\n\t        }\n\t        if (!exports.FormatTypes[format]) {\n\t            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n\t        }\n\t        if (format === exports.FormatTypes.json) {\n\t            return JSON.stringify({\n\t                type: \"event\",\n\t                anonymous: this.anonymous,\n\t                name: this.name,\n\t                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })\n\t            });\n\t        }\n\t        var result = \"\";\n\t        if (format !== exports.FormatTypes.sighash) {\n\t            result += \"event \";\n\t        }\n\t        result += this.name + \"(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n\t        if (format !== exports.FormatTypes.sighash) {\n\t            if (this.anonymous) {\n\t                result += \"anonymous \";\n\t            }\n\t        }\n\t        return result.trim();\n\t    };\n\t    EventFragment.from = function (value) {\n\t        if (typeof (value) === \"string\") {\n\t            return EventFragment.fromString(value);\n\t        }\n\t        return EventFragment.fromObject(value);\n\t    };\n\t    EventFragment.fromObject = function (value) {\n\t        if (EventFragment.isEventFragment(value)) {\n\t            return value;\n\t        }\n\t        if (value.type !== \"event\") {\n\t            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n\t        }\n\t        var params = {\n\t            name: verifyIdentifier(value.name),\n\t            anonymous: value.anonymous,\n\t            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n\t            type: \"event\"\n\t        };\n\t        return new EventFragment(_constructorGuard, params);\n\t    };\n\t    EventFragment.fromString = function (value) {\n\t        var match = value.match(regexParen);\n\t        if (!match) {\n\t            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n\t        }\n\t        var anonymous = false;\n\t        match[3].split(\" \").forEach(function (modifier) {\n\t            switch (modifier.trim()) {\n\t                case \"anonymous\":\n\t                    anonymous = true;\n\t                    break;\n\t                case \"\":\n\t                    break;\n\t                default:\n\t                    logger.warn(\"unknown modifier: \" + modifier);\n\t            }\n\t        });\n\t        return EventFragment.fromObject({\n\t            name: match[1].trim(),\n\t            anonymous: anonymous,\n\t            inputs: parseParams(match[2], true),\n\t            type: \"event\"\n\t        });\n\t    };\n\t    EventFragment.isEventFragment = function (value) {\n\t        return (value && value._isFragment && value.type === \"event\");\n\t    };\n\t    return EventFragment;\n\t}(Fragment));\n\texports.EventFragment = EventFragment;\n\tfunction parseGas(value, params) {\n\t    params.gas = null;\n\t    var comps = value.split(\"@\");\n\t    if (comps.length !== 1) {\n\t        if (comps.length > 2) {\n\t            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n\t        }\n\t        if (!comps[1].match(/^[0-9]+$/)) {\n\t            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n\t        }\n\t        params.gas = lib$2.BigNumber.from(comps[1]);\n\t        return comps[0];\n\t    }\n\t    return value;\n\t}\n\tfunction parseModifiers(value, params) {\n\t    params.constant = false;\n\t    params.payable = false;\n\t    params.stateMutability = \"nonpayable\";\n\t    value.split(\" \").forEach(function (modifier) {\n\t        switch (modifier.trim()) {\n\t            case \"constant\":\n\t                params.constant = true;\n\t                break;\n\t            case \"payable\":\n\t                params.payable = true;\n\t                params.stateMutability = \"payable\";\n\t                break;\n\t            case \"nonpayable\":\n\t                params.payable = false;\n\t                params.stateMutability = \"nonpayable\";\n\t                break;\n\t            case \"pure\":\n\t                params.constant = true;\n\t                params.stateMutability = \"pure\";\n\t                break;\n\t            case \"view\":\n\t                params.constant = true;\n\t                params.stateMutability = \"view\";\n\t                break;\n\t            case \"external\":\n\t            case \"public\":\n\t            case \"\":\n\t                break;\n\t            default:\n\t                console.log(\"unknown modifier: \" + modifier);\n\t        }\n\t    });\n\t}\n\tfunction verifyState(value) {\n\t    var result = {\n\t        constant: false,\n\t        payable: true,\n\t        stateMutability: \"payable\"\n\t    };\n\t    if (value.stateMutability != null) {\n\t        result.stateMutability = value.stateMutability;\n\t        // Set (and check things are consistent) the constant property\n\t        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n\t        if (value.constant != null) {\n\t            if ((!!value.constant) !== result.constant) {\n\t                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n\t            }\n\t        }\n\t        // Set (and check things are consistent) the payable property\n\t        result.payable = (result.stateMutability === \"payable\");\n\t        if (value.payable != null) {\n\t            if ((!!value.payable) !== result.payable) {\n\t                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n\t            }\n\t        }\n\t    }\n\t    else if (value.payable != null) {\n\t        result.payable = !!value.payable;\n\t        // If payable we can assume non-constant; otherwise we can't assume\n\t        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n\t            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n\t        }\n\t        result.constant = !!value.constant;\n\t        if (result.constant) {\n\t            result.stateMutability = \"view\";\n\t        }\n\t        else {\n\t            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n\t        }\n\t        if (result.payable && result.constant) {\n\t            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n\t        }\n\t    }\n\t    else if (value.constant != null) {\n\t        result.constant = !!value.constant;\n\t        result.payable = !result.constant;\n\t        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n\t    }\n\t    else if (value.type !== \"constructor\") {\n\t        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n\t    }\n\t    return result;\n\t}\n\tvar ConstructorFragment = /** @class */ (function (_super) {\n\t    __extends(ConstructorFragment, _super);\n\t    function ConstructorFragment() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    ConstructorFragment.prototype.format = function (format) {\n\t        if (!format) {\n\t            format = exports.FormatTypes.sighash;\n\t        }\n\t        if (!exports.FormatTypes[format]) {\n\t            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n\t        }\n\t        if (format === exports.FormatTypes.json) {\n\t            return JSON.stringify({\n\t                type: \"constructor\",\n\t                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n\t                payable: this.payable,\n\t                gas: (this.gas ? this.gas.toNumber() : undefined),\n\t                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })\n\t            });\n\t        }\n\t        if (format === exports.FormatTypes.sighash) {\n\t            logger.throwError(\"cannot format a constructor for sighash\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"format(sighash)\"\n\t            });\n\t        }\n\t        var result = \"constructor(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n\t        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n\t            result += this.stateMutability + \" \";\n\t        }\n\t        return result.trim();\n\t    };\n\t    ConstructorFragment.from = function (value) {\n\t        if (typeof (value) === \"string\") {\n\t            return ConstructorFragment.fromString(value);\n\t        }\n\t        return ConstructorFragment.fromObject(value);\n\t    };\n\t    ConstructorFragment.fromObject = function (value) {\n\t        if (ConstructorFragment.isConstructorFragment(value)) {\n\t            return value;\n\t        }\n\t        if (value.type !== \"constructor\") {\n\t            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n\t        }\n\t        var state = verifyState(value);\n\t        if (state.constant) {\n\t            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n\t        }\n\t        var params = {\n\t            name: null,\n\t            type: value.type,\n\t            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n\t            payable: state.payable,\n\t            stateMutability: state.stateMutability,\n\t            gas: (value.gas ? lib$2.BigNumber.from(value.gas) : null)\n\t        };\n\t        return new ConstructorFragment(_constructorGuard, params);\n\t    };\n\t    ConstructorFragment.fromString = function (value) {\n\t        var params = { type: \"constructor\" };\n\t        value = parseGas(value, params);\n\t        var parens = value.match(regexParen);\n\t        if (!parens || parens[1].trim() !== \"constructor\") {\n\t            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n\t        }\n\t        params.inputs = parseParams(parens[2].trim(), false);\n\t        parseModifiers(parens[3].trim(), params);\n\t        return ConstructorFragment.fromObject(params);\n\t    };\n\t    ConstructorFragment.isConstructorFragment = function (value) {\n\t        return (value && value._isFragment && value.type === \"constructor\");\n\t    };\n\t    return ConstructorFragment;\n\t}(Fragment));\n\texports.ConstructorFragment = ConstructorFragment;\n\tvar FunctionFragment = /** @class */ (function (_super) {\n\t    __extends(FunctionFragment, _super);\n\t    function FunctionFragment() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    FunctionFragment.prototype.format = function (format) {\n\t        if (!format) {\n\t            format = exports.FormatTypes.sighash;\n\t        }\n\t        if (!exports.FormatTypes[format]) {\n\t            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n\t        }\n\t        if (format === exports.FormatTypes.json) {\n\t            return JSON.stringify({\n\t                type: \"function\",\n\t                name: this.name,\n\t                constant: this.constant,\n\t                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n\t                payable: this.payable,\n\t                gas: (this.gas ? this.gas.toNumber() : undefined),\n\t                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),\n\t                outputs: this.outputs.map(function (output) { return JSON.parse(output.format(format)); }),\n\t            });\n\t        }\n\t        var result = \"\";\n\t        if (format !== exports.FormatTypes.sighash) {\n\t            result += \"function \";\n\t        }\n\t        result += this.name + \"(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n\t        if (format !== exports.FormatTypes.sighash) {\n\t            if (this.stateMutability) {\n\t                if (this.stateMutability !== \"nonpayable\") {\n\t                    result += (this.stateMutability + \" \");\n\t                }\n\t            }\n\t            else if (this.constant) {\n\t                result += \"view \";\n\t            }\n\t            if (this.outputs && this.outputs.length) {\n\t                result += \"returns (\" + this.outputs.map(function (output) { return output.format(format); }).join(\", \") + \") \";\n\t            }\n\t            if (this.gas != null) {\n\t                result += \"@\" + this.gas.toString() + \" \";\n\t            }\n\t        }\n\t        return result.trim();\n\t    };\n\t    FunctionFragment.from = function (value) {\n\t        if (typeof (value) === \"string\") {\n\t            return FunctionFragment.fromString(value);\n\t        }\n\t        return FunctionFragment.fromObject(value);\n\t    };\n\t    FunctionFragment.fromObject = function (value) {\n\t        if (FunctionFragment.isFunctionFragment(value)) {\n\t            return value;\n\t        }\n\t        if (value.type !== \"function\") {\n\t            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n\t        }\n\t        var state = verifyState(value);\n\t        var params = {\n\t            type: value.type,\n\t            name: verifyIdentifier(value.name),\n\t            constant: state.constant,\n\t            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n\t            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n\t            payable: state.payable,\n\t            stateMutability: state.stateMutability,\n\t            gas: (value.gas ? lib$2.BigNumber.from(value.gas) : null)\n\t        };\n\t        return new FunctionFragment(_constructorGuard, params);\n\t    };\n\t    FunctionFragment.fromString = function (value) {\n\t        var params = { type: \"function\" };\n\t        value = parseGas(value, params);\n\t        var comps = value.split(\" returns \");\n\t        if (comps.length > 2) {\n\t            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n\t        }\n\t        var parens = comps[0].match(regexParen);\n\t        if (!parens) {\n\t            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n\t        }\n\t        params.name = parens[1].trim();\n\t        if (params.name) {\n\t            verifyIdentifier(params.name);\n\t        }\n\t        params.inputs = parseParams(parens[2], false);\n\t        parseModifiers(parens[3].trim(), params);\n\t        // We have outputs\n\t        if (comps.length > 1) {\n\t            var returns = comps[1].match(regexParen);\n\t            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n\t                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n\t            }\n\t            params.outputs = parseParams(returns[2], false);\n\t        }\n\t        else {\n\t            params.outputs = [];\n\t        }\n\t        return FunctionFragment.fromObject(params);\n\t    };\n\t    FunctionFragment.isFunctionFragment = function (value) {\n\t        return (value && value._isFragment && value.type === \"function\");\n\t    };\n\t    return FunctionFragment;\n\t}(ConstructorFragment));\n\texports.FunctionFragment = FunctionFragment;\n\t//export class StructFragment extends Fragment {\n\t//}\n\tfunction checkForbidden(fragment) {\n\t    var sig = fragment.format();\n\t    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n\t        logger.throwArgumentError(\"cannot specify user defined \" + sig + \" error\", \"fragment\", fragment);\n\t    }\n\t    return fragment;\n\t}\n\tvar ErrorFragment = /** @class */ (function (_super) {\n\t    __extends(ErrorFragment, _super);\n\t    function ErrorFragment() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    ErrorFragment.prototype.format = function (format) {\n\t        if (!format) {\n\t            format = exports.FormatTypes.sighash;\n\t        }\n\t        if (!exports.FormatTypes[format]) {\n\t            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n\t        }\n\t        if (format === exports.FormatTypes.json) {\n\t            return JSON.stringify({\n\t                type: \"error\",\n\t                name: this.name,\n\t                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),\n\t            });\n\t        }\n\t        var result = \"\";\n\t        if (format !== exports.FormatTypes.sighash) {\n\t            result += \"error \";\n\t        }\n\t        result += this.name + \"(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n\t        return result.trim();\n\t    };\n\t    ErrorFragment.from = function (value) {\n\t        if (typeof (value) === \"string\") {\n\t            return ErrorFragment.fromString(value);\n\t        }\n\t        return ErrorFragment.fromObject(value);\n\t    };\n\t    ErrorFragment.fromObject = function (value) {\n\t        if (ErrorFragment.isErrorFragment(value)) {\n\t            return value;\n\t        }\n\t        if (value.type !== \"error\") {\n\t            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n\t        }\n\t        var params = {\n\t            type: value.type,\n\t            name: verifyIdentifier(value.name),\n\t            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n\t        };\n\t        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n\t    };\n\t    ErrorFragment.fromString = function (value) {\n\t        var params = { type: \"error\" };\n\t        var parens = value.match(regexParen);\n\t        if (!parens) {\n\t            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n\t        }\n\t        params.name = parens[1].trim();\n\t        if (params.name) {\n\t            verifyIdentifier(params.name);\n\t        }\n\t        params.inputs = parseParams(parens[2], false);\n\t        return checkForbidden(ErrorFragment.fromObject(params));\n\t    };\n\t    ErrorFragment.isErrorFragment = function (value) {\n\t        return (value && value._isFragment && value.type === \"error\");\n\t    };\n\t    return ErrorFragment;\n\t}(Fragment));\n\texports.ErrorFragment = ErrorFragment;\n\tfunction verifyType(type) {\n\t    // These need to be transformed to their full description\n\t    if (type.match(/^uint($|[^1-9])/)) {\n\t        type = \"uint256\" + type.substring(4);\n\t    }\n\t    else if (type.match(/^int($|[^1-9])/)) {\n\t        type = \"int256\" + type.substring(3);\n\t    }\n\t    // @TODO: more verification\n\t    return type;\n\t}\n\t// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\n\tvar regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\n\tfunction verifyIdentifier(value) {\n\t    if (!value || !value.match(regexIdentifier)) {\n\t        logger.throwArgumentError(\"invalid identifier \\\"\" + value + \"\\\"\", \"value\", value);\n\t    }\n\t    return value;\n\t}\n\tvar regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\tfunction splitNesting(value) {\n\t    value = value.trim();\n\t    var result = [];\n\t    var accum = \"\";\n\t    var depth = 0;\n\t    for (var offset = 0; offset < value.length; offset++) {\n\t        var c = value[offset];\n\t        if (c === \",\" && depth === 0) {\n\t            result.push(accum);\n\t            accum = \"\";\n\t        }\n\t        else {\n\t            accum += c;\n\t            if (c === \"(\") {\n\t                depth++;\n\t            }\n\t            else if (c === \")\") {\n\t                depth--;\n\t                if (depth === -1) {\n\t                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    if (accum) {\n\t        result.push(accum);\n\t    }\n\t    return result;\n\t}\n\n\t});\n\n\tvar fragments$1 = /*@__PURE__*/getDefaultExportFromCjs(fragments);\n\n\tvar abstractCoder = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = void 0;\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$8.version);\n\tfunction checkResultErrors(result) {\n\t    // Find the first error (if any)\n\t    var errors = [];\n\t    var checkErrors = function (path, object) {\n\t        if (!Array.isArray(object)) {\n\t            return;\n\t        }\n\t        for (var key in object) {\n\t            var childPath = path.slice();\n\t            childPath.push(key);\n\t            try {\n\t                checkErrors(childPath, object[key]);\n\t            }\n\t            catch (error) {\n\t                errors.push({ path: childPath, error: error });\n\t            }\n\t        }\n\t    };\n\t    checkErrors([], result);\n\t    return errors;\n\t}\n\texports.checkResultErrors = checkResultErrors;\n\tvar Coder = /** @class */ (function () {\n\t    function Coder(name, type, localName, dynamic) {\n\t        // @TODO: defineReadOnly these\n\t        this.name = name;\n\t        this.type = type;\n\t        this.localName = localName;\n\t        this.dynamic = dynamic;\n\t    }\n\t    Coder.prototype._throwError = function (message, value) {\n\t        logger.throwArgumentError(message, this.localName, value);\n\t    };\n\t    return Coder;\n\t}());\n\texports.Coder = Coder;\n\tvar Writer = /** @class */ (function () {\n\t    function Writer(wordSize) {\n\t        (0, lib$3.defineReadOnly)(this, \"wordSize\", wordSize || 32);\n\t        this._data = [];\n\t        this._dataLength = 0;\n\t        this._padding = new Uint8Array(wordSize);\n\t    }\n\t    Object.defineProperty(Writer.prototype, \"data\", {\n\t        get: function () {\n\t            return (0, lib$1.hexConcat)(this._data);\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Writer.prototype, \"length\", {\n\t        get: function () { return this._dataLength; },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Writer.prototype._writeData = function (data) {\n\t        this._data.push(data);\n\t        this._dataLength += data.length;\n\t        return data.length;\n\t    };\n\t    Writer.prototype.appendWriter = function (writer) {\n\t        return this._writeData((0, lib$1.concat)(writer._data));\n\t    };\n\t    // Arrayish items; padded on the right to wordSize\n\t    Writer.prototype.writeBytes = function (value) {\n\t        var bytes = (0, lib$1.arrayify)(value);\n\t        var paddingOffset = bytes.length % this.wordSize;\n\t        if (paddingOffset) {\n\t            bytes = (0, lib$1.concat)([bytes, this._padding.slice(paddingOffset)]);\n\t        }\n\t        return this._writeData(bytes);\n\t    };\n\t    Writer.prototype._getValue = function (value) {\n\t        var bytes = (0, lib$1.arrayify)(lib$2.BigNumber.from(value));\n\t        if (bytes.length > this.wordSize) {\n\t            logger.throwError(\"value out-of-bounds\", lib.Logger.errors.BUFFER_OVERRUN, {\n\t                length: this.wordSize,\n\t                offset: bytes.length\n\t            });\n\t        }\n\t        if (bytes.length % this.wordSize) {\n\t            bytes = (0, lib$1.concat)([this._padding.slice(bytes.length % this.wordSize), bytes]);\n\t        }\n\t        return bytes;\n\t    };\n\t    // BigNumberish items; padded on the left to wordSize\n\t    Writer.prototype.writeValue = function (value) {\n\t        return this._writeData(this._getValue(value));\n\t    };\n\t    Writer.prototype.writeUpdatableValue = function () {\n\t        var _this = this;\n\t        var offset = this._data.length;\n\t        this._data.push(this._padding);\n\t        this._dataLength += this.wordSize;\n\t        return function (value) {\n\t            _this._data[offset] = _this._getValue(value);\n\t        };\n\t    };\n\t    return Writer;\n\t}());\n\texports.Writer = Writer;\n\tvar Reader = /** @class */ (function () {\n\t    function Reader(data, wordSize, coerceFunc, allowLoose) {\n\t        (0, lib$3.defineReadOnly)(this, \"_data\", (0, lib$1.arrayify)(data));\n\t        (0, lib$3.defineReadOnly)(this, \"wordSize\", wordSize || 32);\n\t        (0, lib$3.defineReadOnly)(this, \"_coerceFunc\", coerceFunc);\n\t        (0, lib$3.defineReadOnly)(this, \"allowLoose\", allowLoose);\n\t        this._offset = 0;\n\t    }\n\t    Object.defineProperty(Reader.prototype, \"data\", {\n\t        get: function () { return (0, lib$1.hexlify)(this._data); },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Reader.prototype, \"consumed\", {\n\t        get: function () { return this._offset; },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    // The default Coerce function\n\t    Reader.coerce = function (name, value) {\n\t        var match = name.match(\"^u?int([0-9]+)$\");\n\t        if (match && parseInt(match[1]) <= 48) {\n\t            value = value.toNumber();\n\t        }\n\t        return value;\n\t    };\n\t    Reader.prototype.coerce = function (name, value) {\n\t        if (this._coerceFunc) {\n\t            return this._coerceFunc(name, value);\n\t        }\n\t        return Reader.coerce(name, value);\n\t    };\n\t    Reader.prototype._peekBytes = function (offset, length, loose) {\n\t        var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n\t        if (this._offset + alignedLength > this._data.length) {\n\t            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n\t                alignedLength = length;\n\t            }\n\t            else {\n\t                logger.throwError(\"data out-of-bounds\", lib.Logger.errors.BUFFER_OVERRUN, {\n\t                    length: this._data.length,\n\t                    offset: this._offset + alignedLength\n\t                });\n\t            }\n\t        }\n\t        return this._data.slice(this._offset, this._offset + alignedLength);\n\t    };\n\t    Reader.prototype.subReader = function (offset) {\n\t        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n\t    };\n\t    Reader.prototype.readBytes = function (length, loose) {\n\t        var bytes = this._peekBytes(0, length, !!loose);\n\t        this._offset += bytes.length;\n\t        // @TODO: Make sure the length..end bytes are all 0?\n\t        return bytes.slice(0, length);\n\t    };\n\t    Reader.prototype.readValue = function () {\n\t        return lib$2.BigNumber.from(this.readBytes(this.wordSize));\n\t    };\n\t    return Reader;\n\t}());\n\texports.Reader = Reader;\n\n\t});\n\n\tvar abstractCoder$1 = /*@__PURE__*/getDefaultExportFromCjs(abstractCoder);\n\n\tvar sha3 = createCommonjsModule(function (module) {\n\t/**\n\t * [js-sha3]{@link https://github.com/emn178/js-sha3}\n\t *\n\t * @version 0.8.0\n\t * @author Chen, Yi-Cyuan [emn178@gmail.com]\n\t * @copyright Chen, Yi-Cyuan 2015-2018\n\t * @license MIT\n\t */\n\t/*jslint bitwise: true */\n\t(function () {\n\t  'use strict';\n\n\t  var INPUT_ERROR = 'input is invalid type';\n\t  var FINALIZE_ERROR = 'finalize already called';\n\t  var WINDOW = typeof window === 'object';\n\t  var root = WINDOW ? window : {};\n\t  if (root.JS_SHA3_NO_WINDOW) {\n\t    WINDOW = false;\n\t  }\n\t  var WEB_WORKER = !WINDOW && typeof self === 'object';\n\t  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\t  if (NODE_JS) {\n\t    root = commonjsGlobal;\n\t  } else if (WEB_WORKER) {\n\t    root = self;\n\t  }\n\t  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;\n\t  var AMD =  false && 0;\n\t  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n\t  var HEX_CHARS = '0123456789abcdef'.split('');\n\t  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n\t  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n\t  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n\t  var PADDING = [6, 1536, 393216, 100663296];\n\t  var SHIFT = [0, 8, 16, 24];\n\t  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n\t    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n\t    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n\t    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n\t    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n\t  var BITS = [224, 256, 384, 512];\n\t  var SHAKE_BITS = [128, 256];\n\t  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n\t  var CSHAKE_BYTEPAD = {\n\t    '128': 168,\n\t    '256': 136\n\t  };\n\n\t  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n\t    Array.isArray = function (obj) {\n\t      return Object.prototype.toString.call(obj) === '[object Array]';\n\t    };\n\t  }\n\n\t  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n\t    ArrayBuffer.isView = function (obj) {\n\t      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n\t    };\n\t  }\n\n\t  var createOutputMethod = function (bits, padding, outputType) {\n\t    return function (message) {\n\t      return new Keccak(bits, padding, bits).update(message)[outputType]();\n\t    };\n\t  };\n\n\t  var createShakeOutputMethod = function (bits, padding, outputType) {\n\t    return function (message, outputBits) {\n\t      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n\t    };\n\t  };\n\n\t  var createCshakeOutputMethod = function (bits, padding, outputType) {\n\t    return function (message, outputBits, n, s) {\n\t      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n\t    };\n\t  };\n\n\t  var createKmacOutputMethod = function (bits, padding, outputType) {\n\t    return function (key, message, outputBits, s) {\n\t      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n\t    };\n\t  };\n\n\t  var createOutputMethods = function (method, createMethod, bits, padding) {\n\t    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n\t      var type = OUTPUT_TYPES[i];\n\t      method[type] = createMethod(bits, padding, type);\n\t    }\n\t    return method;\n\t  };\n\n\t  var createMethod = function (bits, padding) {\n\t    var method = createOutputMethod(bits, padding, 'hex');\n\t    method.create = function () {\n\t      return new Keccak(bits, padding, bits);\n\t    };\n\t    method.update = function (message) {\n\t      return method.create().update(message);\n\t    };\n\t    return createOutputMethods(method, createOutputMethod, bits, padding);\n\t  };\n\n\t  var createShakeMethod = function (bits, padding) {\n\t    var method = createShakeOutputMethod(bits, padding, 'hex');\n\t    method.create = function (outputBits) {\n\t      return new Keccak(bits, padding, outputBits);\n\t    };\n\t    method.update = function (message, outputBits) {\n\t      return method.create(outputBits).update(message);\n\t    };\n\t    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n\t  };\n\n\t  var createCshakeMethod = function (bits, padding) {\n\t    var w = CSHAKE_BYTEPAD[bits];\n\t    var method = createCshakeOutputMethod(bits, padding, 'hex');\n\t    method.create = function (outputBits, n, s) {\n\t      if (!n && !s) {\n\t        return methods['shake' + bits].create(outputBits);\n\t      } else {\n\t        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n\t      }\n\t    };\n\t    method.update = function (message, outputBits, n, s) {\n\t      return method.create(outputBits, n, s).update(message);\n\t    };\n\t    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n\t  };\n\n\t  var createKmacMethod = function (bits, padding) {\n\t    var w = CSHAKE_BYTEPAD[bits];\n\t    var method = createKmacOutputMethod(bits, padding, 'hex');\n\t    method.create = function (key, outputBits, s) {\n\t      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n\t    };\n\t    method.update = function (key, message, outputBits, s) {\n\t      return method.create(key, outputBits, s).update(message);\n\t    };\n\t    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n\t  };\n\n\t  var algorithms = [\n\t    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n\t    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n\t    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n\t    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n\t    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n\t  ];\n\n\t  var methods = {}, methodNames = [];\n\n\t  for (var i = 0; i < algorithms.length; ++i) {\n\t    var algorithm = algorithms[i];\n\t    var bits = algorithm.bits;\n\t    for (var j = 0; j < bits.length; ++j) {\n\t      var methodName = algorithm.name + '_' + bits[j];\n\t      methodNames.push(methodName);\n\t      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n\t      if (algorithm.name !== 'sha3') {\n\t        var newMethodName = algorithm.name + bits[j];\n\t        methodNames.push(newMethodName);\n\t        methods[newMethodName] = methods[methodName];\n\t      }\n\t    }\n\t  }\n\n\t  function Keccak(bits, padding, outputBits) {\n\t    this.blocks = [];\n\t    this.s = [];\n\t    this.padding = padding;\n\t    this.outputBits = outputBits;\n\t    this.reset = true;\n\t    this.finalized = false;\n\t    this.block = 0;\n\t    this.start = 0;\n\t    this.blockCount = (1600 - (bits << 1)) >> 5;\n\t    this.byteCount = this.blockCount << 2;\n\t    this.outputBlocks = outputBits >> 5;\n\t    this.extraBytes = (outputBits & 31) >> 3;\n\n\t    for (var i = 0; i < 50; ++i) {\n\t      this.s[i] = 0;\n\t    }\n\t  }\n\n\t  Keccak.prototype.update = function (message) {\n\t    if (this.finalized) {\n\t      throw new Error(FINALIZE_ERROR);\n\t    }\n\t    var notString, type = typeof message;\n\t    if (type !== 'string') {\n\t      if (type === 'object') {\n\t        if (message === null) {\n\t          throw new Error(INPUT_ERROR);\n\t        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n\t          message = new Uint8Array(message);\n\t        } else if (!Array.isArray(message)) {\n\t          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n\t            throw new Error(INPUT_ERROR);\n\t          }\n\t        }\n\t      } else {\n\t        throw new Error(INPUT_ERROR);\n\t      }\n\t      notString = true;\n\t    }\n\t    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n\t      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n\t    while (index < length) {\n\t      if (this.reset) {\n\t        this.reset = false;\n\t        blocks[0] = this.block;\n\t        for (i = 1; i < blockCount + 1; ++i) {\n\t          blocks[i] = 0;\n\t        }\n\t      }\n\t      if (notString) {\n\t        for (i = this.start; index < length && i < byteCount; ++index) {\n\t          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n\t        }\n\t      } else {\n\t        for (i = this.start; index < length && i < byteCount; ++index) {\n\t          code = message.charCodeAt(index);\n\t          if (code < 0x80) {\n\t            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n\t          } else if (code < 0x800) {\n\t            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n\t          } else if (code < 0xd800 || code >= 0xe000) {\n\t            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n\t          } else {\n\t            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n\t            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n\t            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n\t          }\n\t        }\n\t      }\n\t      this.lastByteIndex = i;\n\t      if (i >= byteCount) {\n\t        this.start = i - byteCount;\n\t        this.block = blocks[blockCount];\n\t        for (i = 0; i < blockCount; ++i) {\n\t          s[i] ^= blocks[i];\n\t        }\n\t        f(s);\n\t        this.reset = true;\n\t      } else {\n\t        this.start = i;\n\t      }\n\t    }\n\t    return this;\n\t  };\n\n\t  Keccak.prototype.encode = function (x, right) {\n\t    var o = x & 255, n = 1;\n\t    var bytes = [o];\n\t    x = x >> 8;\n\t    o = x & 255;\n\t    while (o > 0) {\n\t      bytes.unshift(o);\n\t      x = x >> 8;\n\t      o = x & 255;\n\t      ++n;\n\t    }\n\t    if (right) {\n\t      bytes.push(n);\n\t    } else {\n\t      bytes.unshift(n);\n\t    }\n\t    this.update(bytes);\n\t    return bytes.length;\n\t  };\n\n\t  Keccak.prototype.encodeString = function (str) {\n\t    var notString, type = typeof str;\n\t    if (type !== 'string') {\n\t      if (type === 'object') {\n\t        if (str === null) {\n\t          throw new Error(INPUT_ERROR);\n\t        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n\t          str = new Uint8Array(str);\n\t        } else if (!Array.isArray(str)) {\n\t          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n\t            throw new Error(INPUT_ERROR);\n\t          }\n\t        }\n\t      } else {\n\t        throw new Error(INPUT_ERROR);\n\t      }\n\t      notString = true;\n\t    }\n\t    var bytes = 0, length = str.length;\n\t    if (notString) {\n\t      bytes = length;\n\t    } else {\n\t      for (var i = 0; i < str.length; ++i) {\n\t        var code = str.charCodeAt(i);\n\t        if (code < 0x80) {\n\t          bytes += 1;\n\t        } else if (code < 0x800) {\n\t          bytes += 2;\n\t        } else if (code < 0xd800 || code >= 0xe000) {\n\t          bytes += 3;\n\t        } else {\n\t          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n\t          bytes += 4;\n\t        }\n\t      }\n\t    }\n\t    bytes += this.encode(bytes * 8);\n\t    this.update(str);\n\t    return bytes;\n\t  };\n\n\t  Keccak.prototype.bytepad = function (strs, w) {\n\t    var bytes = this.encode(w);\n\t    for (var i = 0; i < strs.length; ++i) {\n\t      bytes += this.encodeString(strs[i]);\n\t    }\n\t    var paddingBytes = w - bytes % w;\n\t    var zeros = [];\n\t    zeros.length = paddingBytes;\n\t    this.update(zeros);\n\t    return this;\n\t  };\n\n\t  Keccak.prototype.finalize = function () {\n\t    if (this.finalized) {\n\t      return;\n\t    }\n\t    this.finalized = true;\n\t    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n\t    blocks[i >> 2] |= this.padding[i & 3];\n\t    if (this.lastByteIndex === this.byteCount) {\n\t      blocks[0] = blocks[blockCount];\n\t      for (i = 1; i < blockCount + 1; ++i) {\n\t        blocks[i] = 0;\n\t      }\n\t    }\n\t    blocks[blockCount - 1] |= 0x80000000;\n\t    for (i = 0; i < blockCount; ++i) {\n\t      s[i] ^= blocks[i];\n\t    }\n\t    f(s);\n\t  };\n\n\t  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n\t    this.finalize();\n\n\t    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n\t      extraBytes = this.extraBytes, i = 0, j = 0;\n\t    var hex = '', block;\n\t    while (j < outputBlocks) {\n\t      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n\t        block = s[i];\n\t        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n\t          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n\t          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n\t          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n\t      }\n\t      if (j % blockCount === 0) {\n\t        f(s);\n\t        i = 0;\n\t      }\n\t    }\n\t    if (extraBytes) {\n\t      block = s[i];\n\t      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n\t      if (extraBytes > 1) {\n\t        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n\t      }\n\t      if (extraBytes > 2) {\n\t        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n\t      }\n\t    }\n\t    return hex;\n\t  };\n\n\t  Keccak.prototype.arrayBuffer = function () {\n\t    this.finalize();\n\n\t    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n\t      extraBytes = this.extraBytes, i = 0, j = 0;\n\t    var bytes = this.outputBits >> 3;\n\t    var buffer;\n\t    if (extraBytes) {\n\t      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n\t    } else {\n\t      buffer = new ArrayBuffer(bytes);\n\t    }\n\t    var array = new Uint32Array(buffer);\n\t    while (j < outputBlocks) {\n\t      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n\t        array[j] = s[i];\n\t      }\n\t      if (j % blockCount === 0) {\n\t        f(s);\n\t      }\n\t    }\n\t    if (extraBytes) {\n\t      array[i] = s[i];\n\t      buffer = buffer.slice(0, bytes);\n\t    }\n\t    return buffer;\n\t  };\n\n\t  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n\t  Keccak.prototype.digest = Keccak.prototype.array = function () {\n\t    this.finalize();\n\n\t    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n\t      extraBytes = this.extraBytes, i = 0, j = 0;\n\t    var array = [], offset, block;\n\t    while (j < outputBlocks) {\n\t      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n\t        offset = j << 2;\n\t        block = s[i];\n\t        array[offset] = block & 0xFF;\n\t        array[offset + 1] = (block >> 8) & 0xFF;\n\t        array[offset + 2] = (block >> 16) & 0xFF;\n\t        array[offset + 3] = (block >> 24) & 0xFF;\n\t      }\n\t      if (j % blockCount === 0) {\n\t        f(s);\n\t      }\n\t    }\n\t    if (extraBytes) {\n\t      offset = j << 2;\n\t      block = s[i];\n\t      array[offset] = block & 0xFF;\n\t      if (extraBytes > 1) {\n\t        array[offset + 1] = (block >> 8) & 0xFF;\n\t      }\n\t      if (extraBytes > 2) {\n\t        array[offset + 2] = (block >> 16) & 0xFF;\n\t      }\n\t    }\n\t    return array;\n\t  };\n\n\t  function Kmac(bits, padding, outputBits) {\n\t    Keccak.call(this, bits, padding, outputBits);\n\t  }\n\n\t  Kmac.prototype = new Keccak();\n\n\t  Kmac.prototype.finalize = function () {\n\t    this.encode(this.outputBits, true);\n\t    return Keccak.prototype.finalize.call(this);\n\t  };\n\n\t  var f = function (s) {\n\t    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n\t      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n\t      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n\t      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\t    for (n = 0; n < 48; n += 2) {\n\t      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n\t      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n\t      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n\t      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n\t      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n\t      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n\t      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n\t      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n\t      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n\t      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n\t      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n\t      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n\t      s[0] ^= h;\n\t      s[1] ^= l;\n\t      s[10] ^= h;\n\t      s[11] ^= l;\n\t      s[20] ^= h;\n\t      s[21] ^= l;\n\t      s[30] ^= h;\n\t      s[31] ^= l;\n\t      s[40] ^= h;\n\t      s[41] ^= l;\n\t      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n\t      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n\t      s[2] ^= h;\n\t      s[3] ^= l;\n\t      s[12] ^= h;\n\t      s[13] ^= l;\n\t      s[22] ^= h;\n\t      s[23] ^= l;\n\t      s[32] ^= h;\n\t      s[33] ^= l;\n\t      s[42] ^= h;\n\t      s[43] ^= l;\n\t      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n\t      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n\t      s[4] ^= h;\n\t      s[5] ^= l;\n\t      s[14] ^= h;\n\t      s[15] ^= l;\n\t      s[24] ^= h;\n\t      s[25] ^= l;\n\t      s[34] ^= h;\n\t      s[35] ^= l;\n\t      s[44] ^= h;\n\t      s[45] ^= l;\n\t      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n\t      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n\t      s[6] ^= h;\n\t      s[7] ^= l;\n\t      s[16] ^= h;\n\t      s[17] ^= l;\n\t      s[26] ^= h;\n\t      s[27] ^= l;\n\t      s[36] ^= h;\n\t      s[37] ^= l;\n\t      s[46] ^= h;\n\t      s[47] ^= l;\n\t      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n\t      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n\t      s[8] ^= h;\n\t      s[9] ^= l;\n\t      s[18] ^= h;\n\t      s[19] ^= l;\n\t      s[28] ^= h;\n\t      s[29] ^= l;\n\t      s[38] ^= h;\n\t      s[39] ^= l;\n\t      s[48] ^= h;\n\t      s[49] ^= l;\n\n\t      b0 = s[0];\n\t      b1 = s[1];\n\t      b32 = (s[11] << 4) | (s[10] >>> 28);\n\t      b33 = (s[10] << 4) | (s[11] >>> 28);\n\t      b14 = (s[20] << 3) | (s[21] >>> 29);\n\t      b15 = (s[21] << 3) | (s[20] >>> 29);\n\t      b46 = (s[31] << 9) | (s[30] >>> 23);\n\t      b47 = (s[30] << 9) | (s[31] >>> 23);\n\t      b28 = (s[40] << 18) | (s[41] >>> 14);\n\t      b29 = (s[41] << 18) | (s[40] >>> 14);\n\t      b20 = (s[2] << 1) | (s[3] >>> 31);\n\t      b21 = (s[3] << 1) | (s[2] >>> 31);\n\t      b2 = (s[13] << 12) | (s[12] >>> 20);\n\t      b3 = (s[12] << 12) | (s[13] >>> 20);\n\t      b34 = (s[22] << 10) | (s[23] >>> 22);\n\t      b35 = (s[23] << 10) | (s[22] >>> 22);\n\t      b16 = (s[33] << 13) | (s[32] >>> 19);\n\t      b17 = (s[32] << 13) | (s[33] >>> 19);\n\t      b48 = (s[42] << 2) | (s[43] >>> 30);\n\t      b49 = (s[43] << 2) | (s[42] >>> 30);\n\t      b40 = (s[5] << 30) | (s[4] >>> 2);\n\t      b41 = (s[4] << 30) | (s[5] >>> 2);\n\t      b22 = (s[14] << 6) | (s[15] >>> 26);\n\t      b23 = (s[15] << 6) | (s[14] >>> 26);\n\t      b4 = (s[25] << 11) | (s[24] >>> 21);\n\t      b5 = (s[24] << 11) | (s[25] >>> 21);\n\t      b36 = (s[34] << 15) | (s[35] >>> 17);\n\t      b37 = (s[35] << 15) | (s[34] >>> 17);\n\t      b18 = (s[45] << 29) | (s[44] >>> 3);\n\t      b19 = (s[44] << 29) | (s[45] >>> 3);\n\t      b10 = (s[6] << 28) | (s[7] >>> 4);\n\t      b11 = (s[7] << 28) | (s[6] >>> 4);\n\t      b42 = (s[17] << 23) | (s[16] >>> 9);\n\t      b43 = (s[16] << 23) | (s[17] >>> 9);\n\t      b24 = (s[26] << 25) | (s[27] >>> 7);\n\t      b25 = (s[27] << 25) | (s[26] >>> 7);\n\t      b6 = (s[36] << 21) | (s[37] >>> 11);\n\t      b7 = (s[37] << 21) | (s[36] >>> 11);\n\t      b38 = (s[47] << 24) | (s[46] >>> 8);\n\t      b39 = (s[46] << 24) | (s[47] >>> 8);\n\t      b30 = (s[8] << 27) | (s[9] >>> 5);\n\t      b31 = (s[9] << 27) | (s[8] >>> 5);\n\t      b12 = (s[18] << 20) | (s[19] >>> 12);\n\t      b13 = (s[19] << 20) | (s[18] >>> 12);\n\t      b44 = (s[29] << 7) | (s[28] >>> 25);\n\t      b45 = (s[28] << 7) | (s[29] >>> 25);\n\t      b26 = (s[38] << 8) | (s[39] >>> 24);\n\t      b27 = (s[39] << 8) | (s[38] >>> 24);\n\t      b8 = (s[48] << 14) | (s[49] >>> 18);\n\t      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n\t      s[0] = b0 ^ (~b2 & b4);\n\t      s[1] = b1 ^ (~b3 & b5);\n\t      s[10] = b10 ^ (~b12 & b14);\n\t      s[11] = b11 ^ (~b13 & b15);\n\t      s[20] = b20 ^ (~b22 & b24);\n\t      s[21] = b21 ^ (~b23 & b25);\n\t      s[30] = b30 ^ (~b32 & b34);\n\t      s[31] = b31 ^ (~b33 & b35);\n\t      s[40] = b40 ^ (~b42 & b44);\n\t      s[41] = b41 ^ (~b43 & b45);\n\t      s[2] = b2 ^ (~b4 & b6);\n\t      s[3] = b3 ^ (~b5 & b7);\n\t      s[12] = b12 ^ (~b14 & b16);\n\t      s[13] = b13 ^ (~b15 & b17);\n\t      s[22] = b22 ^ (~b24 & b26);\n\t      s[23] = b23 ^ (~b25 & b27);\n\t      s[32] = b32 ^ (~b34 & b36);\n\t      s[33] = b33 ^ (~b35 & b37);\n\t      s[42] = b42 ^ (~b44 & b46);\n\t      s[43] = b43 ^ (~b45 & b47);\n\t      s[4] = b4 ^ (~b6 & b8);\n\t      s[5] = b5 ^ (~b7 & b9);\n\t      s[14] = b14 ^ (~b16 & b18);\n\t      s[15] = b15 ^ (~b17 & b19);\n\t      s[24] = b24 ^ (~b26 & b28);\n\t      s[25] = b25 ^ (~b27 & b29);\n\t      s[34] = b34 ^ (~b36 & b38);\n\t      s[35] = b35 ^ (~b37 & b39);\n\t      s[44] = b44 ^ (~b46 & b48);\n\t      s[45] = b45 ^ (~b47 & b49);\n\t      s[6] = b6 ^ (~b8 & b0);\n\t      s[7] = b7 ^ (~b9 & b1);\n\t      s[16] = b16 ^ (~b18 & b10);\n\t      s[17] = b17 ^ (~b19 & b11);\n\t      s[26] = b26 ^ (~b28 & b20);\n\t      s[27] = b27 ^ (~b29 & b21);\n\t      s[36] = b36 ^ (~b38 & b30);\n\t      s[37] = b37 ^ (~b39 & b31);\n\t      s[46] = b46 ^ (~b48 & b40);\n\t      s[47] = b47 ^ (~b49 & b41);\n\t      s[8] = b8 ^ (~b0 & b2);\n\t      s[9] = b9 ^ (~b1 & b3);\n\t      s[18] = b18 ^ (~b10 & b12);\n\t      s[19] = b19 ^ (~b11 & b13);\n\t      s[28] = b28 ^ (~b20 & b22);\n\t      s[29] = b29 ^ (~b21 & b23);\n\t      s[38] = b38 ^ (~b30 & b32);\n\t      s[39] = b39 ^ (~b31 & b33);\n\t      s[48] = b48 ^ (~b40 & b42);\n\t      s[49] = b49 ^ (~b41 & b43);\n\n\t      s[0] ^= RC[n];\n\t      s[1] ^= RC[n + 1];\n\t    }\n\t  };\n\n\t  if (COMMON_JS) {\n\t    module.exports = methods;\n\t  } else {\n\t    for (i = 0; i < methodNames.length; ++i) {\n\t      root[methodNames[i]] = methods[methodNames[i]];\n\t    }\n\t    if (AMD) {\n\t      undefined(function () {\n\t        return methods;\n\t      });\n\t    }\n\t  }\n\t})();\n\t});\n\n\tvar lib$4 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {\n\t    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.keccak256 = void 0;\n\tvar js_sha3_1 = __importDefault(sha3);\n\n\tfunction keccak256(data) {\n\t    return '0x' + js_sha3_1.default.keccak_256((0, lib$1.arrayify)(data));\n\t}\n\texports.keccak256 = keccak256;\n\n\t});\n\n\tvar index$4 = /*@__PURE__*/getDefaultExportFromCjs(lib$4);\n\n\tvar _version$a = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"rlp/5.5.0\";\n\n\t});\n\n\tvar _version$b = /*@__PURE__*/getDefaultExportFromCjs(_version$a);\n\n\tvar lib$5 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.decode = exports.encode = void 0;\n\t//See: https://github.com/ethereum/wiki/wiki/RLP\n\n\n\n\tvar logger = new lib.Logger(_version$a.version);\n\tfunction arrayifyInteger(value) {\n\t    var result = [];\n\t    while (value) {\n\t        result.unshift(value & 0xff);\n\t        value >>= 8;\n\t    }\n\t    return result;\n\t}\n\tfunction unarrayifyInteger(data, offset, length) {\n\t    var result = 0;\n\t    for (var i = 0; i < length; i++) {\n\t        result = (result * 256) + data[offset + i];\n\t    }\n\t    return result;\n\t}\n\tfunction _encode(object) {\n\t    if (Array.isArray(object)) {\n\t        var payload_1 = [];\n\t        object.forEach(function (child) {\n\t            payload_1 = payload_1.concat(_encode(child));\n\t        });\n\t        if (payload_1.length <= 55) {\n\t            payload_1.unshift(0xc0 + payload_1.length);\n\t            return payload_1;\n\t        }\n\t        var length_1 = arrayifyInteger(payload_1.length);\n\t        length_1.unshift(0xf7 + length_1.length);\n\t        return length_1.concat(payload_1);\n\t    }\n\t    if (!(0, lib$1.isBytesLike)(object)) {\n\t        logger.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object);\n\t    }\n\t    var data = Array.prototype.slice.call((0, lib$1.arrayify)(object));\n\t    if (data.length === 1 && data[0] <= 0x7f) {\n\t        return data;\n\t    }\n\t    else if (data.length <= 55) {\n\t        data.unshift(0x80 + data.length);\n\t        return data;\n\t    }\n\t    var length = arrayifyInteger(data.length);\n\t    length.unshift(0xb7 + length.length);\n\t    return length.concat(data);\n\t}\n\tfunction encode(object) {\n\t    return (0, lib$1.hexlify)(_encode(object));\n\t}\n\texports.encode = encode;\n\tfunction _decodeChildren(data, offset, childOffset, length) {\n\t    var result = [];\n\t    while (childOffset < offset + 1 + length) {\n\t        var decoded = _decode(data, childOffset);\n\t        result.push(decoded.result);\n\t        childOffset += decoded.consumed;\n\t        if (childOffset > offset + 1 + length) {\n\t            logger.throwError(\"child data too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n\t        }\n\t    }\n\t    return { consumed: (1 + length), result: result };\n\t}\n\t// returns { consumed: number, result: Object }\n\tfunction _decode(data, offset) {\n\t    if (data.length === 0) {\n\t        logger.throwError(\"data too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n\t    }\n\t    // Array with extra length prefix\n\t    if (data[offset] >= 0xf8) {\n\t        var lengthLength = data[offset] - 0xf7;\n\t        if (offset + 1 + lengthLength > data.length) {\n\t            logger.throwError(\"data short segment too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n\t        }\n\t        var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);\n\t        if (offset + 1 + lengthLength + length_2 > data.length) {\n\t            logger.throwError(\"data long segment too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n\t        }\n\t        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);\n\t    }\n\t    else if (data[offset] >= 0xc0) {\n\t        var length_3 = data[offset] - 0xc0;\n\t        if (offset + 1 + length_3 > data.length) {\n\t            logger.throwError(\"data array too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n\t        }\n\t        return _decodeChildren(data, offset, offset + 1, length_3);\n\t    }\n\t    else if (data[offset] >= 0xb8) {\n\t        var lengthLength = data[offset] - 0xb7;\n\t        if (offset + 1 + lengthLength > data.length) {\n\t            logger.throwError(\"data array too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n\t        }\n\t        var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);\n\t        if (offset + 1 + lengthLength + length_4 > data.length) {\n\t            logger.throwError(\"data array too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n\t        }\n\t        var result = (0, lib$1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));\n\t        return { consumed: (1 + lengthLength + length_4), result: result };\n\t    }\n\t    else if (data[offset] >= 0x80) {\n\t        var length_5 = data[offset] - 0x80;\n\t        if (offset + 1 + length_5 > data.length) {\n\t            logger.throwError(\"data too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n\t        }\n\t        var result = (0, lib$1.hexlify)(data.slice(offset + 1, offset + 1 + length_5));\n\t        return { consumed: (1 + length_5), result: result };\n\t    }\n\t    return { consumed: 1, result: (0, lib$1.hexlify)(data[offset]) };\n\t}\n\tfunction decode(data) {\n\t    var bytes = (0, lib$1.arrayify)(data);\n\t    var decoded = _decode(bytes, 0);\n\t    if (decoded.consumed !== bytes.length) {\n\t        logger.throwArgumentError(\"invalid rlp data\", \"data\", data);\n\t    }\n\t    return decoded.result;\n\t}\n\texports.decode = decode;\n\n\t});\n\n\tvar index$5 = /*@__PURE__*/getDefaultExportFromCjs(lib$5);\n\n\tvar _version$c = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"address/5.5.0\";\n\n\t});\n\n\tvar _version$d = /*@__PURE__*/getDefaultExportFromCjs(_version$c);\n\n\tvar lib$6 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.isAddress = exports.getAddress = void 0;\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$c.version);\n\tfunction getChecksumAddress(address) {\n\t    if (!(0, lib$1.isHexString)(address, 20)) {\n\t        logger.throwArgumentError(\"invalid address\", \"address\", address);\n\t    }\n\t    address = address.toLowerCase();\n\t    var chars = address.substring(2).split(\"\");\n\t    var expanded = new Uint8Array(40);\n\t    for (var i = 0; i < 40; i++) {\n\t        expanded[i] = chars[i].charCodeAt(0);\n\t    }\n\t    var hashed = (0, lib$1.arrayify)((0, lib$4.keccak256)(expanded));\n\t    for (var i = 0; i < 40; i += 2) {\n\t        if ((hashed[i >> 1] >> 4) >= 8) {\n\t            chars[i] = chars[i].toUpperCase();\n\t        }\n\t        if ((hashed[i >> 1] & 0x0f) >= 8) {\n\t            chars[i + 1] = chars[i + 1].toUpperCase();\n\t        }\n\t    }\n\t    return \"0x\" + chars.join(\"\");\n\t}\n\t// Shims for environments that are missing some required constants and functions\n\tvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\n\tfunction log10(x) {\n\t    if (Math.log10) {\n\t        return Math.log10(x);\n\t    }\n\t    return Math.log(x) / Math.LN10;\n\t}\n\t// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n\t// Create lookup table\n\tvar ibanLookup = {};\n\tfor (var i = 0; i < 10; i++) {\n\t    ibanLookup[String(i)] = String(i);\n\t}\n\tfor (var i = 0; i < 26; i++) {\n\t    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n\t}\n\t// How many decimal digits can we process? (for 64-bit float, this is 15)\n\tvar safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n\tfunction ibanChecksum(address) {\n\t    address = address.toUpperCase();\n\t    address = address.substring(4) + address.substring(0, 2) + \"00\";\n\t    var expanded = address.split(\"\").map(function (c) { return ibanLookup[c]; }).join(\"\");\n\t    // Javascript can handle integers safely up to 15 (decimal) digits\n\t    while (expanded.length >= safeDigits) {\n\t        var block = expanded.substring(0, safeDigits);\n\t        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n\t    }\n\t    var checksum = String(98 - (parseInt(expanded, 10) % 97));\n\t    while (checksum.length < 2) {\n\t        checksum = \"0\" + checksum;\n\t    }\n\t    return checksum;\n\t}\n\t;\n\tfunction getAddress(address) {\n\t    var result = null;\n\t    if (typeof (address) !== \"string\") {\n\t        logger.throwArgumentError(\"invalid address\", \"address\", address);\n\t    }\n\t    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n\t        // Missing the 0x prefix\n\t        if (address.substring(0, 2) !== \"0x\") {\n\t            address = \"0x\" + address;\n\t        }\n\t        result = getChecksumAddress(address);\n\t        // It is a checksummed address with a bad checksum\n\t        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n\t            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n\t        }\n\t        // Maybe ICAP? (we only support direct mode)\n\t    }\n\t    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n\t        // It is an ICAP address with a bad checksum\n\t        if (address.substring(2, 4) !== ibanChecksum(address)) {\n\t            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n\t        }\n\t        result = (0, lib$2._base36To16)(address.substring(4));\n\t        while (result.length < 40) {\n\t            result = \"0\" + result;\n\t        }\n\t        result = getChecksumAddress(\"0x\" + result);\n\t    }\n\t    else {\n\t        logger.throwArgumentError(\"invalid address\", \"address\", address);\n\t    }\n\t    return result;\n\t}\n\texports.getAddress = getAddress;\n\tfunction isAddress(address) {\n\t    try {\n\t        getAddress(address);\n\t        return true;\n\t    }\n\t    catch (error) { }\n\t    return false;\n\t}\n\texports.isAddress = isAddress;\n\tfunction getIcapAddress(address) {\n\t    var base36 = (0, lib$2._base16To36)(getAddress(address).substring(2)).toUpperCase();\n\t    while (base36.length < 30) {\n\t        base36 = \"0\" + base36;\n\t    }\n\t    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n\t}\n\texports.getIcapAddress = getIcapAddress;\n\t// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n\tfunction getContractAddress(transaction) {\n\t    var from = null;\n\t    try {\n\t        from = getAddress(transaction.from);\n\t    }\n\t    catch (error) {\n\t        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n\t    }\n\t    var nonce = (0, lib$1.stripZeros)((0, lib$1.arrayify)(lib$2.BigNumber.from(transaction.nonce).toHexString()));\n\t    return getAddress((0, lib$1.hexDataSlice)((0, lib$4.keccak256)((0, lib$5.encode)([from, nonce])), 12));\n\t}\n\texports.getContractAddress = getContractAddress;\n\tfunction getCreate2Address(from, salt, initCodeHash) {\n\t    if ((0, lib$1.hexDataLength)(salt) !== 32) {\n\t        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n\t    }\n\t    if ((0, lib$1.hexDataLength)(initCodeHash) !== 32) {\n\t        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n\t    }\n\t    return getAddress((0, lib$1.hexDataSlice)((0, lib$4.keccak256)((0, lib$1.concat)([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n\t}\n\texports.getCreate2Address = getCreate2Address;\n\n\t});\n\n\tvar index$6 = /*@__PURE__*/getDefaultExportFromCjs(lib$6);\n\n\tvar address = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.AddressCoder = void 0;\n\n\n\n\tvar AddressCoder = /** @class */ (function (_super) {\n\t    __extends(AddressCoder, _super);\n\t    function AddressCoder(localName) {\n\t        return _super.call(this, \"address\", \"address\", localName, false) || this;\n\t    }\n\t    AddressCoder.prototype.defaultValue = function () {\n\t        return \"0x0000000000000000000000000000000000000000\";\n\t    };\n\t    AddressCoder.prototype.encode = function (writer, value) {\n\t        try {\n\t            value = (0, lib$6.getAddress)(value);\n\t        }\n\t        catch (error) {\n\t            this._throwError(error.message, value);\n\t        }\n\t        return writer.writeValue(value);\n\t    };\n\t    AddressCoder.prototype.decode = function (reader) {\n\t        return (0, lib$6.getAddress)((0, lib$1.hexZeroPad)(reader.readValue().toHexString(), 20));\n\t    };\n\t    return AddressCoder;\n\t}(abstractCoder.Coder));\n\texports.AddressCoder = AddressCoder;\n\n\t});\n\n\tvar address$1 = /*@__PURE__*/getDefaultExportFromCjs(address);\n\n\tvar anonymous = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.AnonymousCoder = void 0;\n\n\t// Clones the functionality of an existing Coder, but without a localName\n\tvar AnonymousCoder = /** @class */ (function (_super) {\n\t    __extends(AnonymousCoder, _super);\n\t    function AnonymousCoder(coder) {\n\t        var _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic) || this;\n\t        _this.coder = coder;\n\t        return _this;\n\t    }\n\t    AnonymousCoder.prototype.defaultValue = function () {\n\t        return this.coder.defaultValue();\n\t    };\n\t    AnonymousCoder.prototype.encode = function (writer, value) {\n\t        return this.coder.encode(writer, value);\n\t    };\n\t    AnonymousCoder.prototype.decode = function (reader) {\n\t        return this.coder.decode(reader);\n\t    };\n\t    return AnonymousCoder;\n\t}(abstractCoder.Coder));\n\texports.AnonymousCoder = AnonymousCoder;\n\n\t});\n\n\tvar anonymous$1 = /*@__PURE__*/getDefaultExportFromCjs(anonymous);\n\n\tvar array = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.ArrayCoder = exports.unpack = exports.pack = void 0;\n\n\n\tvar logger = new lib.Logger(_version$8.version);\n\n\n\tfunction pack(writer, coders, values) {\n\t    var arrayValues = null;\n\t    if (Array.isArray(values)) {\n\t        arrayValues = values;\n\t    }\n\t    else if (values && typeof (values) === \"object\") {\n\t        var unique_1 = {};\n\t        arrayValues = coders.map(function (coder) {\n\t            var name = coder.localName;\n\t            if (!name) {\n\t                logger.throwError(\"cannot encode object for signature with missing names\", lib.Logger.errors.INVALID_ARGUMENT, {\n\t                    argument: \"values\",\n\t                    coder: coder,\n\t                    value: values\n\t                });\n\t            }\n\t            if (unique_1[name]) {\n\t                logger.throwError(\"cannot encode object for signature with duplicate names\", lib.Logger.errors.INVALID_ARGUMENT, {\n\t                    argument: \"values\",\n\t                    coder: coder,\n\t                    value: values\n\t                });\n\t            }\n\t            unique_1[name] = true;\n\t            return values[name];\n\t        });\n\t    }\n\t    else {\n\t        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n\t    }\n\t    if (coders.length !== arrayValues.length) {\n\t        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n\t    }\n\t    var staticWriter = new abstractCoder.Writer(writer.wordSize);\n\t    var dynamicWriter = new abstractCoder.Writer(writer.wordSize);\n\t    var updateFuncs = [];\n\t    coders.forEach(function (coder, index) {\n\t        var value = arrayValues[index];\n\t        if (coder.dynamic) {\n\t            // Get current dynamic offset (for the future pointer)\n\t            var dynamicOffset_1 = dynamicWriter.length;\n\t            // Encode the dynamic value into the dynamicWriter\n\t            coder.encode(dynamicWriter, value);\n\t            // Prepare to populate the correct offset once we are done\n\t            var updateFunc_1 = staticWriter.writeUpdatableValue();\n\t            updateFuncs.push(function (baseOffset) {\n\t                updateFunc_1(baseOffset + dynamicOffset_1);\n\t            });\n\t        }\n\t        else {\n\t            coder.encode(staticWriter, value);\n\t        }\n\t    });\n\t    // Backfill all the dynamic offsets, now that we know the static length\n\t    updateFuncs.forEach(function (func) { func(staticWriter.length); });\n\t    var length = writer.appendWriter(staticWriter);\n\t    length += writer.appendWriter(dynamicWriter);\n\t    return length;\n\t}\n\texports.pack = pack;\n\tfunction unpack(reader, coders) {\n\t    var values = [];\n\t    // A reader anchored to this base\n\t    var baseReader = reader.subReader(0);\n\t    coders.forEach(function (coder) {\n\t        var value = null;\n\t        if (coder.dynamic) {\n\t            var offset = reader.readValue();\n\t            var offsetReader = baseReader.subReader(offset.toNumber());\n\t            try {\n\t                value = coder.decode(offsetReader);\n\t            }\n\t            catch (error) {\n\t                // Cannot recover from this\n\t                if (error.code === lib.Logger.errors.BUFFER_OVERRUN) {\n\t                    throw error;\n\t                }\n\t                value = error;\n\t                value.baseType = coder.name;\n\t                value.name = coder.localName;\n\t                value.type = coder.type;\n\t            }\n\t        }\n\t        else {\n\t            try {\n\t                value = coder.decode(reader);\n\t            }\n\t            catch (error) {\n\t                // Cannot recover from this\n\t                if (error.code === lib.Logger.errors.BUFFER_OVERRUN) {\n\t                    throw error;\n\t                }\n\t                value = error;\n\t                value.baseType = coder.name;\n\t                value.name = coder.localName;\n\t                value.type = coder.type;\n\t            }\n\t        }\n\t        if (value != undefined) {\n\t            values.push(value);\n\t        }\n\t    });\n\t    // We only output named properties for uniquely named coders\n\t    var uniqueNames = coders.reduce(function (accum, coder) {\n\t        var name = coder.localName;\n\t        if (name) {\n\t            if (!accum[name]) {\n\t                accum[name] = 0;\n\t            }\n\t            accum[name]++;\n\t        }\n\t        return accum;\n\t    }, {});\n\t    // Add any named parameters (i.e. tuples)\n\t    coders.forEach(function (coder, index) {\n\t        var name = coder.localName;\n\t        if (!name || uniqueNames[name] !== 1) {\n\t            return;\n\t        }\n\t        if (name === \"length\") {\n\t            name = \"_length\";\n\t        }\n\t        if (values[name] != null) {\n\t            return;\n\t        }\n\t        var value = values[index];\n\t        if (value instanceof Error) {\n\t            Object.defineProperty(values, name, {\n\t                enumerable: true,\n\t                get: function () { throw value; }\n\t            });\n\t        }\n\t        else {\n\t            values[name] = value;\n\t        }\n\t    });\n\t    var _loop_1 = function (i) {\n\t        var value = values[i];\n\t        if (value instanceof Error) {\n\t            Object.defineProperty(values, i, {\n\t                enumerable: true,\n\t                get: function () { throw value; }\n\t            });\n\t        }\n\t    };\n\t    for (var i = 0; i < values.length; i++) {\n\t        _loop_1(i);\n\t    }\n\t    return Object.freeze(values);\n\t}\n\texports.unpack = unpack;\n\tvar ArrayCoder = /** @class */ (function (_super) {\n\t    __extends(ArrayCoder, _super);\n\t    function ArrayCoder(coder, length, localName) {\n\t        var _this = this;\n\t        var type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n\t        var dynamic = (length === -1 || coder.dynamic);\n\t        _this = _super.call(this, \"array\", type, localName, dynamic) || this;\n\t        _this.coder = coder;\n\t        _this.length = length;\n\t        return _this;\n\t    }\n\t    ArrayCoder.prototype.defaultValue = function () {\n\t        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n\t        var defaultChild = this.coder.defaultValue();\n\t        var result = [];\n\t        for (var i = 0; i < this.length; i++) {\n\t            result.push(defaultChild);\n\t        }\n\t        return result;\n\t    };\n\t    ArrayCoder.prototype.encode = function (writer, value) {\n\t        if (!Array.isArray(value)) {\n\t            this._throwError(\"expected array value\", value);\n\t        }\n\t        var count = this.length;\n\t        if (count === -1) {\n\t            count = value.length;\n\t            writer.writeValue(value.length);\n\t        }\n\t        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n\t        var coders = [];\n\t        for (var i = 0; i < value.length; i++) {\n\t            coders.push(this.coder);\n\t        }\n\t        return pack(writer, coders, value);\n\t    };\n\t    ArrayCoder.prototype.decode = function (reader) {\n\t        var count = this.length;\n\t        if (count === -1) {\n\t            count = reader.readValue().toNumber();\n\t            // Check that there is *roughly* enough data to ensure\n\t            // stray random data is not being read as a length. Each\n\t            // slot requires at least 32 bytes for their value (or 32\n\t            // bytes as a link to the data). This could use a much\n\t            // tighter bound, but we are erroring on the side of safety.\n\t            if (count * 32 > reader._data.length) {\n\t                logger.throwError(\"insufficient data length\", lib.Logger.errors.BUFFER_OVERRUN, {\n\t                    length: reader._data.length,\n\t                    count: count\n\t                });\n\t            }\n\t        }\n\t        var coders = [];\n\t        for (var i = 0; i < count; i++) {\n\t            coders.push(new anonymous.AnonymousCoder(this.coder));\n\t        }\n\t        return reader.coerce(this.name, unpack(reader, coders));\n\t    };\n\t    return ArrayCoder;\n\t}(abstractCoder.Coder));\n\texports.ArrayCoder = ArrayCoder;\n\n\t});\n\n\tvar array$1 = /*@__PURE__*/getDefaultExportFromCjs(array);\n\n\tvar boolean_1 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.BooleanCoder = void 0;\n\n\tvar BooleanCoder = /** @class */ (function (_super) {\n\t    __extends(BooleanCoder, _super);\n\t    function BooleanCoder(localName) {\n\t        return _super.call(this, \"bool\", \"bool\", localName, false) || this;\n\t    }\n\t    BooleanCoder.prototype.defaultValue = function () {\n\t        return false;\n\t    };\n\t    BooleanCoder.prototype.encode = function (writer, value) {\n\t        return writer.writeValue(value ? 1 : 0);\n\t    };\n\t    BooleanCoder.prototype.decode = function (reader) {\n\t        return reader.coerce(this.type, !reader.readValue().isZero());\n\t    };\n\t    return BooleanCoder;\n\t}(abstractCoder.Coder));\n\texports.BooleanCoder = BooleanCoder;\n\n\t});\n\n\tvar boolean = /*@__PURE__*/getDefaultExportFromCjs(boolean_1);\n\n\tvar bytes = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.BytesCoder = exports.DynamicBytesCoder = void 0;\n\n\n\tvar DynamicBytesCoder = /** @class */ (function (_super) {\n\t    __extends(DynamicBytesCoder, _super);\n\t    function DynamicBytesCoder(type, localName) {\n\t        return _super.call(this, type, type, localName, true) || this;\n\t    }\n\t    DynamicBytesCoder.prototype.defaultValue = function () {\n\t        return \"0x\";\n\t    };\n\t    DynamicBytesCoder.prototype.encode = function (writer, value) {\n\t        value = (0, lib$1.arrayify)(value);\n\t        var length = writer.writeValue(value.length);\n\t        length += writer.writeBytes(value);\n\t        return length;\n\t    };\n\t    DynamicBytesCoder.prototype.decode = function (reader) {\n\t        return reader.readBytes(reader.readValue().toNumber(), true);\n\t    };\n\t    return DynamicBytesCoder;\n\t}(abstractCoder.Coder));\n\texports.DynamicBytesCoder = DynamicBytesCoder;\n\tvar BytesCoder = /** @class */ (function (_super) {\n\t    __extends(BytesCoder, _super);\n\t    function BytesCoder(localName) {\n\t        return _super.call(this, \"bytes\", localName) || this;\n\t    }\n\t    BytesCoder.prototype.decode = function (reader) {\n\t        return reader.coerce(this.name, (0, lib$1.hexlify)(_super.prototype.decode.call(this, reader)));\n\t    };\n\t    return BytesCoder;\n\t}(DynamicBytesCoder));\n\texports.BytesCoder = BytesCoder;\n\n\t});\n\n\tvar bytes$1 = /*@__PURE__*/getDefaultExportFromCjs(bytes);\n\n\tvar fixedBytes = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.FixedBytesCoder = void 0;\n\n\n\t// @TODO: Merge this with bytes\n\tvar FixedBytesCoder = /** @class */ (function (_super) {\n\t    __extends(FixedBytesCoder, _super);\n\t    function FixedBytesCoder(size, localName) {\n\t        var _this = this;\n\t        var name = \"bytes\" + String(size);\n\t        _this = _super.call(this, name, name, localName, false) || this;\n\t        _this.size = size;\n\t        return _this;\n\t    }\n\t    FixedBytesCoder.prototype.defaultValue = function () {\n\t        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n\t    };\n\t    FixedBytesCoder.prototype.encode = function (writer, value) {\n\t        var data = (0, lib$1.arrayify)(value);\n\t        if (data.length !== this.size) {\n\t            this._throwError(\"incorrect data length\", value);\n\t        }\n\t        return writer.writeBytes(data);\n\t    };\n\t    FixedBytesCoder.prototype.decode = function (reader) {\n\t        return reader.coerce(this.name, (0, lib$1.hexlify)(reader.readBytes(this.size)));\n\t    };\n\t    return FixedBytesCoder;\n\t}(abstractCoder.Coder));\n\texports.FixedBytesCoder = FixedBytesCoder;\n\n\t});\n\n\tvar fixedBytes$1 = /*@__PURE__*/getDefaultExportFromCjs(fixedBytes);\n\n\tvar _null = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.NullCoder = void 0;\n\n\tvar NullCoder = /** @class */ (function (_super) {\n\t    __extends(NullCoder, _super);\n\t    function NullCoder(localName) {\n\t        return _super.call(this, \"null\", \"\", localName, false) || this;\n\t    }\n\t    NullCoder.prototype.defaultValue = function () {\n\t        return null;\n\t    };\n\t    NullCoder.prototype.encode = function (writer, value) {\n\t        if (value != null) {\n\t            this._throwError(\"not null\", value);\n\t        }\n\t        return writer.writeBytes([]);\n\t    };\n\t    NullCoder.prototype.decode = function (reader) {\n\t        reader.readBytes(0);\n\t        return reader.coerce(this.name, null);\n\t    };\n\t    return NullCoder;\n\t}(abstractCoder.Coder));\n\texports.NullCoder = NullCoder;\n\n\t});\n\n\tvar _null$1 = /*@__PURE__*/getDefaultExportFromCjs(_null);\n\n\tvar addresses = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.AddressZero = void 0;\n\texports.AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n\t});\n\n\tvar addresses$1 = /*@__PURE__*/getDefaultExportFromCjs(addresses);\n\n\tvar bignumbers = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = void 0;\n\n\tvar NegativeOne = ( /*#__PURE__*/lib$2.BigNumber.from(-1));\n\texports.NegativeOne = NegativeOne;\n\tvar Zero = ( /*#__PURE__*/lib$2.BigNumber.from(0));\n\texports.Zero = Zero;\n\tvar One = ( /*#__PURE__*/lib$2.BigNumber.from(1));\n\texports.One = One;\n\tvar Two = ( /*#__PURE__*/lib$2.BigNumber.from(2));\n\texports.Two = Two;\n\tvar WeiPerEther = ( /*#__PURE__*/lib$2.BigNumber.from(\"1000000000000000000\"));\n\texports.WeiPerEther = WeiPerEther;\n\tvar MaxUint256 = ( /*#__PURE__*/lib$2.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n\texports.MaxUint256 = MaxUint256;\n\tvar MinInt256 = ( /*#__PURE__*/lib$2.BigNumber.from(\"-0x8000000000000000000000000000000000000000000000000000000000000000\"));\n\texports.MinInt256 = MinInt256;\n\tvar MaxInt256 = ( /*#__PURE__*/lib$2.BigNumber.from(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n\texports.MaxInt256 = MaxInt256;\n\n\t});\n\n\tvar bignumbers$1 = /*@__PURE__*/getDefaultExportFromCjs(bignumbers);\n\n\tvar hashes = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.HashZero = void 0;\n\texports.HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n\t});\n\n\tvar hashes$1 = /*@__PURE__*/getDefaultExportFromCjs(hashes);\n\n\tvar strings = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.EtherSymbol = void 0;\n\t// NFKC (composed)             // (decomposed)\n\texports.EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\n\n\t});\n\n\tvar strings$1 = /*@__PURE__*/getDefaultExportFromCjs(strings);\n\n\tvar lib$7 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.EtherSymbol = exports.HashZero = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.Two = exports.One = exports.Zero = exports.NegativeOne = exports.AddressZero = void 0;\n\n\tObject.defineProperty(exports, \"AddressZero\", { enumerable: true, get: function () { return addresses.AddressZero; } });\n\n\tObject.defineProperty(exports, \"NegativeOne\", { enumerable: true, get: function () { return bignumbers.NegativeOne; } });\n\tObject.defineProperty(exports, \"Zero\", { enumerable: true, get: function () { return bignumbers.Zero; } });\n\tObject.defineProperty(exports, \"One\", { enumerable: true, get: function () { return bignumbers.One; } });\n\tObject.defineProperty(exports, \"Two\", { enumerable: true, get: function () { return bignumbers.Two; } });\n\tObject.defineProperty(exports, \"WeiPerEther\", { enumerable: true, get: function () { return bignumbers.WeiPerEther; } });\n\tObject.defineProperty(exports, \"MaxUint256\", { enumerable: true, get: function () { return bignumbers.MaxUint256; } });\n\tObject.defineProperty(exports, \"MinInt256\", { enumerable: true, get: function () { return bignumbers.MinInt256; } });\n\tObject.defineProperty(exports, \"MaxInt256\", { enumerable: true, get: function () { return bignumbers.MaxInt256; } });\n\n\tObject.defineProperty(exports, \"HashZero\", { enumerable: true, get: function () { return hashes.HashZero; } });\n\n\tObject.defineProperty(exports, \"EtherSymbol\", { enumerable: true, get: function () { return strings.EtherSymbol; } });\n\n\t});\n\n\tvar index$7 = /*@__PURE__*/getDefaultExportFromCjs(lib$7);\n\n\tvar number = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.NumberCoder = void 0;\n\n\n\n\tvar NumberCoder = /** @class */ (function (_super) {\n\t    __extends(NumberCoder, _super);\n\t    function NumberCoder(size, signed, localName) {\n\t        var _this = this;\n\t        var name = ((signed ? \"int\" : \"uint\") + (size * 8));\n\t        _this = _super.call(this, name, name, localName, false) || this;\n\t        _this.size = size;\n\t        _this.signed = signed;\n\t        return _this;\n\t    }\n\t    NumberCoder.prototype.defaultValue = function () {\n\t        return 0;\n\t    };\n\t    NumberCoder.prototype.encode = function (writer, value) {\n\t        var v = lib$2.BigNumber.from(value);\n\t        // Check bounds are safe for encoding\n\t        var maxUintValue = lib$7.MaxUint256.mask(writer.wordSize * 8);\n\t        if (this.signed) {\n\t            var bounds = maxUintValue.mask(this.size * 8 - 1);\n\t            if (v.gt(bounds) || v.lt(bounds.add(lib$7.One).mul(lib$7.NegativeOne))) {\n\t                this._throwError(\"value out-of-bounds\", value);\n\t            }\n\t        }\n\t        else if (v.lt(lib$7.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n\t            this._throwError(\"value out-of-bounds\", value);\n\t        }\n\t        v = v.toTwos(this.size * 8).mask(this.size * 8);\n\t        if (this.signed) {\n\t            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n\t        }\n\t        return writer.writeValue(v);\n\t    };\n\t    NumberCoder.prototype.decode = function (reader) {\n\t        var value = reader.readValue().mask(this.size * 8);\n\t        if (this.signed) {\n\t            value = value.fromTwos(this.size * 8);\n\t        }\n\t        return reader.coerce(this.name, value);\n\t    };\n\t    return NumberCoder;\n\t}(abstractCoder.Coder));\n\texports.NumberCoder = NumberCoder;\n\n\t});\n\n\tvar number$1 = /*@__PURE__*/getDefaultExportFromCjs(number);\n\n\tvar _version$e = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"strings/5.5.0\";\n\n\t});\n\n\tvar _version$f = /*@__PURE__*/getDefaultExportFromCjs(_version$e);\n\n\tvar utf8 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.toUtf8CodePoints = exports.toUtf8String = exports._toUtf8String = exports._toEscapedUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$e.version);\n\t///////////////////////////////\n\tvar UnicodeNormalizationForm;\n\t(function (UnicodeNormalizationForm) {\n\t    UnicodeNormalizationForm[\"current\"] = \"\";\n\t    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n\t    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n\t    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n\t    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n\t})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n\t;\n\tvar Utf8ErrorReason;\n\t(function (Utf8ErrorReason) {\n\t    // A continuation byte was present where there was nothing to continue\n\t    // - offset = the index the codepoint began in\n\t    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n\t    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n\t    // - offset = the index the codepoint began in\n\t    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n\t    // The string is too short to process the expected codepoint\n\t    // - offset = the index the codepoint began in\n\t    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n\t    // A missing continuation byte was expected but not found\n\t    // - offset = the index the continuation byte was expected at\n\t    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n\t    // The computed code point is outside the range for UTF-8\n\t    // - offset       = start of this codepoint\n\t    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n\t    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n\t    // UTF-8 strings may not contain UTF-16 surrogate pairs\n\t    // - offset       = start of this codepoint\n\t    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n\t    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n\t    // The string is an overlong representation\n\t    // - offset       = start of this codepoint\n\t    // - badCodepoint = the computed codepoint; already bounds checked\n\t    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n\t})(Utf8ErrorReason = exports.Utf8ErrorReason || (exports.Utf8ErrorReason = {}));\n\t;\n\tfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n\t    return logger.throwArgumentError(\"invalid codepoint at offset \" + offset + \"; \" + reason, \"bytes\", bytes);\n\t}\n\tfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n\t    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n\t    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n\t        var i = 0;\n\t        for (var o = offset + 1; o < bytes.length; o++) {\n\t            if (bytes[o] >> 6 !== 0x02) {\n\t                break;\n\t            }\n\t            i++;\n\t        }\n\t        return i;\n\t    }\n\t    // This byte runs us past the end of the string, so just jump to the end\n\t    // (but the first byte was read already read and therefore skipped)\n\t    if (reason === Utf8ErrorReason.OVERRUN) {\n\t        return bytes.length - offset - 1;\n\t    }\n\t    // Nothing to skip\n\t    return 0;\n\t}\n\tfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n\t    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n\t    if (reason === Utf8ErrorReason.OVERLONG) {\n\t        output.push(badCodepoint);\n\t        return 0;\n\t    }\n\t    // Put the replacement character into the output\n\t    output.push(0xfffd);\n\t    // Otherwise, process as if ignoring errors\n\t    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n\t}\n\t// Common error handing strategies\n\texports.Utf8ErrorFuncs = Object.freeze({\n\t    error: errorFunc,\n\t    ignore: ignoreFunc,\n\t    replace: replaceFunc\n\t});\n\t// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\n\tfunction getUtf8CodePoints(bytes, onError) {\n\t    if (onError == null) {\n\t        onError = exports.Utf8ErrorFuncs.error;\n\t    }\n\t    bytes = (0, lib$1.arrayify)(bytes);\n\t    var result = [];\n\t    var i = 0;\n\t    // Invalid bytes are ignored\n\t    while (i < bytes.length) {\n\t        var c = bytes[i++];\n\t        // 0xxx xxxx\n\t        if (c >> 7 === 0) {\n\t            result.push(c);\n\t            continue;\n\t        }\n\t        // Multibyte; how many bytes left for this character?\n\t        var extraLength = null;\n\t        var overlongMask = null;\n\t        // 110x xxxx 10xx xxxx\n\t        if ((c & 0xe0) === 0xc0) {\n\t            extraLength = 1;\n\t            overlongMask = 0x7f;\n\t            // 1110 xxxx 10xx xxxx 10xx xxxx\n\t        }\n\t        else if ((c & 0xf0) === 0xe0) {\n\t            extraLength = 2;\n\t            overlongMask = 0x7ff;\n\t            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n\t        }\n\t        else if ((c & 0xf8) === 0xf0) {\n\t            extraLength = 3;\n\t            overlongMask = 0xffff;\n\t        }\n\t        else {\n\t            if ((c & 0xc0) === 0x80) {\n\t                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n\t            }\n\t            else {\n\t                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n\t            }\n\t            continue;\n\t        }\n\t        // Do we have enough bytes in our data?\n\t        if (i - 1 + extraLength >= bytes.length) {\n\t            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n\t            continue;\n\t        }\n\t        // Remove the length prefix from the char\n\t        var res = c & ((1 << (8 - extraLength - 1)) - 1);\n\t        for (var j = 0; j < extraLength; j++) {\n\t            var nextChar = bytes[i];\n\t            // Invalid continuation byte\n\t            if ((nextChar & 0xc0) != 0x80) {\n\t                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n\t                res = null;\n\t                break;\n\t            }\n\t            ;\n\t            res = (res << 6) | (nextChar & 0x3f);\n\t            i++;\n\t        }\n\t        // See above loop for invalid continuation byte\n\t        if (res === null) {\n\t            continue;\n\t        }\n\t        // Maximum code point\n\t        if (res > 0x10ffff) {\n\t            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n\t            continue;\n\t        }\n\t        // Reserved for UTF-16 surrogate halves\n\t        if (res >= 0xd800 && res <= 0xdfff) {\n\t            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n\t            continue;\n\t        }\n\t        // Check for overlong sequences (more bytes than needed)\n\t        if (res <= overlongMask) {\n\t            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n\t            continue;\n\t        }\n\t        result.push(res);\n\t    }\n\t    return result;\n\t}\n\t// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\tfunction toUtf8Bytes(str, form) {\n\t    if (form === void 0) { form = UnicodeNormalizationForm.current; }\n\t    if (form != UnicodeNormalizationForm.current) {\n\t        logger.checkNormalize();\n\t        str = str.normalize(form);\n\t    }\n\t    var result = [];\n\t    for (var i = 0; i < str.length; i++) {\n\t        var c = str.charCodeAt(i);\n\t        if (c < 0x80) {\n\t            result.push(c);\n\t        }\n\t        else if (c < 0x800) {\n\t            result.push((c >> 6) | 0xc0);\n\t            result.push((c & 0x3f) | 0x80);\n\t        }\n\t        else if ((c & 0xfc00) == 0xd800) {\n\t            i++;\n\t            var c2 = str.charCodeAt(i);\n\t            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n\t                throw new Error(\"invalid utf-8 string\");\n\t            }\n\t            // Surrogate Pair\n\t            var pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n\t            result.push((pair >> 18) | 0xf0);\n\t            result.push(((pair >> 12) & 0x3f) | 0x80);\n\t            result.push(((pair >> 6) & 0x3f) | 0x80);\n\t            result.push((pair & 0x3f) | 0x80);\n\t        }\n\t        else {\n\t            result.push((c >> 12) | 0xe0);\n\t            result.push(((c >> 6) & 0x3f) | 0x80);\n\t            result.push((c & 0x3f) | 0x80);\n\t        }\n\t    }\n\t    return (0, lib$1.arrayify)(result);\n\t}\n\texports.toUtf8Bytes = toUtf8Bytes;\n\t;\n\tfunction escapeChar(value) {\n\t    var hex = (\"0000\" + value.toString(16));\n\t    return \"\\\\u\" + hex.substring(hex.length - 4);\n\t}\n\tfunction _toEscapedUtf8String(bytes, onError) {\n\t    return '\"' + getUtf8CodePoints(bytes, onError).map(function (codePoint) {\n\t        if (codePoint < 256) {\n\t            switch (codePoint) {\n\t                case 8: return \"\\\\b\";\n\t                case 9: return \"\\\\t\";\n\t                case 10: return \"\\\\n\";\n\t                case 13: return \"\\\\r\";\n\t                case 34: return \"\\\\\\\"\";\n\t                case 92: return \"\\\\\\\\\";\n\t            }\n\t            if (codePoint >= 32 && codePoint < 127) {\n\t                return String.fromCharCode(codePoint);\n\t            }\n\t        }\n\t        if (codePoint <= 0xffff) {\n\t            return escapeChar(codePoint);\n\t        }\n\t        codePoint -= 0x10000;\n\t        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n\t    }).join(\"\") + '\"';\n\t}\n\texports._toEscapedUtf8String = _toEscapedUtf8String;\n\tfunction _toUtf8String(codePoints) {\n\t    return codePoints.map(function (codePoint) {\n\t        if (codePoint <= 0xffff) {\n\t            return String.fromCharCode(codePoint);\n\t        }\n\t        codePoint -= 0x10000;\n\t        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n\t    }).join(\"\");\n\t}\n\texports._toUtf8String = _toUtf8String;\n\tfunction toUtf8String(bytes, onError) {\n\t    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n\t}\n\texports.toUtf8String = toUtf8String;\n\tfunction toUtf8CodePoints(str, form) {\n\t    if (form === void 0) { form = UnicodeNormalizationForm.current; }\n\t    return getUtf8CodePoints(toUtf8Bytes(str, form));\n\t}\n\texports.toUtf8CodePoints = toUtf8CodePoints;\n\n\t});\n\n\tvar utf8$1 = /*@__PURE__*/getDefaultExportFromCjs(utf8);\n\n\tvar bytes32 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.parseBytes32String = exports.formatBytes32String = void 0;\n\n\n\n\tfunction formatBytes32String(text) {\n\t    // Get the bytes\n\t    var bytes = (0, utf8.toUtf8Bytes)(text);\n\t    // Check we have room for null-termination\n\t    if (bytes.length > 31) {\n\t        throw new Error(\"bytes32 string must be less than 32 bytes\");\n\t    }\n\t    // Zero-pad (implicitly null-terminates)\n\t    return (0, lib$1.hexlify)((0, lib$1.concat)([bytes, lib$7.HashZero]).slice(0, 32));\n\t}\n\texports.formatBytes32String = formatBytes32String;\n\tfunction parseBytes32String(bytes) {\n\t    var data = (0, lib$1.arrayify)(bytes);\n\t    // Must be 32 bytes with a null-termination\n\t    if (data.length !== 32) {\n\t        throw new Error(\"invalid bytes32 - not 32 bytes long\");\n\t    }\n\t    if (data[31] !== 0) {\n\t        throw new Error(\"invalid bytes32 string - no null terminator\");\n\t    }\n\t    // Find the null termination\n\t    var length = 31;\n\t    while (data[length - 1] === 0) {\n\t        length--;\n\t    }\n\t    // Determine the string value\n\t    return (0, utf8.toUtf8String)(data.slice(0, length));\n\t}\n\texports.parseBytes32String = parseBytes32String;\n\n\t});\n\n\tvar bytes32$1 = /*@__PURE__*/getDefaultExportFromCjs(bytes32);\n\n\tvar idna = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.nameprep = exports._nameprepTableC = exports._nameprepTableB2 = exports._nameprepTableA1 = void 0;\n\n\tfunction bytes2(data) {\n\t    if ((data.length % 4) !== 0) {\n\t        throw new Error(\"bad data\");\n\t    }\n\t    var result = [];\n\t    for (var i = 0; i < data.length; i += 4) {\n\t        result.push(parseInt(data.substring(i, i + 4), 16));\n\t    }\n\t    return result;\n\t}\n\tfunction createTable(data, func) {\n\t    if (!func) {\n\t        func = function (value) { return [parseInt(value, 16)]; };\n\t    }\n\t    var lo = 0;\n\t    var result = {};\n\t    data.split(\",\").forEach(function (pair) {\n\t        var comps = pair.split(\":\");\n\t        lo += parseInt(comps[0], 16);\n\t        result[lo] = func(comps[1]);\n\t    });\n\t    return result;\n\t}\n\tfunction createRangeTable(data) {\n\t    var hi = 0;\n\t    return data.split(\",\").map(function (v) {\n\t        var comps = v.split(\"-\");\n\t        if (comps.length === 1) {\n\t            comps[1] = \"0\";\n\t        }\n\t        else if (comps[1] === \"\") {\n\t            comps[1] = \"1\";\n\t        }\n\t        var lo = hi + parseInt(comps[0], 16);\n\t        hi = parseInt(comps[1], 16);\n\t        return { l: lo, h: hi };\n\t    });\n\t}\n\tfunction matchMap(value, ranges) {\n\t    var lo = 0;\n\t    for (var i = 0; i < ranges.length; i++) {\n\t        var range = ranges[i];\n\t        lo += range.l;\n\t        if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {\n\t            if (range.e && range.e.indexOf(value - lo) !== -1) {\n\t                continue;\n\t            }\n\t            return range;\n\t        }\n\t    }\n\t    return null;\n\t}\n\tvar Table_A_1_ranges = createRangeTable(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\");\n\t// @TODO: Make this relative...\n\tvar Table_B_1_flags = \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map(function (v) { return parseInt(v, 16); });\n\tvar Table_B_2_ranges = [\n\t    { h: 25, s: 32, l: 65 },\n\t    { h: 30, s: 32, e: [23], l: 127 },\n\t    { h: 54, s: 1, e: [48], l: 64, d: 2 },\n\t    { h: 14, s: 1, l: 57, d: 2 },\n\t    { h: 44, s: 1, l: 17, d: 2 },\n\t    { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },\n\t    { h: 16, s: 1, l: 68, d: 2 },\n\t    { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },\n\t    { h: 26, s: 32, e: [17], l: 435 },\n\t    { h: 22, s: 1, l: 71, d: 2 },\n\t    { h: 15, s: 80, l: 40 },\n\t    { h: 31, s: 32, l: 16 },\n\t    { h: 32, s: 1, l: 80, d: 2 },\n\t    { h: 52, s: 1, l: 42, d: 2 },\n\t    { h: 12, s: 1, l: 55, d: 2 },\n\t    { h: 40, s: 1, e: [38], l: 15, d: 2 },\n\t    { h: 14, s: 1, l: 48, d: 2 },\n\t    { h: 37, s: 48, l: 49 },\n\t    { h: 148, s: 1, l: 6351, d: 2 },\n\t    { h: 88, s: 1, l: 160, d: 2 },\n\t    { h: 15, s: 16, l: 704 },\n\t    { h: 25, s: 26, l: 854 },\n\t    { h: 25, s: 32, l: 55915 },\n\t    { h: 37, s: 40, l: 1247 },\n\t    { h: 25, s: -119711, l: 53248 },\n\t    { h: 25, s: -119763, l: 52 },\n\t    { h: 25, s: -119815, l: 52 },\n\t    { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },\n\t    { h: 25, s: -119919, l: 52 },\n\t    { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },\n\t    { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },\n\t    { h: 25, s: -120075, l: 52 },\n\t    { h: 25, s: -120127, l: 52 },\n\t    { h: 25, s: -120179, l: 52 },\n\t    { h: 25, s: -120231, l: 52 },\n\t    { h: 25, s: -120283, l: 52 },\n\t    { h: 25, s: -120335, l: 52 },\n\t    { h: 24, s: -119543, e: [17], l: 56 },\n\t    { h: 24, s: -119601, e: [17], l: 58 },\n\t    { h: 24, s: -119659, e: [17], l: 58 },\n\t    { h: 24, s: -119717, e: [17], l: 58 },\n\t    { h: 24, s: -119775, e: [17], l: 58 }\n\t];\n\tvar Table_B_2_lut_abs = createTable(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\");\n\tvar Table_B_2_lut_rel = createTable(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\");\n\tvar Table_B_2_complex = createTable(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", bytes2);\n\tvar Table_C_ranges = createRangeTable(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\n\tfunction flatten(values) {\n\t    return values.reduce(function (accum, value) {\n\t        value.forEach(function (value) { accum.push(value); });\n\t        return accum;\n\t    }, []);\n\t}\n\tfunction _nameprepTableA1(codepoint) {\n\t    return !!matchMap(codepoint, Table_A_1_ranges);\n\t}\n\texports._nameprepTableA1 = _nameprepTableA1;\n\tfunction _nameprepTableB2(codepoint) {\n\t    var range = matchMap(codepoint, Table_B_2_ranges);\n\t    if (range) {\n\t        return [codepoint + range.s];\n\t    }\n\t    var codes = Table_B_2_lut_abs[codepoint];\n\t    if (codes) {\n\t        return codes;\n\t    }\n\t    var shift = Table_B_2_lut_rel[codepoint];\n\t    if (shift) {\n\t        return [codepoint + shift[0]];\n\t    }\n\t    var complex = Table_B_2_complex[codepoint];\n\t    if (complex) {\n\t        return complex;\n\t    }\n\t    return null;\n\t}\n\texports._nameprepTableB2 = _nameprepTableB2;\n\tfunction _nameprepTableC(codepoint) {\n\t    return !!matchMap(codepoint, Table_C_ranges);\n\t}\n\texports._nameprepTableC = _nameprepTableC;\n\tfunction nameprep(value) {\n\t    // This allows platforms with incomplete normalize to bypass\n\t    // it for very basic names which the built-in toLowerCase\n\t    // will certainly handle correctly\n\t    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {\n\t        return value.toLowerCase();\n\t    }\n\t    // Get the code points (keeping the current normalization)\n\t    var codes = (0, utf8.toUtf8CodePoints)(value);\n\t    codes = flatten(codes.map(function (code) {\n\t        // Substitute Table B.1 (Maps to Nothing)\n\t        if (Table_B_1_flags.indexOf(code) >= 0) {\n\t            return [];\n\t        }\n\t        if (code >= 0xfe00 && code <= 0xfe0f) {\n\t            return [];\n\t        }\n\t        // Substitute Table B.2 (Case Folding)\n\t        var codesTableB2 = _nameprepTableB2(code);\n\t        if (codesTableB2) {\n\t            return codesTableB2;\n\t        }\n\t        // No Substitution\n\t        return [code];\n\t    }));\n\t    // Normalize using form KC\n\t    codes = (0, utf8.toUtf8CodePoints)((0, utf8._toUtf8String)(codes), utf8.UnicodeNormalizationForm.NFKC);\n\t    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9\n\t    codes.forEach(function (code) {\n\t        if (_nameprepTableC(code)) {\n\t            throw new Error(\"STRINGPREP_CONTAINS_PROHIBITED\");\n\t        }\n\t    });\n\t    // Prohibit Unassigned Code Points (Table A.1)\n\t    codes.forEach(function (code) {\n\t        if (_nameprepTableA1(code)) {\n\t            throw new Error(\"STRINGPREP_CONTAINS_UNASSIGNED\");\n\t        }\n\t    });\n\t    // IDNA extras\n\t    var name = (0, utf8._toUtf8String)(codes);\n\t    // IDNA: 4.2.3.1\n\t    if (name.substring(0, 1) === \"-\" || name.substring(2, 4) === \"--\" || name.substring(name.length - 1) === \"-\") {\n\t        throw new Error(\"invalid hyphen\");\n\t    }\n\t    // IDNA: 4.2.4\n\t    if (name.length > 63) {\n\t        throw new Error(\"too long\");\n\t    }\n\t    return name;\n\t}\n\texports.nameprep = nameprep;\n\n\t});\n\n\tvar idna$1 = /*@__PURE__*/getDefaultExportFromCjs(idna);\n\n\tvar lib$8 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.nameprep = exports.parseBytes32String = exports.formatBytes32String = exports.UnicodeNormalizationForm = exports.Utf8ErrorReason = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = void 0;\n\n\tObject.defineProperty(exports, \"formatBytes32String\", { enumerable: true, get: function () { return bytes32.formatBytes32String; } });\n\tObject.defineProperty(exports, \"parseBytes32String\", { enumerable: true, get: function () { return bytes32.parseBytes32String; } });\n\n\tObject.defineProperty(exports, \"nameprep\", { enumerable: true, get: function () { return idna.nameprep; } });\n\n\tObject.defineProperty(exports, \"_toEscapedUtf8String\", { enumerable: true, get: function () { return utf8._toEscapedUtf8String; } });\n\tObject.defineProperty(exports, \"toUtf8Bytes\", { enumerable: true, get: function () { return utf8.toUtf8Bytes; } });\n\tObject.defineProperty(exports, \"toUtf8CodePoints\", { enumerable: true, get: function () { return utf8.toUtf8CodePoints; } });\n\tObject.defineProperty(exports, \"toUtf8String\", { enumerable: true, get: function () { return utf8.toUtf8String; } });\n\tObject.defineProperty(exports, \"UnicodeNormalizationForm\", { enumerable: true, get: function () { return utf8.UnicodeNormalizationForm; } });\n\tObject.defineProperty(exports, \"Utf8ErrorFuncs\", { enumerable: true, get: function () { return utf8.Utf8ErrorFuncs; } });\n\tObject.defineProperty(exports, \"Utf8ErrorReason\", { enumerable: true, get: function () { return utf8.Utf8ErrorReason; } });\n\n\t});\n\n\tvar index$8 = /*@__PURE__*/getDefaultExportFromCjs(lib$8);\n\n\tvar string = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.StringCoder = void 0;\n\n\n\tvar StringCoder = /** @class */ (function (_super) {\n\t    __extends(StringCoder, _super);\n\t    function StringCoder(localName) {\n\t        return _super.call(this, \"string\", localName) || this;\n\t    }\n\t    StringCoder.prototype.defaultValue = function () {\n\t        return \"\";\n\t    };\n\t    StringCoder.prototype.encode = function (writer, value) {\n\t        return _super.prototype.encode.call(this, writer, (0, lib$8.toUtf8Bytes)(value));\n\t    };\n\t    StringCoder.prototype.decode = function (reader) {\n\t        return (0, lib$8.toUtf8String)(_super.prototype.decode.call(this, reader));\n\t    };\n\t    return StringCoder;\n\t}(bytes.DynamicBytesCoder));\n\texports.StringCoder = StringCoder;\n\n\t});\n\n\tvar string$1 = /*@__PURE__*/getDefaultExportFromCjs(string);\n\n\tvar tuple = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.TupleCoder = void 0;\n\n\n\tvar TupleCoder = /** @class */ (function (_super) {\n\t    __extends(TupleCoder, _super);\n\t    function TupleCoder(coders, localName) {\n\t        var _this = this;\n\t        var dynamic = false;\n\t        var types = [];\n\t        coders.forEach(function (coder) {\n\t            if (coder.dynamic) {\n\t                dynamic = true;\n\t            }\n\t            types.push(coder.type);\n\t        });\n\t        var type = (\"tuple(\" + types.join(\",\") + \")\");\n\t        _this = _super.call(this, \"tuple\", type, localName, dynamic) || this;\n\t        _this.coders = coders;\n\t        return _this;\n\t    }\n\t    TupleCoder.prototype.defaultValue = function () {\n\t        var values = [];\n\t        this.coders.forEach(function (coder) {\n\t            values.push(coder.defaultValue());\n\t        });\n\t        // We only output named properties for uniquely named coders\n\t        var uniqueNames = this.coders.reduce(function (accum, coder) {\n\t            var name = coder.localName;\n\t            if (name) {\n\t                if (!accum[name]) {\n\t                    accum[name] = 0;\n\t                }\n\t                accum[name]++;\n\t            }\n\t            return accum;\n\t        }, {});\n\t        // Add named values\n\t        this.coders.forEach(function (coder, index) {\n\t            var name = coder.localName;\n\t            if (!name || uniqueNames[name] !== 1) {\n\t                return;\n\t            }\n\t            if (name === \"length\") {\n\t                name = \"_length\";\n\t            }\n\t            if (values[name] != null) {\n\t                return;\n\t            }\n\t            values[name] = values[index];\n\t        });\n\t        return Object.freeze(values);\n\t    };\n\t    TupleCoder.prototype.encode = function (writer, value) {\n\t        return (0, array.pack)(writer, this.coders, value);\n\t    };\n\t    TupleCoder.prototype.decode = function (reader) {\n\t        return reader.coerce(this.name, (0, array.unpack)(reader, this.coders));\n\t    };\n\t    return TupleCoder;\n\t}(abstractCoder.Coder));\n\texports.TupleCoder = TupleCoder;\n\n\t});\n\n\tvar tuple$1 = /*@__PURE__*/getDefaultExportFromCjs(tuple);\n\n\tvar abiCoder = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.defaultAbiCoder = exports.AbiCoder = void 0;\n\t// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\n\n\n\n\tvar logger = new lib.Logger(_version$8.version);\n\n\n\n\n\n\n\n\n\n\n\n\tvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\n\tvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\tvar AbiCoder = /** @class */ (function () {\n\t    function AbiCoder(coerceFunc) {\n\t        var _newTarget = this.constructor;\n\t        logger.checkNew(_newTarget, AbiCoder);\n\t        (0, lib$3.defineReadOnly)(this, \"coerceFunc\", coerceFunc || null);\n\t    }\n\t    AbiCoder.prototype._getCoder = function (param) {\n\t        var _this = this;\n\t        switch (param.baseType) {\n\t            case \"address\":\n\t                return new address.AddressCoder(param.name);\n\t            case \"bool\":\n\t                return new boolean_1.BooleanCoder(param.name);\n\t            case \"string\":\n\t                return new string.StringCoder(param.name);\n\t            case \"bytes\":\n\t                return new bytes.BytesCoder(param.name);\n\t            case \"array\":\n\t                return new array.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n\t            case \"tuple\":\n\t                return new tuple.TupleCoder((param.components || []).map(function (component) {\n\t                    return _this._getCoder(component);\n\t                }), param.name);\n\t            case \"\":\n\t                return new _null.NullCoder(param.name);\n\t        }\n\t        // u?int[0-9]*\n\t        var match = param.type.match(paramTypeNumber);\n\t        if (match) {\n\t            var size = parseInt(match[2] || \"256\");\n\t            if (size === 0 || size > 256 || (size % 8) !== 0) {\n\t                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n\t            }\n\t            return new number.NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n\t        }\n\t        // bytes[0-9]+\n\t        match = param.type.match(paramTypeBytes);\n\t        if (match) {\n\t            var size = parseInt(match[1]);\n\t            if (size === 0 || size > 32) {\n\t                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n\t            }\n\t            return new fixedBytes.FixedBytesCoder(size, param.name);\n\t        }\n\t        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n\t    };\n\t    AbiCoder.prototype._getWordSize = function () { return 32; };\n\t    AbiCoder.prototype._getReader = function (data, allowLoose) {\n\t        return new abstractCoder.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n\t    };\n\t    AbiCoder.prototype._getWriter = function () {\n\t        return new abstractCoder.Writer(this._getWordSize());\n\t    };\n\t    AbiCoder.prototype.getDefaultValue = function (types) {\n\t        var _this = this;\n\t        var coders = types.map(function (type) { return _this._getCoder(fragments.ParamType.from(type)); });\n\t        var coder = new tuple.TupleCoder(coders, \"_\");\n\t        return coder.defaultValue();\n\t    };\n\t    AbiCoder.prototype.encode = function (types, values) {\n\t        var _this = this;\n\t        if (types.length !== values.length) {\n\t            logger.throwError(\"types/values length mismatch\", lib.Logger.errors.INVALID_ARGUMENT, {\n\t                count: { types: types.length, values: values.length },\n\t                value: { types: types, values: values }\n\t            });\n\t        }\n\t        var coders = types.map(function (type) { return _this._getCoder(fragments.ParamType.from(type)); });\n\t        var coder = (new tuple.TupleCoder(coders, \"_\"));\n\t        var writer = this._getWriter();\n\t        coder.encode(writer, values);\n\t        return writer.data;\n\t    };\n\t    AbiCoder.prototype.decode = function (types, data, loose) {\n\t        var _this = this;\n\t        var coders = types.map(function (type) { return _this._getCoder(fragments.ParamType.from(type)); });\n\t        var coder = new tuple.TupleCoder(coders, \"_\");\n\t        return coder.decode(this._getReader((0, lib$1.arrayify)(data), loose));\n\t    };\n\t    return AbiCoder;\n\t}());\n\texports.AbiCoder = AbiCoder;\n\texports.defaultAbiCoder = new AbiCoder();\n\n\t});\n\n\tvar abiCoder$1 = /*@__PURE__*/getDefaultExportFromCjs(abiCoder);\n\n\tvar id_1 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.id = void 0;\n\n\n\tfunction id(text) {\n\t    return (0, lib$4.keccak256)((0, lib$8.toUtf8Bytes)(text));\n\t}\n\texports.id = id;\n\n\t});\n\n\tvar id = /*@__PURE__*/getDefaultExportFromCjs(id_1);\n\n\tvar _version$g = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"hash/5.5.0\";\n\n\t});\n\n\tvar _version$h = /*@__PURE__*/getDefaultExportFromCjs(_version$g);\n\n\tvar namehash_1 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.namehash = exports.isValidName = void 0;\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$g.version);\n\tvar Zeros = new Uint8Array(32);\n\tZeros.fill(0);\n\tvar Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\n\tfunction isValidName(name) {\n\t    try {\n\t        var comps = name.split(\".\");\n\t        for (var i = 0; i < comps.length; i++) {\n\t            if ((0, lib$8.nameprep)(comps[i]).length === 0) {\n\t                throw new Error(\"empty\");\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    catch (error) { }\n\t    return false;\n\t}\n\texports.isValidName = isValidName;\n\tfunction namehash(name) {\n\t    /* istanbul ignore if */\n\t    if (typeof (name) !== \"string\") {\n\t        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n\t    }\n\t    var current = name;\n\t    var result = Zeros;\n\t    while (current.length) {\n\t        var partition = current.match(Partition);\n\t        if (partition == null || partition[2] === \"\") {\n\t            logger.throwArgumentError(\"invalid ENS address; missing component\", \"name\", name);\n\t        }\n\t        var label = (0, lib$8.toUtf8Bytes)((0, lib$8.nameprep)(partition[3]));\n\t        result = (0, lib$4.keccak256)((0, lib$1.concat)([result, (0, lib$4.keccak256)(label)]));\n\t        current = partition[2] || \"\";\n\t    }\n\t    return (0, lib$1.hexlify)(result);\n\t}\n\texports.namehash = namehash;\n\n\t});\n\n\tvar namehash = /*@__PURE__*/getDefaultExportFromCjs(namehash_1);\n\n\tvar message = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.hashMessage = exports.messagePrefix = void 0;\n\n\n\n\texports.messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\n\tfunction hashMessage(message) {\n\t    if (typeof (message) === \"string\") {\n\t        message = (0, lib$8.toUtf8Bytes)(message);\n\t    }\n\t    return (0, lib$4.keccak256)((0, lib$1.concat)([\n\t        (0, lib$8.toUtf8Bytes)(exports.messagePrefix),\n\t        (0, lib$8.toUtf8Bytes)(String(message.length)),\n\t        message\n\t    ]));\n\t}\n\texports.hashMessage = hashMessage;\n\n\t});\n\n\tvar message$1 = /*@__PURE__*/getDefaultExportFromCjs(message);\n\n\tvar typedData = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.TypedDataEncoder = void 0;\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$g.version);\n\n\tvar padding = new Uint8Array(32);\n\tpadding.fill(0);\n\tvar NegativeOne = lib$2.BigNumber.from(-1);\n\tvar Zero = lib$2.BigNumber.from(0);\n\tvar One = lib$2.BigNumber.from(1);\n\tvar MaxUint256 = lib$2.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\tfunction hexPadRight(value) {\n\t    var bytes = (0, lib$1.arrayify)(value);\n\t    var padOffset = bytes.length % 32;\n\t    if (padOffset) {\n\t        return (0, lib$1.hexConcat)([bytes, padding.slice(padOffset)]);\n\t    }\n\t    return (0, lib$1.hexlify)(bytes);\n\t}\n\tvar hexTrue = (0, lib$1.hexZeroPad)(One.toHexString(), 32);\n\tvar hexFalse = (0, lib$1.hexZeroPad)(Zero.toHexString(), 32);\n\tvar domainFieldTypes = {\n\t    name: \"string\",\n\t    version: \"string\",\n\t    chainId: \"uint256\",\n\t    verifyingContract: \"address\",\n\t    salt: \"bytes32\"\n\t};\n\tvar domainFieldNames = [\n\t    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n\t];\n\tfunction checkString(key) {\n\t    return function (value) {\n\t        if (typeof (value) !== \"string\") {\n\t            logger.throwArgumentError(\"invalid domain value for \" + JSON.stringify(key), \"domain.\" + key, value);\n\t        }\n\t        return value;\n\t    };\n\t}\n\tvar domainChecks = {\n\t    name: checkString(\"name\"),\n\t    version: checkString(\"version\"),\n\t    chainId: function (value) {\n\t        try {\n\t            return lib$2.BigNumber.from(value).toString();\n\t        }\n\t        catch (error) { }\n\t        return logger.throwArgumentError(\"invalid domain value for \\\"chainId\\\"\", \"domain.chainId\", value);\n\t    },\n\t    verifyingContract: function (value) {\n\t        try {\n\t            return (0, lib$6.getAddress)(value).toLowerCase();\n\t        }\n\t        catch (error) { }\n\t        return logger.throwArgumentError(\"invalid domain value \\\"verifyingContract\\\"\", \"domain.verifyingContract\", value);\n\t    },\n\t    salt: function (value) {\n\t        try {\n\t            var bytes = (0, lib$1.arrayify)(value);\n\t            if (bytes.length !== 32) {\n\t                throw new Error(\"bad length\");\n\t            }\n\t            return (0, lib$1.hexlify)(bytes);\n\t        }\n\t        catch (error) { }\n\t        return logger.throwArgumentError(\"invalid domain value \\\"salt\\\"\", \"domain.salt\", value);\n\t    }\n\t};\n\tfunction getBaseEncoder(type) {\n\t    // intXX and uintXX\n\t    {\n\t        var match = type.match(/^(u?)int(\\d*)$/);\n\t        if (match) {\n\t            var signed = (match[1] === \"\");\n\t            var width = parseInt(match[2] || \"256\");\n\t            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n\t                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n\t            }\n\t            var boundsUpper_1 = MaxUint256.mask(signed ? (width - 1) : width);\n\t            var boundsLower_1 = signed ? boundsUpper_1.add(One).mul(NegativeOne) : Zero;\n\t            return function (value) {\n\t                var v = lib$2.BigNumber.from(value);\n\t                if (v.lt(boundsLower_1) || v.gt(boundsUpper_1)) {\n\t                    logger.throwArgumentError(\"value out-of-bounds for \" + type, \"value\", value);\n\t                }\n\t                return (0, lib$1.hexZeroPad)(v.toTwos(256).toHexString(), 32);\n\t            };\n\t        }\n\t    }\n\t    // bytesXX\n\t    {\n\t        var match = type.match(/^bytes(\\d+)$/);\n\t        if (match) {\n\t            var width_1 = parseInt(match[1]);\n\t            if (width_1 === 0 || width_1 > 32 || match[1] !== String(width_1)) {\n\t                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n\t            }\n\t            return function (value) {\n\t                var bytes = (0, lib$1.arrayify)(value);\n\t                if (bytes.length !== width_1) {\n\t                    logger.throwArgumentError(\"invalid length for \" + type, \"value\", value);\n\t                }\n\t                return hexPadRight(value);\n\t            };\n\t        }\n\t    }\n\t    switch (type) {\n\t        case \"address\": return function (value) {\n\t            return (0, lib$1.hexZeroPad)((0, lib$6.getAddress)(value), 32);\n\t        };\n\t        case \"bool\": return function (value) {\n\t            return ((!value) ? hexFalse : hexTrue);\n\t        };\n\t        case \"bytes\": return function (value) {\n\t            return (0, lib$4.keccak256)(value);\n\t        };\n\t        case \"string\": return function (value) {\n\t            return (0, id_1.id)(value);\n\t        };\n\t    }\n\t    return null;\n\t}\n\tfunction encodeType(name, fields) {\n\t    return name + \"(\" + fields.map(function (_a) {\n\t        var name = _a.name, type = _a.type;\n\t        return (type + \" \" + name);\n\t    }).join(\",\") + \")\";\n\t}\n\tvar TypedDataEncoder = /** @class */ (function () {\n\t    function TypedDataEncoder(types) {\n\t        (0, lib$3.defineReadOnly)(this, \"types\", Object.freeze((0, lib$3.deepCopy)(types)));\n\t        (0, lib$3.defineReadOnly)(this, \"_encoderCache\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"_types\", {});\n\t        // Link struct types to their direct child structs\n\t        var links = {};\n\t        // Link structs to structs which contain them as a child\n\t        var parents = {};\n\t        // Link all subtypes within a given struct\n\t        var subtypes = {};\n\t        Object.keys(types).forEach(function (type) {\n\t            links[type] = {};\n\t            parents[type] = [];\n\t            subtypes[type] = {};\n\t        });\n\t        var _loop_1 = function (name_1) {\n\t            var uniqueNames = {};\n\t            types[name_1].forEach(function (field) {\n\t                // Check each field has a unique name\n\t                if (uniqueNames[field.name]) {\n\t                    logger.throwArgumentError(\"duplicate variable name \" + JSON.stringify(field.name) + \" in \" + JSON.stringify(name_1), \"types\", types);\n\t                }\n\t                uniqueNames[field.name] = true;\n\t                // Get the base type (drop any array specifiers)\n\t                var baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n\t                if (baseType === name_1) {\n\t                    logger.throwArgumentError(\"circular type reference to \" + JSON.stringify(baseType), \"types\", types);\n\t                }\n\t                // Is this a base encoding type?\n\t                var encoder = getBaseEncoder(baseType);\n\t                if (encoder) {\n\t                    return;\n\t                }\n\t                if (!parents[baseType]) {\n\t                    logger.throwArgumentError(\"unknown type \" + JSON.stringify(baseType), \"types\", types);\n\t                }\n\t                // Add linkage\n\t                parents[baseType].push(name_1);\n\t                links[name_1][baseType] = true;\n\t            });\n\t        };\n\t        for (var name_1 in types) {\n\t            _loop_1(name_1);\n\t        }\n\t        // Deduce the primary type\n\t        var primaryTypes = Object.keys(parents).filter(function (n) { return (parents[n].length === 0); });\n\t        if (primaryTypes.length === 0) {\n\t            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n\t        }\n\t        else if (primaryTypes.length > 1) {\n\t            logger.throwArgumentError(\"ambiguous primary types or unused types: \" + primaryTypes.map(function (t) { return (JSON.stringify(t)); }).join(\", \"), \"types\", types);\n\t        }\n\t        (0, lib$3.defineReadOnly)(this, \"primaryType\", primaryTypes[0]);\n\t        // Check for circular type references\n\t        function checkCircular(type, found) {\n\t            if (found[type]) {\n\t                logger.throwArgumentError(\"circular type reference to \" + JSON.stringify(type), \"types\", types);\n\t            }\n\t            found[type] = true;\n\t            Object.keys(links[type]).forEach(function (child) {\n\t                if (!parents[child]) {\n\t                    return;\n\t                }\n\t                // Recursively check children\n\t                checkCircular(child, found);\n\t                // Mark all ancestors as having this decendant\n\t                Object.keys(found).forEach(function (subtype) {\n\t                    subtypes[subtype][child] = true;\n\t                });\n\t            });\n\t            delete found[type];\n\t        }\n\t        checkCircular(this.primaryType, {});\n\t        // Compute each fully describe type\n\t        for (var name_2 in subtypes) {\n\t            var st = Object.keys(subtypes[name_2]);\n\t            st.sort();\n\t            this._types[name_2] = encodeType(name_2, types[name_2]) + st.map(function (t) { return encodeType(t, types[t]); }).join(\"\");\n\t        }\n\t    }\n\t    TypedDataEncoder.prototype.getEncoder = function (type) {\n\t        var encoder = this._encoderCache[type];\n\t        if (!encoder) {\n\t            encoder = this._encoderCache[type] = this._getEncoder(type);\n\t        }\n\t        return encoder;\n\t    };\n\t    TypedDataEncoder.prototype._getEncoder = function (type) {\n\t        var _this = this;\n\t        // Basic encoder type (address, bool, uint256, etc)\n\t        {\n\t            var encoder = getBaseEncoder(type);\n\t            if (encoder) {\n\t                return encoder;\n\t            }\n\t        }\n\t        // Array\n\t        var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n\t        if (match) {\n\t            var subtype_1 = match[1];\n\t            var subEncoder_1 = this.getEncoder(subtype_1);\n\t            var length_1 = parseInt(match[3]);\n\t            return function (value) {\n\t                if (length_1 >= 0 && value.length !== length_1) {\n\t                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n\t                }\n\t                var result = value.map(subEncoder_1);\n\t                if (_this._types[subtype_1]) {\n\t                    result = result.map(lib$4.keccak256);\n\t                }\n\t                return (0, lib$4.keccak256)((0, lib$1.hexConcat)(result));\n\t            };\n\t        }\n\t        // Struct\n\t        var fields = this.types[type];\n\t        if (fields) {\n\t            var encodedType_1 = (0, id_1.id)(this._types[type]);\n\t            return function (value) {\n\t                var values = fields.map(function (_a) {\n\t                    var name = _a.name, type = _a.type;\n\t                    var result = _this.getEncoder(type)(value[name]);\n\t                    if (_this._types[type]) {\n\t                        return (0, lib$4.keccak256)(result);\n\t                    }\n\t                    return result;\n\t                });\n\t                values.unshift(encodedType_1);\n\t                return (0, lib$1.hexConcat)(values);\n\t            };\n\t        }\n\t        return logger.throwArgumentError(\"unknown type: \" + type, \"type\", type);\n\t    };\n\t    TypedDataEncoder.prototype.encodeType = function (name) {\n\t        var result = this._types[name];\n\t        if (!result) {\n\t            logger.throwArgumentError(\"unknown type: \" + JSON.stringify(name), \"name\", name);\n\t        }\n\t        return result;\n\t    };\n\t    TypedDataEncoder.prototype.encodeData = function (type, value) {\n\t        return this.getEncoder(type)(value);\n\t    };\n\t    TypedDataEncoder.prototype.hashStruct = function (name, value) {\n\t        return (0, lib$4.keccak256)(this.encodeData(name, value));\n\t    };\n\t    TypedDataEncoder.prototype.encode = function (value) {\n\t        return this.encodeData(this.primaryType, value);\n\t    };\n\t    TypedDataEncoder.prototype.hash = function (value) {\n\t        return this.hashStruct(this.primaryType, value);\n\t    };\n\t    TypedDataEncoder.prototype._visit = function (type, value, callback) {\n\t        var _this = this;\n\t        // Basic encoder type (address, bool, uint256, etc)\n\t        {\n\t            var encoder = getBaseEncoder(type);\n\t            if (encoder) {\n\t                return callback(type, value);\n\t            }\n\t        }\n\t        // Array\n\t        var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n\t        if (match) {\n\t            var subtype_2 = match[1];\n\t            var length_2 = parseInt(match[3]);\n\t            if (length_2 >= 0 && value.length !== length_2) {\n\t                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n\t            }\n\t            return value.map(function (v) { return _this._visit(subtype_2, v, callback); });\n\t        }\n\t        // Struct\n\t        var fields = this.types[type];\n\t        if (fields) {\n\t            return fields.reduce(function (accum, _a) {\n\t                var name = _a.name, type = _a.type;\n\t                accum[name] = _this._visit(type, value[name], callback);\n\t                return accum;\n\t            }, {});\n\t        }\n\t        return logger.throwArgumentError(\"unknown type: \" + type, \"type\", type);\n\t    };\n\t    TypedDataEncoder.prototype.visit = function (value, callback) {\n\t        return this._visit(this.primaryType, value, callback);\n\t    };\n\t    TypedDataEncoder.from = function (types) {\n\t        return new TypedDataEncoder(types);\n\t    };\n\t    TypedDataEncoder.getPrimaryType = function (types) {\n\t        return TypedDataEncoder.from(types).primaryType;\n\t    };\n\t    TypedDataEncoder.hashStruct = function (name, types, value) {\n\t        return TypedDataEncoder.from(types).hashStruct(name, value);\n\t    };\n\t    TypedDataEncoder.hashDomain = function (domain) {\n\t        var domainFields = [];\n\t        for (var name_3 in domain) {\n\t            var type = domainFieldTypes[name_3];\n\t            if (!type) {\n\t                logger.throwArgumentError(\"invalid typed-data domain key: \" + JSON.stringify(name_3), \"domain\", domain);\n\t            }\n\t            domainFields.push({ name: name_3, type: type });\n\t        }\n\t        domainFields.sort(function (a, b) {\n\t            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n\t        });\n\t        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n\t    };\n\t    TypedDataEncoder.encode = function (domain, types, value) {\n\t        return (0, lib$1.hexConcat)([\n\t            \"0x1901\",\n\t            TypedDataEncoder.hashDomain(domain),\n\t            TypedDataEncoder.from(types).hash(value)\n\t        ]);\n\t    };\n\t    TypedDataEncoder.hash = function (domain, types, value) {\n\t        return (0, lib$4.keccak256)(TypedDataEncoder.encode(domain, types, value));\n\t    };\n\t    // Replaces all address types with ENS names with their looked up address\n\t    TypedDataEncoder.resolveNames = function (domain, types, value, resolveName) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var ensCache, encoder, _a, _b, _i, name_4, _c, _d;\n\t            return __generator(this, function (_e) {\n\t                switch (_e.label) {\n\t                    case 0:\n\t                        // Make a copy to isolate it from the object passed in\n\t                        domain = (0, lib$3.shallowCopy)(domain);\n\t                        ensCache = {};\n\t                        // Do we need to look up the domain's verifyingContract?\n\t                        if (domain.verifyingContract && !(0, lib$1.isHexString)(domain.verifyingContract, 20)) {\n\t                            ensCache[domain.verifyingContract] = \"0x\";\n\t                        }\n\t                        encoder = TypedDataEncoder.from(types);\n\t                        // Get a list of all the addresses\n\t                        encoder.visit(value, function (type, value) {\n\t                            if (type === \"address\" && !(0, lib$1.isHexString)(value, 20)) {\n\t                                ensCache[value] = \"0x\";\n\t                            }\n\t                            return value;\n\t                        });\n\t                        _a = [];\n\t                        for (_b in ensCache)\n\t                            _a.push(_b);\n\t                        _i = 0;\n\t                        _e.label = 1;\n\t                    case 1:\n\t                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n\t                        name_4 = _a[_i];\n\t                        _c = ensCache;\n\t                        _d = name_4;\n\t                        return [4 /*yield*/, resolveName(name_4)];\n\t                    case 2:\n\t                        _c[_d] = _e.sent();\n\t                        _e.label = 3;\n\t                    case 3:\n\t                        _i++;\n\t                        return [3 /*break*/, 1];\n\t                    case 4:\n\t                        // Replace the domain verifyingContract if needed\n\t                        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n\t                            domain.verifyingContract = ensCache[domain.verifyingContract];\n\t                        }\n\t                        // Replace all ENS names with their address\n\t                        value = encoder.visit(value, function (type, value) {\n\t                            if (type === \"address\" && ensCache[value]) {\n\t                                return ensCache[value];\n\t                            }\n\t                            return value;\n\t                        });\n\t                        return [2 /*return*/, { domain: domain, value: value }];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    TypedDataEncoder.getPayload = function (domain, types, value) {\n\t        // Validate the domain fields\n\t        TypedDataEncoder.hashDomain(domain);\n\t        // Derive the EIP712Domain Struct reference type\n\t        var domainValues = {};\n\t        var domainTypes = [];\n\t        domainFieldNames.forEach(function (name) {\n\t            var value = domain[name];\n\t            if (value == null) {\n\t                return;\n\t            }\n\t            domainValues[name] = domainChecks[name](value);\n\t            domainTypes.push({ name: name, type: domainFieldTypes[name] });\n\t        });\n\t        var encoder = TypedDataEncoder.from(types);\n\t        var typesWithDomain = (0, lib$3.shallowCopy)(types);\n\t        if (typesWithDomain.EIP712Domain) {\n\t            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n\t        }\n\t        else {\n\t            typesWithDomain.EIP712Domain = domainTypes;\n\t        }\n\t        // Validate the data structures and types\n\t        encoder.encode(value);\n\t        return {\n\t            types: typesWithDomain,\n\t            domain: domainValues,\n\t            primaryType: encoder.primaryType,\n\t            message: encoder.visit(value, function (type, value) {\n\t                // bytes\n\t                if (type.match(/^bytes(\\d*)/)) {\n\t                    return (0, lib$1.hexlify)((0, lib$1.arrayify)(value));\n\t                }\n\t                // uint or int\n\t                if (type.match(/^u?int/)) {\n\t                    return lib$2.BigNumber.from(value).toString();\n\t                }\n\t                switch (type) {\n\t                    case \"address\":\n\t                        return value.toLowerCase();\n\t                    case \"bool\":\n\t                        return !!value;\n\t                    case \"string\":\n\t                        if (typeof (value) !== \"string\") {\n\t                            logger.throwArgumentError(\"invalid string\", \"value\", value);\n\t                        }\n\t                        return value;\n\t                }\n\t                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n\t            })\n\t        };\n\t    };\n\t    return TypedDataEncoder;\n\t}());\n\texports.TypedDataEncoder = TypedDataEncoder;\n\n\t});\n\n\tvar typedData$1 = /*@__PURE__*/getDefaultExportFromCjs(typedData);\n\n\tvar lib$9 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports._TypedDataEncoder = exports.hashMessage = exports.messagePrefix = exports.isValidName = exports.namehash = exports.id = void 0;\n\n\tObject.defineProperty(exports, \"id\", { enumerable: true, get: function () { return id_1.id; } });\n\n\tObject.defineProperty(exports, \"isValidName\", { enumerable: true, get: function () { return namehash_1.isValidName; } });\n\tObject.defineProperty(exports, \"namehash\", { enumerable: true, get: function () { return namehash_1.namehash; } });\n\n\tObject.defineProperty(exports, \"hashMessage\", { enumerable: true, get: function () { return message.hashMessage; } });\n\tObject.defineProperty(exports, \"messagePrefix\", { enumerable: true, get: function () { return message.messagePrefix; } });\n\n\tObject.defineProperty(exports, \"_TypedDataEncoder\", { enumerable: true, get: function () { return typedData.TypedDataEncoder; } });\n\n\t});\n\n\tvar index$9 = /*@__PURE__*/getDefaultExportFromCjs(lib$9);\n\n\tvar _interface = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;\n\n\n\n\n\n\n\n\n\tObject.defineProperty(exports, \"checkResultErrors\", { enumerable: true, get: function () { return abstractCoder.checkResultErrors; } });\n\n\n\n\tvar logger = new lib.Logger(_version$8.version);\n\tvar LogDescription = /** @class */ (function (_super) {\n\t    __extends(LogDescription, _super);\n\t    function LogDescription() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    return LogDescription;\n\t}(lib$3.Description));\n\texports.LogDescription = LogDescription;\n\tvar TransactionDescription = /** @class */ (function (_super) {\n\t    __extends(TransactionDescription, _super);\n\t    function TransactionDescription() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    return TransactionDescription;\n\t}(lib$3.Description));\n\texports.TransactionDescription = TransactionDescription;\n\tvar ErrorDescription = /** @class */ (function (_super) {\n\t    __extends(ErrorDescription, _super);\n\t    function ErrorDescription() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    return ErrorDescription;\n\t}(lib$3.Description));\n\texports.ErrorDescription = ErrorDescription;\n\tvar Indexed = /** @class */ (function (_super) {\n\t    __extends(Indexed, _super);\n\t    function Indexed() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    Indexed.isIndexed = function (value) {\n\t        return !!(value && value._isIndexed);\n\t    };\n\t    return Indexed;\n\t}(lib$3.Description));\n\texports.Indexed = Indexed;\n\tvar BuiltinErrors = {\n\t    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n\t    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n\t};\n\tfunction wrapAccessError(property, error) {\n\t    var wrap = new Error(\"deferred error during ABI decoding triggered accessing \" + property);\n\t    wrap.error = error;\n\t    return wrap;\n\t}\n\t/*\n\tfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n\t    params.reduce((accum, param) => {\n\t        if (param.name) {\n\t            if (accum[param.name]) {\n\t                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n\t            }\n\t            accum[param.name] = true;\n\t        }\n\t        return accum;\n\t    }, <{ [ name: string ]: boolean }>{ });\n\t}\n\t*/\n\tvar Interface = /** @class */ (function () {\n\t    function Interface(fragments$1) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, Interface);\n\t        var abi = [];\n\t        if (typeof (fragments$1) === \"string\") {\n\t            abi = JSON.parse(fragments$1);\n\t        }\n\t        else {\n\t            abi = fragments$1;\n\t        }\n\t        (0, lib$3.defineReadOnly)(this, \"fragments\", abi.map(function (fragment) {\n\t            return fragments.Fragment.from(fragment);\n\t        }).filter(function (fragment) { return (fragment != null); }));\n\t        (0, lib$3.defineReadOnly)(this, \"_abiCoder\", (0, lib$3.getStatic)(_newTarget, \"getAbiCoder\")());\n\t        (0, lib$3.defineReadOnly)(this, \"functions\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"errors\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"events\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"structs\", {});\n\t        // Add all fragments by their signature\n\t        this.fragments.forEach(function (fragment) {\n\t            var bucket = null;\n\t            switch (fragment.type) {\n\t                case \"constructor\":\n\t                    if (_this.deploy) {\n\t                        logger.warn(\"duplicate definition - constructor\");\n\t                        return;\n\t                    }\n\t                    //checkNames(fragment, \"input\", fragment.inputs);\n\t                    (0, lib$3.defineReadOnly)(_this, \"deploy\", fragment);\n\t                    return;\n\t                case \"function\":\n\t                    //checkNames(fragment, \"input\", fragment.inputs);\n\t                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n\t                    bucket = _this.functions;\n\t                    break;\n\t                case \"event\":\n\t                    //checkNames(fragment, \"input\", fragment.inputs);\n\t                    bucket = _this.events;\n\t                    break;\n\t                case \"error\":\n\t                    bucket = _this.errors;\n\t                    break;\n\t                default:\n\t                    return;\n\t            }\n\t            var signature = fragment.format();\n\t            if (bucket[signature]) {\n\t                logger.warn(\"duplicate definition - \" + signature);\n\t                return;\n\t            }\n\t            bucket[signature] = fragment;\n\t        });\n\t        // If we do not have a constructor add a default\n\t        if (!this.deploy) {\n\t            (0, lib$3.defineReadOnly)(this, \"deploy\", fragments.ConstructorFragment.from({\n\t                payable: false,\n\t                type: \"constructor\"\n\t            }));\n\t        }\n\t        (0, lib$3.defineReadOnly)(this, \"_isInterface\", true);\n\t    }\n\t    Interface.prototype.format = function (format) {\n\t        if (!format) {\n\t            format = fragments.FormatTypes.full;\n\t        }\n\t        if (format === fragments.FormatTypes.sighash) {\n\t            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n\t        }\n\t        var abi = this.fragments.map(function (fragment) { return fragment.format(format); });\n\t        // We need to re-bundle the JSON fragments a bit\n\t        if (format === fragments.FormatTypes.json) {\n\t            return JSON.stringify(abi.map(function (j) { return JSON.parse(j); }));\n\t        }\n\t        return abi;\n\t    };\n\t    // Sub-classes can override these to handle other blockchains\n\t    Interface.getAbiCoder = function () {\n\t        return abiCoder.defaultAbiCoder;\n\t    };\n\t    Interface.getAddress = function (address) {\n\t        return (0, lib$6.getAddress)(address);\n\t    };\n\t    Interface.getSighash = function (fragment) {\n\t        return (0, lib$1.hexDataSlice)((0, lib$9.id)(fragment.format()), 0, 4);\n\t    };\n\t    Interface.getEventTopic = function (eventFragment) {\n\t        return (0, lib$9.id)(eventFragment.format());\n\t    };\n\t    // Find a function definition by any means necessary (unless it is ambiguous)\n\t    Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {\n\t        if ((0, lib$1.isHexString)(nameOrSignatureOrSighash)) {\n\t            for (var name_1 in this.functions) {\n\t                if (nameOrSignatureOrSighash === this.getSighash(name_1)) {\n\t                    return this.functions[name_1];\n\t                }\n\t            }\n\t            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n\t        }\n\t        // It is a bare name, look up the function (will return null if ambiguous)\n\t        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n\t            var name_2 = nameOrSignatureOrSighash.trim();\n\t            var matching = Object.keys(this.functions).filter(function (f) { return (f.split(\"(\" /* fix:) */)[0] === name_2); });\n\t            if (matching.length === 0) {\n\t                logger.throwArgumentError(\"no matching function\", \"name\", name_2);\n\t            }\n\t            else if (matching.length > 1) {\n\t                logger.throwArgumentError(\"multiple matching functions\", \"name\", name_2);\n\t            }\n\t            return this.functions[matching[0]];\n\t        }\n\t        // Normalize the signature and lookup the function\n\t        var result = this.functions[fragments.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\t        if (!result) {\n\t            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n\t        }\n\t        return result;\n\t    };\n\t    // Find an event definition by any means necessary (unless it is ambiguous)\n\t    Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {\n\t        if ((0, lib$1.isHexString)(nameOrSignatureOrTopic)) {\n\t            var topichash = nameOrSignatureOrTopic.toLowerCase();\n\t            for (var name_3 in this.events) {\n\t                if (topichash === this.getEventTopic(name_3)) {\n\t                    return this.events[name_3];\n\t                }\n\t            }\n\t            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n\t        }\n\t        // It is a bare name, look up the function (will return null if ambiguous)\n\t        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n\t            var name_4 = nameOrSignatureOrTopic.trim();\n\t            var matching = Object.keys(this.events).filter(function (f) { return (f.split(\"(\" /* fix:) */)[0] === name_4); });\n\t            if (matching.length === 0) {\n\t                logger.throwArgumentError(\"no matching event\", \"name\", name_4);\n\t            }\n\t            else if (matching.length > 1) {\n\t                logger.throwArgumentError(\"multiple matching events\", \"name\", name_4);\n\t            }\n\t            return this.events[matching[0]];\n\t        }\n\t        // Normalize the signature and lookup the function\n\t        var result = this.events[fragments.EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\t        if (!result) {\n\t            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n\t        }\n\t        return result;\n\t    };\n\t    // Find a function definition by any means necessary (unless it is ambiguous)\n\t    Interface.prototype.getError = function (nameOrSignatureOrSighash) {\n\t        if ((0, lib$1.isHexString)(nameOrSignatureOrSighash)) {\n\t            var getSighash = (0, lib$3.getStatic)(this.constructor, \"getSighash\");\n\t            for (var name_5 in this.errors) {\n\t                var error = this.errors[name_5];\n\t                if (nameOrSignatureOrSighash === getSighash(error)) {\n\t                    return this.errors[name_5];\n\t                }\n\t            }\n\t            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n\t        }\n\t        // It is a bare name, look up the function (will return null if ambiguous)\n\t        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n\t            var name_6 = nameOrSignatureOrSighash.trim();\n\t            var matching = Object.keys(this.errors).filter(function (f) { return (f.split(\"(\" /* fix:) */)[0] === name_6); });\n\t            if (matching.length === 0) {\n\t                logger.throwArgumentError(\"no matching error\", \"name\", name_6);\n\t            }\n\t            else if (matching.length > 1) {\n\t                logger.throwArgumentError(\"multiple matching errors\", \"name\", name_6);\n\t            }\n\t            return this.errors[matching[0]];\n\t        }\n\t        // Normalize the signature and lookup the function\n\t        var result = this.errors[fragments.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\t        if (!result) {\n\t            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n\t        }\n\t        return result;\n\t    };\n\t    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\t    Interface.prototype.getSighash = function (fragment) {\n\t        if (typeof (fragment) === \"string\") {\n\t            try {\n\t                fragment = this.getFunction(fragment);\n\t            }\n\t            catch (error) {\n\t                try {\n\t                    fragment = this.getError(fragment);\n\t                }\n\t                catch (_) {\n\t                    throw error;\n\t                }\n\t            }\n\t        }\n\t        return (0, lib$3.getStatic)(this.constructor, \"getSighash\")(fragment);\n\t    };\n\t    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\t    Interface.prototype.getEventTopic = function (eventFragment) {\n\t        if (typeof (eventFragment) === \"string\") {\n\t            eventFragment = this.getEvent(eventFragment);\n\t        }\n\t        return (0, lib$3.getStatic)(this.constructor, \"getEventTopic\")(eventFragment);\n\t    };\n\t    Interface.prototype._decodeParams = function (params, data) {\n\t        return this._abiCoder.decode(params, data);\n\t    };\n\t    Interface.prototype._encodeParams = function (params, values) {\n\t        return this._abiCoder.encode(params, values);\n\t    };\n\t    Interface.prototype.encodeDeploy = function (values) {\n\t        return this._encodeParams(this.deploy.inputs, values || []);\n\t    };\n\t    Interface.prototype.decodeErrorResult = function (fragment, data) {\n\t        if (typeof (fragment) === \"string\") {\n\t            fragment = this.getError(fragment);\n\t        }\n\t        var bytes = (0, lib$1.arrayify)(data);\n\t        if ((0, lib$1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n\t            logger.throwArgumentError(\"data signature does not match error \" + fragment.name + \".\", \"data\", (0, lib$1.hexlify)(bytes));\n\t        }\n\t        return this._decodeParams(fragment.inputs, bytes.slice(4));\n\t    };\n\t    Interface.prototype.encodeErrorResult = function (fragment, values) {\n\t        if (typeof (fragment) === \"string\") {\n\t            fragment = this.getError(fragment);\n\t        }\n\t        return (0, lib$1.hexlify)((0, lib$1.concat)([\n\t            this.getSighash(fragment),\n\t            this._encodeParams(fragment.inputs, values || [])\n\t        ]));\n\t    };\n\t    // Decode the data for a function call (e.g. tx.data)\n\t    Interface.prototype.decodeFunctionData = function (functionFragment, data) {\n\t        if (typeof (functionFragment) === \"string\") {\n\t            functionFragment = this.getFunction(functionFragment);\n\t        }\n\t        var bytes = (0, lib$1.arrayify)(data);\n\t        if ((0, lib$1.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n\t            logger.throwArgumentError(\"data signature does not match function \" + functionFragment.name + \".\", \"data\", (0, lib$1.hexlify)(bytes));\n\t        }\n\t        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n\t    };\n\t    // Encode the data for a function call (e.g. tx.data)\n\t    Interface.prototype.encodeFunctionData = function (functionFragment, values) {\n\t        if (typeof (functionFragment) === \"string\") {\n\t            functionFragment = this.getFunction(functionFragment);\n\t        }\n\t        return (0, lib$1.hexlify)((0, lib$1.concat)([\n\t            this.getSighash(functionFragment),\n\t            this._encodeParams(functionFragment.inputs, values || [])\n\t        ]));\n\t    };\n\t    // Decode the result from a function call (e.g. from eth_call)\n\t    Interface.prototype.decodeFunctionResult = function (functionFragment, data) {\n\t        if (typeof (functionFragment) === \"string\") {\n\t            functionFragment = this.getFunction(functionFragment);\n\t        }\n\t        var bytes = (0, lib$1.arrayify)(data);\n\t        var reason = null;\n\t        var errorArgs = null;\n\t        var errorName = null;\n\t        var errorSignature = null;\n\t        switch (bytes.length % this._abiCoder._getWordSize()) {\n\t            case 0:\n\t                try {\n\t                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n\t                }\n\t                catch (error) { }\n\t                break;\n\t            case 4: {\n\t                var selector = (0, lib$1.hexlify)(bytes.slice(0, 4));\n\t                var builtin = BuiltinErrors[selector];\n\t                if (builtin) {\n\t                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n\t                    errorName = builtin.name;\n\t                    errorSignature = builtin.signature;\n\t                    if (builtin.reason) {\n\t                        reason = errorArgs[0];\n\t                    }\n\t                }\n\t                else {\n\t                    try {\n\t                        var error = this.getError(selector);\n\t                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n\t                        errorName = error.name;\n\t                        errorSignature = error.format();\n\t                    }\n\t                    catch (error) {\n\t                        console.log(error);\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t        }\n\t        return logger.throwError(\"call revert exception\", lib.Logger.errors.CALL_EXCEPTION, {\n\t            method: functionFragment.format(),\n\t            errorArgs: errorArgs,\n\t            errorName: errorName,\n\t            errorSignature: errorSignature,\n\t            reason: reason\n\t        });\n\t    };\n\t    // Encode the result for a function call (e.g. for eth_call)\n\t    Interface.prototype.encodeFunctionResult = function (functionFragment, values) {\n\t        if (typeof (functionFragment) === \"string\") {\n\t            functionFragment = this.getFunction(functionFragment);\n\t        }\n\t        return (0, lib$1.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));\n\t    };\n\t    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\t    Interface.prototype.encodeFilterTopics = function (eventFragment, values) {\n\t        var _this = this;\n\t        if (typeof (eventFragment) === \"string\") {\n\t            eventFragment = this.getEvent(eventFragment);\n\t        }\n\t        if (values.length > eventFragment.inputs.length) {\n\t            logger.throwError(\"too many arguments for \" + eventFragment.format(), lib.Logger.errors.UNEXPECTED_ARGUMENT, {\n\t                argument: \"values\",\n\t                value: values\n\t            });\n\t        }\n\t        var topics = [];\n\t        if (!eventFragment.anonymous) {\n\t            topics.push(this.getEventTopic(eventFragment));\n\t        }\n\t        var encodeTopic = function (param, value) {\n\t            if (param.type === \"string\") {\n\t                return (0, lib$9.id)(value);\n\t            }\n\t            else if (param.type === \"bytes\") {\n\t                return (0, lib$4.keccak256)((0, lib$1.hexlify)(value));\n\t            }\n\t            // Check addresses are valid\n\t            if (param.type === \"address\") {\n\t                _this._abiCoder.encode([\"address\"], [value]);\n\t            }\n\t            return (0, lib$1.hexZeroPad)((0, lib$1.hexlify)(value), 32);\n\t        };\n\t        values.forEach(function (value, index) {\n\t            var param = eventFragment.inputs[index];\n\t            if (!param.indexed) {\n\t                if (value != null) {\n\t                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n\t                }\n\t                return;\n\t            }\n\t            if (value == null) {\n\t                topics.push(null);\n\t            }\n\t            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n\t                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n\t            }\n\t            else if (Array.isArray(value)) {\n\t                topics.push(value.map(function (value) { return encodeTopic(param, value); }));\n\t            }\n\t            else {\n\t                topics.push(encodeTopic(param, value));\n\t            }\n\t        });\n\t        // Trim off trailing nulls\n\t        while (topics.length && topics[topics.length - 1] === null) {\n\t            topics.pop();\n\t        }\n\t        return topics;\n\t    };\n\t    Interface.prototype.encodeEventLog = function (eventFragment, values) {\n\t        var _this = this;\n\t        if (typeof (eventFragment) === \"string\") {\n\t            eventFragment = this.getEvent(eventFragment);\n\t        }\n\t        var topics = [];\n\t        var dataTypes = [];\n\t        var dataValues = [];\n\t        if (!eventFragment.anonymous) {\n\t            topics.push(this.getEventTopic(eventFragment));\n\t        }\n\t        if (values.length !== eventFragment.inputs.length) {\n\t            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n\t        }\n\t        eventFragment.inputs.forEach(function (param, index) {\n\t            var value = values[index];\n\t            if (param.indexed) {\n\t                if (param.type === \"string\") {\n\t                    topics.push((0, lib$9.id)(value));\n\t                }\n\t                else if (param.type === \"bytes\") {\n\t                    topics.push((0, lib$4.keccak256)(value));\n\t                }\n\t                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n\t                    // @TODO\n\t                    throw new Error(\"not implemented\");\n\t                }\n\t                else {\n\t                    topics.push(_this._abiCoder.encode([param.type], [value]));\n\t                }\n\t            }\n\t            else {\n\t                dataTypes.push(param);\n\t                dataValues.push(value);\n\t            }\n\t        });\n\t        return {\n\t            data: this._abiCoder.encode(dataTypes, dataValues),\n\t            topics: topics\n\t        };\n\t    };\n\t    // Decode a filter for the event and the search criteria\n\t    Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {\n\t        if (typeof (eventFragment) === \"string\") {\n\t            eventFragment = this.getEvent(eventFragment);\n\t        }\n\t        if (topics != null && !eventFragment.anonymous) {\n\t            var topicHash = this.getEventTopic(eventFragment);\n\t            if (!(0, lib$1.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n\t                logger.throwError(\"fragment/topic mismatch\", lib.Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n\t            }\n\t            topics = topics.slice(1);\n\t        }\n\t        var indexed = [];\n\t        var nonIndexed = [];\n\t        var dynamic = [];\n\t        eventFragment.inputs.forEach(function (param, index) {\n\t            if (param.indexed) {\n\t                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n\t                    indexed.push(fragments.ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n\t                    dynamic.push(true);\n\t                }\n\t                else {\n\t                    indexed.push(param);\n\t                    dynamic.push(false);\n\t                }\n\t            }\n\t            else {\n\t                nonIndexed.push(param);\n\t                dynamic.push(false);\n\t            }\n\t        });\n\t        var resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, (0, lib$1.concat)(topics)) : null;\n\t        var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\t        var result = [];\n\t        var nonIndexedIndex = 0, indexedIndex = 0;\n\t        eventFragment.inputs.forEach(function (param, index) {\n\t            if (param.indexed) {\n\t                if (resultIndexed == null) {\n\t                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\t                }\n\t                else if (dynamic[index]) {\n\t                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\t                }\n\t                else {\n\t                    try {\n\t                        result[index] = resultIndexed[indexedIndex++];\n\t                    }\n\t                    catch (error) {\n\t                        result[index] = error;\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                try {\n\t                    result[index] = resultNonIndexed[nonIndexedIndex++];\n\t                }\n\t                catch (error) {\n\t                    result[index] = error;\n\t                }\n\t            }\n\t            // Add the keyword argument if named and safe\n\t            if (param.name && result[param.name] == null) {\n\t                var value_1 = result[index];\n\t                // Make error named values throw on access\n\t                if (value_1 instanceof Error) {\n\t                    Object.defineProperty(result, param.name, {\n\t                        enumerable: true,\n\t                        get: function () { throw wrapAccessError(\"property \" + JSON.stringify(param.name), value_1); }\n\t                    });\n\t                }\n\t                else {\n\t                    result[param.name] = value_1;\n\t                }\n\t            }\n\t        });\n\t        var _loop_1 = function (i) {\n\t            var value = result[i];\n\t            if (value instanceof Error) {\n\t                Object.defineProperty(result, i, {\n\t                    enumerable: true,\n\t                    get: function () { throw wrapAccessError(\"index \" + i, value); }\n\t                });\n\t            }\n\t        };\n\t        // Make all error indexed values throw on access\n\t        for (var i = 0; i < result.length; i++) {\n\t            _loop_1(i);\n\t        }\n\t        return Object.freeze(result);\n\t    };\n\t    // Given a transaction, find the matching function fragment (if any) and\n\t    // determine all its properties and call parameters\n\t    Interface.prototype.parseTransaction = function (tx) {\n\t        var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\t        if (!fragment) {\n\t            return null;\n\t        }\n\t        return new TransactionDescription({\n\t            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n\t            functionFragment: fragment,\n\t            name: fragment.name,\n\t            signature: fragment.format(),\n\t            sighash: this.getSighash(fragment),\n\t            value: lib$2.BigNumber.from(tx.value || \"0\"),\n\t        });\n\t    };\n\t    // @TODO\n\t    //parseCallResult(data: BytesLike): ??\n\t    // Given an event log, find the matching event fragment (if any) and\n\t    // determine all its properties and values\n\t    Interface.prototype.parseLog = function (log) {\n\t        var fragment = this.getEvent(log.topics[0]);\n\t        if (!fragment || fragment.anonymous) {\n\t            return null;\n\t        }\n\t        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n\t        //        Probably not, because just because it is the only event in the ABI does\n\t        //        not mean we have the full ABI; maybe just a fragment?\n\t        return new LogDescription({\n\t            eventFragment: fragment,\n\t            name: fragment.name,\n\t            signature: fragment.format(),\n\t            topic: this.getEventTopic(fragment),\n\t            args: this.decodeEventLog(fragment, log.data, log.topics)\n\t        });\n\t    };\n\t    Interface.prototype.parseError = function (data) {\n\t        var hexData = (0, lib$1.hexlify)(data);\n\t        var fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n\t        if (!fragment) {\n\t            return null;\n\t        }\n\t        return new ErrorDescription({\n\t            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n\t            errorFragment: fragment,\n\t            name: fragment.name,\n\t            signature: fragment.format(),\n\t            sighash: this.getSighash(fragment),\n\t        });\n\t    };\n\t    /*\n\t    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n\t        if (Interface.isInterface(value)) {\n\t            return value;\n\t        }\n\t        if (typeof(value) === \"string\") {\n\t            return new Interface(JSON.parse(value));\n\t        }\n\t        return new Interface(value);\n\t    }\n\t    */\n\t    Interface.isInterface = function (value) {\n\t        return !!(value && value._isInterface);\n\t    };\n\t    return Interface;\n\t}());\n\texports.Interface = Interface;\n\n\t});\n\n\tvar _interface$1 = /*@__PURE__*/getDefaultExportFromCjs(_interface);\n\n\tvar lib$a = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = exports.Indexed = exports.Interface = exports.defaultAbiCoder = exports.AbiCoder = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = void 0;\n\n\tObject.defineProperty(exports, \"ConstructorFragment\", { enumerable: true, get: function () { return fragments.ConstructorFragment; } });\n\tObject.defineProperty(exports, \"ErrorFragment\", { enumerable: true, get: function () { return fragments.ErrorFragment; } });\n\tObject.defineProperty(exports, \"EventFragment\", { enumerable: true, get: function () { return fragments.EventFragment; } });\n\tObject.defineProperty(exports, \"FormatTypes\", { enumerable: true, get: function () { return fragments.FormatTypes; } });\n\tObject.defineProperty(exports, \"Fragment\", { enumerable: true, get: function () { return fragments.Fragment; } });\n\tObject.defineProperty(exports, \"FunctionFragment\", { enumerable: true, get: function () { return fragments.FunctionFragment; } });\n\tObject.defineProperty(exports, \"ParamType\", { enumerable: true, get: function () { return fragments.ParamType; } });\n\n\tObject.defineProperty(exports, \"AbiCoder\", { enumerable: true, get: function () { return abiCoder.AbiCoder; } });\n\tObject.defineProperty(exports, \"defaultAbiCoder\", { enumerable: true, get: function () { return abiCoder.defaultAbiCoder; } });\n\n\tObject.defineProperty(exports, \"checkResultErrors\", { enumerable: true, get: function () { return _interface.checkResultErrors; } });\n\tObject.defineProperty(exports, \"Indexed\", { enumerable: true, get: function () { return _interface.Indexed; } });\n\tObject.defineProperty(exports, \"Interface\", { enumerable: true, get: function () { return _interface.Interface; } });\n\tObject.defineProperty(exports, \"LogDescription\", { enumerable: true, get: function () { return _interface.LogDescription; } });\n\tObject.defineProperty(exports, \"TransactionDescription\", { enumerable: true, get: function () { return _interface.TransactionDescription; } });\n\n\t});\n\n\tvar index$a = /*@__PURE__*/getDefaultExportFromCjs(lib$a);\n\n\tvar _version$i = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"abstract-provider/5.5.1\";\n\n\t});\n\n\tvar _version$j = /*@__PURE__*/getDefaultExportFromCjs(_version$i);\n\n\tvar lib$b = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Provider = exports.TransactionOrderForkEvent = exports.TransactionForkEvent = exports.BlockForkEvent = exports.ForkEvent = void 0;\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$i.version);\n\t;\n\t;\n\t//export type CallTransactionable = {\n\t//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n\t//};\n\tvar ForkEvent = /** @class */ (function (_super) {\n\t    __extends(ForkEvent, _super);\n\t    function ForkEvent() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    ForkEvent.isForkEvent = function (value) {\n\t        return !!(value && value._isForkEvent);\n\t    };\n\t    return ForkEvent;\n\t}(lib$3.Description));\n\texports.ForkEvent = ForkEvent;\n\tvar BlockForkEvent = /** @class */ (function (_super) {\n\t    __extends(BlockForkEvent, _super);\n\t    function BlockForkEvent(blockHash, expiry) {\n\t        var _this = this;\n\t        if (!(0, lib$1.isHexString)(blockHash, 32)) {\n\t            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n\t        }\n\t        _this = _super.call(this, {\n\t            _isForkEvent: true,\n\t            _isBlockForkEvent: true,\n\t            expiry: (expiry || 0),\n\t            blockHash: blockHash\n\t        }) || this;\n\t        return _this;\n\t    }\n\t    return BlockForkEvent;\n\t}(ForkEvent));\n\texports.BlockForkEvent = BlockForkEvent;\n\tvar TransactionForkEvent = /** @class */ (function (_super) {\n\t    __extends(TransactionForkEvent, _super);\n\t    function TransactionForkEvent(hash, expiry) {\n\t        var _this = this;\n\t        if (!(0, lib$1.isHexString)(hash, 32)) {\n\t            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n\t        }\n\t        _this = _super.call(this, {\n\t            _isForkEvent: true,\n\t            _isTransactionForkEvent: true,\n\t            expiry: (expiry || 0),\n\t            hash: hash\n\t        }) || this;\n\t        return _this;\n\t    }\n\t    return TransactionForkEvent;\n\t}(ForkEvent));\n\texports.TransactionForkEvent = TransactionForkEvent;\n\tvar TransactionOrderForkEvent = /** @class */ (function (_super) {\n\t    __extends(TransactionOrderForkEvent, _super);\n\t    function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {\n\t        var _this = this;\n\t        if (!(0, lib$1.isHexString)(beforeHash, 32)) {\n\t            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n\t        }\n\t        if (!(0, lib$1.isHexString)(afterHash, 32)) {\n\t            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n\t        }\n\t        _this = _super.call(this, {\n\t            _isForkEvent: true,\n\t            _isTransactionOrderForkEvent: true,\n\t            expiry: (expiry || 0),\n\t            beforeHash: beforeHash,\n\t            afterHash: afterHash\n\t        }) || this;\n\t        return _this;\n\t    }\n\t    return TransactionOrderForkEvent;\n\t}(ForkEvent));\n\texports.TransactionOrderForkEvent = TransactionOrderForkEvent;\n\t///////////////////////////////\n\t// Exported Abstracts\n\tvar Provider = /** @class */ (function () {\n\t    function Provider() {\n\t        var _newTarget = this.constructor;\n\t        logger.checkAbstract(_newTarget, Provider);\n\t        (0, lib$3.defineReadOnly)(this, \"_isProvider\", true);\n\t    }\n\t    Provider.prototype.getFeeData = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var _a, block, gasPrice, maxFeePerGas, maxPriorityFeePerGas;\n\t            return __generator(this, function (_b) {\n\t                switch (_b.label) {\n\t                    case 0: return [4 /*yield*/, (0, lib$3.resolveProperties)({\n\t                            block: this.getBlock(\"latest\"),\n\t                            gasPrice: this.getGasPrice().catch(function (error) {\n\t                                // @TODO: Why is this now failing on Calaveras?\n\t                                //console.log(error);\n\t                                return null;\n\t                            })\n\t                        })];\n\t                    case 1:\n\t                        _a = _b.sent(), block = _a.block, gasPrice = _a.gasPrice;\n\t                        maxFeePerGas = null, maxPriorityFeePerGas = null;\n\t                        if (block && block.baseFeePerGas) {\n\t                            // We may want to compute this more accurately in the future,\n\t                            // using the formula \"check if the base fee is correct\".\n\t                            // See: https://eips.ethereum.org/EIPS/eip-1559\n\t                            maxPriorityFeePerGas = lib$2.BigNumber.from(\"2500000000\");\n\t                            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n\t                        }\n\t                        return [2 /*return*/, { maxFeePerGas: maxFeePerGas, maxPriorityFeePerGas: maxPriorityFeePerGas, gasPrice: gasPrice }];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    // Alias for \"on\"\n\t    Provider.prototype.addListener = function (eventName, listener) {\n\t        return this.on(eventName, listener);\n\t    };\n\t    // Alias for \"off\"\n\t    Provider.prototype.removeListener = function (eventName, listener) {\n\t        return this.off(eventName, listener);\n\t    };\n\t    Provider.isProvider = function (value) {\n\t        return !!(value && value._isProvider);\n\t    };\n\t    return Provider;\n\t}());\n\texports.Provider = Provider;\n\n\t});\n\n\tvar index$b = /*@__PURE__*/getDefaultExportFromCjs(lib$b);\n\n\tvar _version$k = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"abstract-signer/5.5.0\";\n\n\t});\n\n\tvar _version$l = /*@__PURE__*/getDefaultExportFromCjs(_version$k);\n\n\tvar lib$c = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.VoidSigner = exports.Signer = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$k.version);\n\tvar allowedTransactionKeys = [\n\t    \"accessList\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n\t];\n\tvar forwardErrors = [\n\t    lib.Logger.errors.INSUFFICIENT_FUNDS,\n\t    lib.Logger.errors.NONCE_EXPIRED,\n\t    lib.Logger.errors.REPLACEMENT_UNDERPRICED,\n\t];\n\t;\n\t;\n\tvar Signer = /** @class */ (function () {\n\t    ///////////////////\n\t    // Sub-classes MUST call super\n\t    function Signer() {\n\t        var _newTarget = this.constructor;\n\t        logger.checkAbstract(_newTarget, Signer);\n\t        (0, lib$3.defineReadOnly)(this, \"_isSigner\", true);\n\t    }\n\t    ///////////////////\n\t    // Sub-classes MAY override these\n\t    Signer.prototype.getBalance = function (blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"getBalance\");\n\t                        return [4 /*yield*/, this.provider.getBalance(this.getAddress(), blockTag)];\n\t                    case 1: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Signer.prototype.getTransactionCount = function (blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"getTransactionCount\");\n\t                        return [4 /*yield*/, this.provider.getTransactionCount(this.getAddress(), blockTag)];\n\t                    case 1: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n\t    Signer.prototype.estimateGas = function (transaction) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var tx;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"estimateGas\");\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)(this.checkTransaction(transaction))];\n\t                    case 1:\n\t                        tx = _a.sent();\n\t                        return [4 /*yield*/, this.provider.estimateGas(tx)];\n\t                    case 2: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    // Populates \"from\" if unspecified, and calls with the transaction\n\t    Signer.prototype.call = function (transaction, blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var tx;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"call\");\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)(this.checkTransaction(transaction))];\n\t                    case 1:\n\t                        tx = _a.sent();\n\t                        return [4 /*yield*/, this.provider.call(tx, blockTag)];\n\t                    case 2: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    // Populates all fields in a transaction, signs it and sends it to the network\n\t    Signer.prototype.sendTransaction = function (transaction) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var tx, signedTx;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"sendTransaction\");\n\t                        return [4 /*yield*/, this.populateTransaction(transaction)];\n\t                    case 1:\n\t                        tx = _a.sent();\n\t                        return [4 /*yield*/, this.signTransaction(tx)];\n\t                    case 2:\n\t                        signedTx = _a.sent();\n\t                        return [4 /*yield*/, this.provider.sendTransaction(signedTx)];\n\t                    case 3: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Signer.prototype.getChainId = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var network;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"getChainId\");\n\t                        return [4 /*yield*/, this.provider.getNetwork()];\n\t                    case 1:\n\t                        network = _a.sent();\n\t                        return [2 /*return*/, network.chainId];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Signer.prototype.getGasPrice = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"getGasPrice\");\n\t                        return [4 /*yield*/, this.provider.getGasPrice()];\n\t                    case 1: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Signer.prototype.getFeeData = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"getFeeData\");\n\t                        return [4 /*yield*/, this.provider.getFeeData()];\n\t                    case 1: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Signer.prototype.resolveName = function (name) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        this._checkProvider(\"resolveName\");\n\t                        return [4 /*yield*/, this.provider.resolveName(name)];\n\t                    case 1: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    // Checks a transaction does not contain invalid keys and if\n\t    // no \"from\" is provided, populates it.\n\t    // - does NOT require a provider\n\t    // - adds \"from\" is not present\n\t    // - returns a COPY (safe to mutate the result)\n\t    // By default called from: (overriding these prevents it)\n\t    //   - call\n\t    //   - estimateGas\n\t    //   - populateTransaction (and therefor sendTransaction)\n\t    Signer.prototype.checkTransaction = function (transaction) {\n\t        for (var key in transaction) {\n\t            if (allowedTransactionKeys.indexOf(key) === -1) {\n\t                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n\t            }\n\t        }\n\t        var tx = (0, lib$3.shallowCopy)(transaction);\n\t        if (tx.from == null) {\n\t            tx.from = this.getAddress();\n\t        }\n\t        else {\n\t            // Make sure any provided address matches this signer\n\t            tx.from = Promise.all([\n\t                Promise.resolve(tx.from),\n\t                this.getAddress()\n\t            ]).then(function (result) {\n\t                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n\t                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n\t                }\n\t                return result[0];\n\t            });\n\t        }\n\t        return tx;\n\t    };\n\t    // Populates ALL keys for a transaction and checks that \"from\" matches\n\t    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n\t    // By default called from: (overriding these prevents it)\n\t    //   - sendTransaction\n\t    //\n\t    // Notes:\n\t    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n\t    Signer.prototype.populateTransaction = function (transaction) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var tx, hasEip1559, feeData, gasPrice;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, (0, lib$3.resolveProperties)(this.checkTransaction(transaction))];\n\t                    case 1:\n\t                        tx = _a.sent();\n\t                        if (tx.to != null) {\n\t                            tx.to = Promise.resolve(tx.to).then(function (to) { return __awaiter(_this, void 0, void 0, function () {\n\t                                var address;\n\t                                return __generator(this, function (_a) {\n\t                                    switch (_a.label) {\n\t                                        case 0:\n\t                                            if (to == null) {\n\t                                                return [2 /*return*/, null];\n\t                                            }\n\t                                            return [4 /*yield*/, this.resolveName(to)];\n\t                                        case 1:\n\t                                            address = _a.sent();\n\t                                            if (address == null) {\n\t                                                logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n\t                                            }\n\t                                            return [2 /*return*/, address];\n\t                                    }\n\t                                });\n\t                            }); });\n\t                            // Prevent this error from causing an UnhandledPromiseException\n\t                            tx.to.catch(function (error) { });\n\t                        }\n\t                        hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n\t                        if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n\t                            logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n\t                        }\n\t                        else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n\t                            logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n\t                        }\n\t                        if (!((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null))) return [3 /*break*/, 2];\n\t                        // Fully-formed EIP-1559 transaction (skip getFeeData)\n\t                        tx.type = 2;\n\t                        return [3 /*break*/, 5];\n\t                    case 2:\n\t                        if (!(tx.type === 0 || tx.type === 1)) return [3 /*break*/, 3];\n\t                        // Explicit Legacy or EIP-2930 transaction\n\t                        // Populate missing gasPrice\n\t                        if (tx.gasPrice == null) {\n\t                            tx.gasPrice = this.getGasPrice();\n\t                        }\n\t                        return [3 /*break*/, 5];\n\t                    case 3: return [4 /*yield*/, this.getFeeData()];\n\t                    case 4:\n\t                        feeData = _a.sent();\n\t                        if (tx.type == null) {\n\t                            // We need to auto-detect the intended type of this transaction...\n\t                            if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n\t                                // The network supports EIP-1559!\n\t                                // Upgrade transaction from null to eip-1559\n\t                                tx.type = 2;\n\t                                if (tx.gasPrice != null) {\n\t                                    gasPrice = tx.gasPrice;\n\t                                    delete tx.gasPrice;\n\t                                    tx.maxFeePerGas = gasPrice;\n\t                                    tx.maxPriorityFeePerGas = gasPrice;\n\t                                }\n\t                                else {\n\t                                    // Populate missing fee data\n\t                                    if (tx.maxFeePerGas == null) {\n\t                                        tx.maxFeePerGas = feeData.maxFeePerGas;\n\t                                    }\n\t                                    if (tx.maxPriorityFeePerGas == null) {\n\t                                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n\t                                    }\n\t                                }\n\t                            }\n\t                            else if (feeData.gasPrice != null) {\n\t                                // Network doesn't support EIP-1559...\n\t                                // ...but they are trying to use EIP-1559 properties\n\t                                if (hasEip1559) {\n\t                                    logger.throwError(\"network does not support EIP-1559\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                        operation: \"populateTransaction\"\n\t                                    });\n\t                                }\n\t                                // Populate missing fee data\n\t                                if (tx.gasPrice == null) {\n\t                                    tx.gasPrice = feeData.gasPrice;\n\t                                }\n\t                                // Explicitly set untyped transaction to legacy\n\t                                tx.type = 0;\n\t                            }\n\t                            else {\n\t                                // getFeeData has failed us.\n\t                                logger.throwError(\"failed to get consistent fee data\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                    operation: \"signer.getFeeData\"\n\t                                });\n\t                            }\n\t                        }\n\t                        else if (tx.type === 2) {\n\t                            // Explicitly using EIP-1559\n\t                            // Populate missing fee data\n\t                            if (tx.maxFeePerGas == null) {\n\t                                tx.maxFeePerGas = feeData.maxFeePerGas;\n\t                            }\n\t                            if (tx.maxPriorityFeePerGas == null) {\n\t                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n\t                            }\n\t                        }\n\t                        _a.label = 5;\n\t                    case 5:\n\t                        if (tx.nonce == null) {\n\t                            tx.nonce = this.getTransactionCount(\"pending\");\n\t                        }\n\t                        if (tx.gasLimit == null) {\n\t                            tx.gasLimit = this.estimateGas(tx).catch(function (error) {\n\t                                if (forwardErrors.indexOf(error.code) >= 0) {\n\t                                    throw error;\n\t                                }\n\t                                return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n\t                                    error: error,\n\t                                    tx: tx\n\t                                });\n\t                            });\n\t                        }\n\t                        if (tx.chainId == null) {\n\t                            tx.chainId = this.getChainId();\n\t                        }\n\t                        else {\n\t                            tx.chainId = Promise.all([\n\t                                Promise.resolve(tx.chainId),\n\t                                this.getChainId()\n\t                            ]).then(function (results) {\n\t                                if (results[1] !== 0 && results[0] !== results[1]) {\n\t                                    logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n\t                                }\n\t                                return results[0];\n\t                            });\n\t                        }\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)(tx)];\n\t                    case 6: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    ///////////////////\n\t    // Sub-classes SHOULD leave these alone\n\t    Signer.prototype._checkProvider = function (operation) {\n\t        if (!this.provider) {\n\t            logger.throwError(\"missing provider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: (operation || \"_checkProvider\")\n\t            });\n\t        }\n\t    };\n\t    Signer.isSigner = function (value) {\n\t        return !!(value && value._isSigner);\n\t    };\n\t    return Signer;\n\t}());\n\texports.Signer = Signer;\n\tvar VoidSigner = /** @class */ (function (_super) {\n\t    __extends(VoidSigner, _super);\n\t    function VoidSigner(address, provider) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, VoidSigner);\n\t        _this = _super.call(this) || this;\n\t        (0, lib$3.defineReadOnly)(_this, \"address\", address);\n\t        (0, lib$3.defineReadOnly)(_this, \"provider\", provider || null);\n\t        return _this;\n\t    }\n\t    VoidSigner.prototype.getAddress = function () {\n\t        return Promise.resolve(this.address);\n\t    };\n\t    VoidSigner.prototype._fail = function (message, operation) {\n\t        return Promise.resolve().then(function () {\n\t            logger.throwError(message, lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n\t        });\n\t    };\n\t    VoidSigner.prototype.signMessage = function (message) {\n\t        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n\t    };\n\t    VoidSigner.prototype.signTransaction = function (transaction) {\n\t        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n\t    };\n\t    VoidSigner.prototype._signTypedData = function (domain, types, value) {\n\t        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n\t    };\n\t    VoidSigner.prototype.connect = function (provider) {\n\t        return new VoidSigner(this.address, provider);\n\t    };\n\t    return VoidSigner;\n\t}(Signer));\n\texports.VoidSigner = VoidSigner;\n\n\t});\n\n\tvar index$c = /*@__PURE__*/getDefaultExportFromCjs(lib$c);\n\n\tvar minimalisticAssert = assert;\n\n\tfunction assert(val, msg) {\n\t  if (!val)\n\t    throw new Error(msg || 'Assertion failed');\n\t}\n\n\tassert.equal = function assertEqual(l, r, msg) {\n\t  if (l != r)\n\t    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n\t};\n\n\tvar utils_1 = createCommonjsModule(function (module, exports) {\n\t'use strict';\n\n\tvar utils = exports;\n\n\tfunction toArray(msg, enc) {\n\t  if (Array.isArray(msg))\n\t    return msg.slice();\n\t  if (!msg)\n\t    return [];\n\t  var res = [];\n\t  if (typeof msg !== 'string') {\n\t    for (var i = 0; i < msg.length; i++)\n\t      res[i] = msg[i] | 0;\n\t    return res;\n\t  }\n\t  if (enc === 'hex') {\n\t    msg = msg.replace(/[^a-z0-9]+/ig, '');\n\t    if (msg.length % 2 !== 0)\n\t      msg = '0' + msg;\n\t    for (var i = 0; i < msg.length; i += 2)\n\t      res.push(parseInt(msg[i] + msg[i + 1], 16));\n\t  } else {\n\t    for (var i = 0; i < msg.length; i++) {\n\t      var c = msg.charCodeAt(i);\n\t      var hi = c >> 8;\n\t      var lo = c & 0xff;\n\t      if (hi)\n\t        res.push(hi, lo);\n\t      else\n\t        res.push(lo);\n\t    }\n\t  }\n\t  return res;\n\t}\n\tutils.toArray = toArray;\n\n\tfunction zero2(word) {\n\t  if (word.length === 1)\n\t    return '0' + word;\n\t  else\n\t    return word;\n\t}\n\tutils.zero2 = zero2;\n\n\tfunction toHex(msg) {\n\t  var res = '';\n\t  for (var i = 0; i < msg.length; i++)\n\t    res += zero2(msg[i].toString(16));\n\t  return res;\n\t}\n\tutils.toHex = toHex;\n\n\tutils.encode = function encode(arr, enc) {\n\t  if (enc === 'hex')\n\t    return toHex(arr);\n\t  else\n\t    return arr;\n\t};\n\t});\n\n\tvar utils_1$1 = createCommonjsModule(function (module, exports) {\n\t'use strict';\n\n\tvar utils = exports;\n\n\n\n\n\tutils.assert = minimalisticAssert;\n\tutils.toArray = utils_1.toArray;\n\tutils.zero2 = utils_1.zero2;\n\tutils.toHex = utils_1.toHex;\n\tutils.encode = utils_1.encode;\n\n\t// Represent num in a w-NAF form\n\tfunction getNAF(num, w, bits) {\n\t  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n\t  naf.fill(0);\n\n\t  var ws = 1 << (w + 1);\n\t  var k = num.clone();\n\n\t  for (var i = 0; i < naf.length; i++) {\n\t    var z;\n\t    var mod = k.andln(ws - 1);\n\t    if (k.isOdd()) {\n\t      if (mod > (ws >> 1) - 1)\n\t        z = (ws >> 1) - mod;\n\t      else\n\t        z = mod;\n\t      k.isubn(z);\n\t    } else {\n\t      z = 0;\n\t    }\n\n\t    naf[i] = z;\n\t    k.iushrn(1);\n\t  }\n\n\t  return naf;\n\t}\n\tutils.getNAF = getNAF;\n\n\t// Represent k1, k2 in a Joint Sparse Form\n\tfunction getJSF(k1, k2) {\n\t  var jsf = [\n\t    [],\n\t    [],\n\t  ];\n\n\t  k1 = k1.clone();\n\t  k2 = k2.clone();\n\t  var d1 = 0;\n\t  var d2 = 0;\n\t  var m8;\n\t  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\t    // First phase\n\t    var m14 = (k1.andln(3) + d1) & 3;\n\t    var m24 = (k2.andln(3) + d2) & 3;\n\t    if (m14 === 3)\n\t      m14 = -1;\n\t    if (m24 === 3)\n\t      m24 = -1;\n\t    var u1;\n\t    if ((m14 & 1) === 0) {\n\t      u1 = 0;\n\t    } else {\n\t      m8 = (k1.andln(7) + d1) & 7;\n\t      if ((m8 === 3 || m8 === 5) && m24 === 2)\n\t        u1 = -m14;\n\t      else\n\t        u1 = m14;\n\t    }\n\t    jsf[0].push(u1);\n\n\t    var u2;\n\t    if ((m24 & 1) === 0) {\n\t      u2 = 0;\n\t    } else {\n\t      m8 = (k2.andln(7) + d2) & 7;\n\t      if ((m8 === 3 || m8 === 5) && m14 === 2)\n\t        u2 = -m24;\n\t      else\n\t        u2 = m24;\n\t    }\n\t    jsf[1].push(u2);\n\n\t    // Second phase\n\t    if (2 * d1 === u1 + 1)\n\t      d1 = 1 - d1;\n\t    if (2 * d2 === u2 + 1)\n\t      d2 = 1 - d2;\n\t    k1.iushrn(1);\n\t    k2.iushrn(1);\n\t  }\n\n\t  return jsf;\n\t}\n\tutils.getJSF = getJSF;\n\n\tfunction cachedProperty(obj, name, computer) {\n\t  var key = '_' + name;\n\t  obj.prototype[name] = function cachedProperty() {\n\t    return this[key] !== undefined ? this[key] :\n\t      this[key] = computer.call(this);\n\t  };\n\t}\n\tutils.cachedProperty = cachedProperty;\n\n\tfunction parseBytes(bytes) {\n\t  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n\t    bytes;\n\t}\n\tutils.parseBytes = parseBytes;\n\n\tfunction intFromLE(bytes) {\n\t  return new bn(bytes, 'hex', 'le');\n\t}\n\tutils.intFromLE = intFromLE;\n\t});\n\n\t'use strict';\n\n\n\n\tvar getNAF = utils_1$1.getNAF;\n\tvar getJSF = utils_1$1.getJSF;\n\tvar assert$1 = utils_1$1.assert;\n\n\tfunction BaseCurve(type, conf) {\n\t  this.type = type;\n\t  this.p = new bn(conf.p, 16);\n\n\t  // Use Montgomery, when there is no fast reduction for the prime\n\t  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);\n\n\t  // Useful for many curves\n\t  this.zero = new bn(0).toRed(this.red);\n\t  this.one = new bn(1).toRed(this.red);\n\t  this.two = new bn(2).toRed(this.red);\n\n\t  // Curve configuration, optional\n\t  this.n = conf.n && new bn(conf.n, 16);\n\t  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n\t  // Temporary arrays\n\t  this._wnafT1 = new Array(4);\n\t  this._wnafT2 = new Array(4);\n\t  this._wnafT3 = new Array(4);\n\t  this._wnafT4 = new Array(4);\n\n\t  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n\t  // Generalized Greg Maxwell's trick\n\t  var adjustCount = this.n && this.p.div(this.n);\n\t  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n\t    this.redN = null;\n\t  } else {\n\t    this._maxwellTrick = true;\n\t    this.redN = this.n.toRed(this.red);\n\t  }\n\t}\n\tvar base = BaseCurve;\n\n\tBaseCurve.prototype.point = function point() {\n\t  throw new Error('Not implemented');\n\t};\n\n\tBaseCurve.prototype.validate = function validate() {\n\t  throw new Error('Not implemented');\n\t};\n\n\tBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n\t  assert$1(p.precomputed);\n\t  var doubles = p._getDoubles();\n\n\t  var naf = getNAF(k, 1, this._bitLength);\n\t  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n\t  I /= 3;\n\n\t  // Translate into more windowed form\n\t  var repr = [];\n\t  var j;\n\t  var nafW;\n\t  for (j = 0; j < naf.length; j += doubles.step) {\n\t    nafW = 0;\n\t    for (var l = j + doubles.step - 1; l >= j; l--)\n\t      nafW = (nafW << 1) + naf[l];\n\t    repr.push(nafW);\n\t  }\n\n\t  var a = this.jpoint(null, null, null);\n\t  var b = this.jpoint(null, null, null);\n\t  for (var i = I; i > 0; i--) {\n\t    for (j = 0; j < repr.length; j++) {\n\t      nafW = repr[j];\n\t      if (nafW === i)\n\t        b = b.mixedAdd(doubles.points[j]);\n\t      else if (nafW === -i)\n\t        b = b.mixedAdd(doubles.points[j].neg());\n\t    }\n\t    a = a.add(b);\n\t  }\n\t  return a.toP();\n\t};\n\n\tBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n\t  var w = 4;\n\n\t  // Precompute window\n\t  var nafPoints = p._getNAFPoints(w);\n\t  w = nafPoints.wnd;\n\t  var wnd = nafPoints.points;\n\n\t  // Get NAF form\n\t  var naf = getNAF(k, w, this._bitLength);\n\n\t  // Add `this`*(N+1) for every w-NAF index\n\t  var acc = this.jpoint(null, null, null);\n\t  for (var i = naf.length - 1; i >= 0; i--) {\n\t    // Count zeroes\n\t    for (var l = 0; i >= 0 && naf[i] === 0; i--)\n\t      l++;\n\t    if (i >= 0)\n\t      l++;\n\t    acc = acc.dblp(l);\n\n\t    if (i < 0)\n\t      break;\n\t    var z = naf[i];\n\t    assert$1(z !== 0);\n\t    if (p.type === 'affine') {\n\t      // J +- P\n\t      if (z > 0)\n\t        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n\t      else\n\t        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n\t    } else {\n\t      // J +- J\n\t      if (z > 0)\n\t        acc = acc.add(wnd[(z - 1) >> 1]);\n\t      else\n\t        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n\t    }\n\t  }\n\t  return p.type === 'affine' ? acc.toP() : acc;\n\t};\n\n\tBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n\t  points,\n\t  coeffs,\n\t  len,\n\t  jacobianResult) {\n\t  var wndWidth = this._wnafT1;\n\t  var wnd = this._wnafT2;\n\t  var naf = this._wnafT3;\n\n\t  // Fill all arrays\n\t  var max = 0;\n\t  var i;\n\t  var j;\n\t  var p;\n\t  for (i = 0; i < len; i++) {\n\t    p = points[i];\n\t    var nafPoints = p._getNAFPoints(defW);\n\t    wndWidth[i] = nafPoints.wnd;\n\t    wnd[i] = nafPoints.points;\n\t  }\n\n\t  // Comb small window NAFs\n\t  for (i = len - 1; i >= 1; i -= 2) {\n\t    var a = i - 1;\n\t    var b = i;\n\t    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n\t      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n\t      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n\t      max = Math.max(naf[a].length, max);\n\t      max = Math.max(naf[b].length, max);\n\t      continue;\n\t    }\n\n\t    var comb = [\n\t      points[a], /* 1 */\n\t      null, /* 3 */\n\t      null, /* 5 */\n\t      points[b], /* 7 */\n\t    ];\n\n\t    // Try to avoid Projective points, if possible\n\t    if (points[a].y.cmp(points[b].y) === 0) {\n\t      comb[1] = points[a].add(points[b]);\n\t      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n\t    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n\t      comb[1] = points[a].toJ().mixedAdd(points[b]);\n\t      comb[2] = points[a].add(points[b].neg());\n\t    } else {\n\t      comb[1] = points[a].toJ().mixedAdd(points[b]);\n\t      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n\t    }\n\n\t    var index = [\n\t      -3, /* -1 -1 */\n\t      -1, /* -1 0 */\n\t      -5, /* -1 1 */\n\t      -7, /* 0 -1 */\n\t      0, /* 0 0 */\n\t      7, /* 0 1 */\n\t      5, /* 1 -1 */\n\t      1, /* 1 0 */\n\t      3,  /* 1 1 */\n\t    ];\n\n\t    var jsf = getJSF(coeffs[a], coeffs[b]);\n\t    max = Math.max(jsf[0].length, max);\n\t    naf[a] = new Array(max);\n\t    naf[b] = new Array(max);\n\t    for (j = 0; j < max; j++) {\n\t      var ja = jsf[0][j] | 0;\n\t      var jb = jsf[1][j] | 0;\n\n\t      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n\t      naf[b][j] = 0;\n\t      wnd[a] = comb;\n\t    }\n\t  }\n\n\t  var acc = this.jpoint(null, null, null);\n\t  var tmp = this._wnafT4;\n\t  for (i = max; i >= 0; i--) {\n\t    var k = 0;\n\n\t    while (i >= 0) {\n\t      var zero = true;\n\t      for (j = 0; j < len; j++) {\n\t        tmp[j] = naf[j][i] | 0;\n\t        if (tmp[j] !== 0)\n\t          zero = false;\n\t      }\n\t      if (!zero)\n\t        break;\n\t      k++;\n\t      i--;\n\t    }\n\t    if (i >= 0)\n\t      k++;\n\t    acc = acc.dblp(k);\n\t    if (i < 0)\n\t      break;\n\n\t    for (j = 0; j < len; j++) {\n\t      var z = tmp[j];\n\t      p;\n\t      if (z === 0)\n\t        continue;\n\t      else if (z > 0)\n\t        p = wnd[j][(z - 1) >> 1];\n\t      else if (z < 0)\n\t        p = wnd[j][(-z - 1) >> 1].neg();\n\n\t      if (p.type === 'affine')\n\t        acc = acc.mixedAdd(p);\n\t      else\n\t        acc = acc.add(p);\n\t    }\n\t  }\n\t  // Zeroify references\n\t  for (i = 0; i < len; i++)\n\t    wnd[i] = null;\n\n\t  if (jacobianResult)\n\t    return acc;\n\t  else\n\t    return acc.toP();\n\t};\n\n\tfunction BasePoint(curve, type) {\n\t  this.curve = curve;\n\t  this.type = type;\n\t  this.precomputed = null;\n\t}\n\tBaseCurve.BasePoint = BasePoint;\n\n\tBasePoint.prototype.eq = function eq(/*other*/) {\n\t  throw new Error('Not implemented');\n\t};\n\n\tBasePoint.prototype.validate = function validate() {\n\t  return this.curve.validate(this);\n\t};\n\n\tBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n\t  bytes = utils_1$1.toArray(bytes, enc);\n\n\t  var len = this.p.byteLength();\n\n\t  // uncompressed, hybrid-odd, hybrid-even\n\t  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n\t      bytes.length - 1 === 2 * len) {\n\t    if (bytes[0] === 0x06)\n\t      assert$1(bytes[bytes.length - 1] % 2 === 0);\n\t    else if (bytes[0] === 0x07)\n\t      assert$1(bytes[bytes.length - 1] % 2 === 1);\n\n\t    var res =  this.point(bytes.slice(1, 1 + len),\n\t      bytes.slice(1 + len, 1 + 2 * len));\n\n\t    return res;\n\t  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n\t              bytes.length - 1 === len) {\n\t    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n\t  }\n\t  throw new Error('Unknown point format');\n\t};\n\n\tBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n\t  return this.encode(enc, true);\n\t};\n\n\tBasePoint.prototype._encode = function _encode(compact) {\n\t  var len = this.curve.p.byteLength();\n\t  var x = this.getX().toArray('be', len);\n\n\t  if (compact)\n\t    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n\t  return [ 0x04 ].concat(x, this.getY().toArray('be', len));\n\t};\n\n\tBasePoint.prototype.encode = function encode(enc, compact) {\n\t  return utils_1$1.encode(this._encode(compact), enc);\n\t};\n\n\tBasePoint.prototype.precompute = function precompute(power) {\n\t  if (this.precomputed)\n\t    return this;\n\n\t  var precomputed = {\n\t    doubles: null,\n\t    naf: null,\n\t    beta: null,\n\t  };\n\t  precomputed.naf = this._getNAFPoints(8);\n\t  precomputed.doubles = this._getDoubles(4, power);\n\t  precomputed.beta = this._getBeta();\n\t  this.precomputed = precomputed;\n\n\t  return this;\n\t};\n\n\tBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n\t  if (!this.precomputed)\n\t    return false;\n\n\t  var doubles = this.precomputed.doubles;\n\t  if (!doubles)\n\t    return false;\n\n\t  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n\t};\n\n\tBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n\t  if (this.precomputed && this.precomputed.doubles)\n\t    return this.precomputed.doubles;\n\n\t  var doubles = [ this ];\n\t  var acc = this;\n\t  for (var i = 0; i < power; i += step) {\n\t    for (var j = 0; j < step; j++)\n\t      acc = acc.dbl();\n\t    doubles.push(acc);\n\t  }\n\t  return {\n\t    step: step,\n\t    points: doubles,\n\t  };\n\t};\n\n\tBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n\t  if (this.precomputed && this.precomputed.naf)\n\t    return this.precomputed.naf;\n\n\t  var res = [ this ];\n\t  var max = (1 << wnd) - 1;\n\t  var dbl = max === 1 ? null : this.dbl();\n\t  for (var i = 1; i < max; i++)\n\t    res[i] = res[i - 1].add(dbl);\n\t  return {\n\t    wnd: wnd,\n\t    points: res,\n\t  };\n\t};\n\n\tBasePoint.prototype._getBeta = function _getBeta() {\n\t  return null;\n\t};\n\n\tBasePoint.prototype.dblp = function dblp(k) {\n\t  var r = this;\n\t  for (var i = 0; i < k; i++)\n\t    r = r.dbl();\n\t  return r;\n\t};\n\n\tvar inherits_browser = createCommonjsModule(function (module) {\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    if (superCtor) {\n\t      ctor.super_ = superCtor;\n\t      ctor.prototype = Object.create(superCtor.prototype, {\n\t        constructor: {\n\t          value: ctor,\n\t          enumerable: false,\n\t          writable: true,\n\t          configurable: true\n\t        }\n\t      });\n\t    }\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    if (superCtor) {\n\t      ctor.super_ = superCtor;\n\t      var TempCtor = function () {};\n\t      TempCtor.prototype = superCtor.prototype;\n\t      ctor.prototype = new TempCtor();\n\t      ctor.prototype.constructor = ctor;\n\t    }\n\t  };\n\t}\n\t});\n\n\t'use strict';\n\n\n\n\n\n\n\tvar assert$2 = utils_1$1.assert;\n\n\tfunction ShortCurve(conf) {\n\t  base.call(this, 'short', conf);\n\n\t  this.a = new bn(conf.a, 16).toRed(this.red);\n\t  this.b = new bn(conf.b, 16).toRed(this.red);\n\t  this.tinv = this.two.redInvm();\n\n\t  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n\t  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n\t  // If the curve is endomorphic, precalculate beta and lambda\n\t  this.endo = this._getEndomorphism(conf);\n\t  this._endoWnafT1 = new Array(4);\n\t  this._endoWnafT2 = new Array(4);\n\t}\n\tinherits_browser(ShortCurve, base);\n\tvar short_1 = ShortCurve;\n\n\tShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n\t  // No efficient endomorphism\n\t  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n\t    return;\n\n\t  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n\t  var beta;\n\t  var lambda;\n\t  if (conf.beta) {\n\t    beta = new bn(conf.beta, 16).toRed(this.red);\n\t  } else {\n\t    var betas = this._getEndoRoots(this.p);\n\t    // Choose the smallest beta\n\t    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n\t    beta = beta.toRed(this.red);\n\t  }\n\t  if (conf.lambda) {\n\t    lambda = new bn(conf.lambda, 16);\n\t  } else {\n\t    // Choose the lambda that is matching selected beta\n\t    var lambdas = this._getEndoRoots(this.n);\n\t    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n\t      lambda = lambdas[0];\n\t    } else {\n\t      lambda = lambdas[1];\n\t      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n\t    }\n\t  }\n\n\t  // Get basis vectors, used for balanced length-two representation\n\t  var basis;\n\t  if (conf.basis) {\n\t    basis = conf.basis.map(function(vec) {\n\t      return {\n\t        a: new bn(vec.a, 16),\n\t        b: new bn(vec.b, 16),\n\t      };\n\t    });\n\t  } else {\n\t    basis = this._getEndoBasis(lambda);\n\t  }\n\n\t  return {\n\t    beta: beta,\n\t    lambda: lambda,\n\t    basis: basis,\n\t  };\n\t};\n\n\tShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n\t  // Find roots of for x^2 + x + 1 in F\n\t  // Root = (-1 +- Sqrt(-3)) / 2\n\t  //\n\t  var red = num === this.p ? this.red : bn.mont(num);\n\t  var tinv = new bn(2).toRed(red).redInvm();\n\t  var ntinv = tinv.redNeg();\n\n\t  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n\t  var l1 = ntinv.redAdd(s).fromRed();\n\t  var l2 = ntinv.redSub(s).fromRed();\n\t  return [ l1, l2 ];\n\t};\n\n\tShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n\t  // aprxSqrt >= sqrt(this.n)\n\t  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n\t  // 3.74\n\t  // Run EGCD, until r(L + 1) < aprxSqrt\n\t  var u = lambda;\n\t  var v = this.n.clone();\n\t  var x1 = new bn(1);\n\t  var y1 = new bn(0);\n\t  var x2 = new bn(0);\n\t  var y2 = new bn(1);\n\n\t  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n\t  var a0;\n\t  var b0;\n\t  // First vector\n\t  var a1;\n\t  var b1;\n\t  // Second vector\n\t  var a2;\n\t  var b2;\n\n\t  var prevR;\n\t  var i = 0;\n\t  var r;\n\t  var x;\n\t  while (u.cmpn(0) !== 0) {\n\t    var q = v.div(u);\n\t    r = v.sub(q.mul(u));\n\t    x = x2.sub(q.mul(x1));\n\t    var y = y2.sub(q.mul(y1));\n\n\t    if (!a1 && r.cmp(aprxSqrt) < 0) {\n\t      a0 = prevR.neg();\n\t      b0 = x1;\n\t      a1 = r.neg();\n\t      b1 = x;\n\t    } else if (a1 && ++i === 2) {\n\t      break;\n\t    }\n\t    prevR = r;\n\n\t    v = u;\n\t    u = r;\n\t    x2 = x1;\n\t    x1 = x;\n\t    y2 = y1;\n\t    y1 = y;\n\t  }\n\t  a2 = r.neg();\n\t  b2 = x;\n\n\t  var len1 = a1.sqr().add(b1.sqr());\n\t  var len2 = a2.sqr().add(b2.sqr());\n\t  if (len2.cmp(len1) >= 0) {\n\t    a2 = a0;\n\t    b2 = b0;\n\t  }\n\n\t  // Normalize signs\n\t  if (a1.negative) {\n\t    a1 = a1.neg();\n\t    b1 = b1.neg();\n\t  }\n\t  if (a2.negative) {\n\t    a2 = a2.neg();\n\t    b2 = b2.neg();\n\t  }\n\n\t  return [\n\t    { a: a1, b: b1 },\n\t    { a: a2, b: b2 },\n\t  ];\n\t};\n\n\tShortCurve.prototype._endoSplit = function _endoSplit(k) {\n\t  var basis = this.endo.basis;\n\t  var v1 = basis[0];\n\t  var v2 = basis[1];\n\n\t  var c1 = v2.b.mul(k).divRound(this.n);\n\t  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n\t  var p1 = c1.mul(v1.a);\n\t  var p2 = c2.mul(v2.a);\n\t  var q1 = c1.mul(v1.b);\n\t  var q2 = c2.mul(v2.b);\n\n\t  // Calculate answer\n\t  var k1 = k.sub(p1).sub(p2);\n\t  var k2 = q1.add(q2).neg();\n\t  return { k1: k1, k2: k2 };\n\t};\n\n\tShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n\t  x = new bn(x, 16);\n\t  if (!x.red)\n\t    x = x.toRed(this.red);\n\n\t  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n\t  var y = y2.redSqrt();\n\t  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n\t    throw new Error('invalid point');\n\n\t  // XXX Is there any way to tell if the number is odd without converting it\n\t  // to non-red form?\n\t  var isOdd = y.fromRed().isOdd();\n\t  if (odd && !isOdd || !odd && isOdd)\n\t    y = y.redNeg();\n\n\t  return this.point(x, y);\n\t};\n\n\tShortCurve.prototype.validate = function validate(point) {\n\t  if (point.inf)\n\t    return true;\n\n\t  var x = point.x;\n\t  var y = point.y;\n\n\t  var ax = this.a.redMul(x);\n\t  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n\t  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n\t};\n\n\tShortCurve.prototype._endoWnafMulAdd =\n\t    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n\t      var npoints = this._endoWnafT1;\n\t      var ncoeffs = this._endoWnafT2;\n\t      for (var i = 0; i < points.length; i++) {\n\t        var split = this._endoSplit(coeffs[i]);\n\t        var p = points[i];\n\t        var beta = p._getBeta();\n\n\t        if (split.k1.negative) {\n\t          split.k1.ineg();\n\t          p = p.neg(true);\n\t        }\n\t        if (split.k2.negative) {\n\t          split.k2.ineg();\n\t          beta = beta.neg(true);\n\t        }\n\n\t        npoints[i * 2] = p;\n\t        npoints[i * 2 + 1] = beta;\n\t        ncoeffs[i * 2] = split.k1;\n\t        ncoeffs[i * 2 + 1] = split.k2;\n\t      }\n\t      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n\t      // Clean-up references to points and coefficients\n\t      for (var j = 0; j < i * 2; j++) {\n\t        npoints[j] = null;\n\t        ncoeffs[j] = null;\n\t      }\n\t      return res;\n\t    };\n\n\tfunction Point(curve, x, y, isRed) {\n\t  base.BasePoint.call(this, curve, 'affine');\n\t  if (x === null && y === null) {\n\t    this.x = null;\n\t    this.y = null;\n\t    this.inf = true;\n\t  } else {\n\t    this.x = new bn(x, 16);\n\t    this.y = new bn(y, 16);\n\t    // Force redgomery representation when loading from JSON\n\t    if (isRed) {\n\t      this.x.forceRed(this.curve.red);\n\t      this.y.forceRed(this.curve.red);\n\t    }\n\t    if (!this.x.red)\n\t      this.x = this.x.toRed(this.curve.red);\n\t    if (!this.y.red)\n\t      this.y = this.y.toRed(this.curve.red);\n\t    this.inf = false;\n\t  }\n\t}\n\tinherits_browser(Point, base.BasePoint);\n\n\tShortCurve.prototype.point = function point(x, y, isRed) {\n\t  return new Point(this, x, y, isRed);\n\t};\n\n\tShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n\t  return Point.fromJSON(this, obj, red);\n\t};\n\n\tPoint.prototype._getBeta = function _getBeta() {\n\t  if (!this.curve.endo)\n\t    return;\n\n\t  var pre = this.precomputed;\n\t  if (pre && pre.beta)\n\t    return pre.beta;\n\n\t  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n\t  if (pre) {\n\t    var curve = this.curve;\n\t    var endoMul = function(p) {\n\t      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n\t    };\n\t    pre.beta = beta;\n\t    beta.precomputed = {\n\t      beta: null,\n\t      naf: pre.naf && {\n\t        wnd: pre.naf.wnd,\n\t        points: pre.naf.points.map(endoMul),\n\t      },\n\t      doubles: pre.doubles && {\n\t        step: pre.doubles.step,\n\t        points: pre.doubles.points.map(endoMul),\n\t      },\n\t    };\n\t  }\n\t  return beta;\n\t};\n\n\tPoint.prototype.toJSON = function toJSON() {\n\t  if (!this.precomputed)\n\t    return [ this.x, this.y ];\n\n\t  return [ this.x, this.y, this.precomputed && {\n\t    doubles: this.precomputed.doubles && {\n\t      step: this.precomputed.doubles.step,\n\t      points: this.precomputed.doubles.points.slice(1),\n\t    },\n\t    naf: this.precomputed.naf && {\n\t      wnd: this.precomputed.naf.wnd,\n\t      points: this.precomputed.naf.points.slice(1),\n\t    },\n\t  } ];\n\t};\n\n\tPoint.fromJSON = function fromJSON(curve, obj, red) {\n\t  if (typeof obj === 'string')\n\t    obj = JSON.parse(obj);\n\t  var res = curve.point(obj[0], obj[1], red);\n\t  if (!obj[2])\n\t    return res;\n\n\t  function obj2point(obj) {\n\t    return curve.point(obj[0], obj[1], red);\n\t  }\n\n\t  var pre = obj[2];\n\t  res.precomputed = {\n\t    beta: null,\n\t    doubles: pre.doubles && {\n\t      step: pre.doubles.step,\n\t      points: [ res ].concat(pre.doubles.points.map(obj2point)),\n\t    },\n\t    naf: pre.naf && {\n\t      wnd: pre.naf.wnd,\n\t      points: [ res ].concat(pre.naf.points.map(obj2point)),\n\t    },\n\t  };\n\t  return res;\n\t};\n\n\tPoint.prototype.inspect = function inspect() {\n\t  if (this.isInfinity())\n\t    return '<EC Point Infinity>';\n\t  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n\t      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n\t};\n\n\tPoint.prototype.isInfinity = function isInfinity() {\n\t  return this.inf;\n\t};\n\n\tPoint.prototype.add = function add(p) {\n\t  // O + P = P\n\t  if (this.inf)\n\t    return p;\n\n\t  // P + O = P\n\t  if (p.inf)\n\t    return this;\n\n\t  // P + P = 2P\n\t  if (this.eq(p))\n\t    return this.dbl();\n\n\t  // P + (-P) = O\n\t  if (this.neg().eq(p))\n\t    return this.curve.point(null, null);\n\n\t  // P + Q = O\n\t  if (this.x.cmp(p.x) === 0)\n\t    return this.curve.point(null, null);\n\n\t  var c = this.y.redSub(p.y);\n\t  if (c.cmpn(0) !== 0)\n\t    c = c.redMul(this.x.redSub(p.x).redInvm());\n\t  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n\t  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n\t  return this.curve.point(nx, ny);\n\t};\n\n\tPoint.prototype.dbl = function dbl() {\n\t  if (this.inf)\n\t    return this;\n\n\t  // 2P = O\n\t  var ys1 = this.y.redAdd(this.y);\n\t  if (ys1.cmpn(0) === 0)\n\t    return this.curve.point(null, null);\n\n\t  var a = this.curve.a;\n\n\t  var x2 = this.x.redSqr();\n\t  var dyinv = ys1.redInvm();\n\t  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n\t  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n\t  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n\t  return this.curve.point(nx, ny);\n\t};\n\n\tPoint.prototype.getX = function getX() {\n\t  return this.x.fromRed();\n\t};\n\n\tPoint.prototype.getY = function getY() {\n\t  return this.y.fromRed();\n\t};\n\n\tPoint.prototype.mul = function mul(k) {\n\t  k = new bn(k, 16);\n\t  if (this.isInfinity())\n\t    return this;\n\t  else if (this._hasDoubles(k))\n\t    return this.curve._fixedNafMul(this, k);\n\t  else if (this.curve.endo)\n\t    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n\t  else\n\t    return this.curve._wnafMul(this, k);\n\t};\n\n\tPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n\t  var points = [ this, p2 ];\n\t  var coeffs = [ k1, k2 ];\n\t  if (this.curve.endo)\n\t    return this.curve._endoWnafMulAdd(points, coeffs);\n\t  else\n\t    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n\t};\n\n\tPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n\t  var points = [ this, p2 ];\n\t  var coeffs = [ k1, k2 ];\n\t  if (this.curve.endo)\n\t    return this.curve._endoWnafMulAdd(points, coeffs, true);\n\t  else\n\t    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n\t};\n\n\tPoint.prototype.eq = function eq(p) {\n\t  return this === p ||\n\t         this.inf === p.inf &&\n\t             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n\t};\n\n\tPoint.prototype.neg = function neg(_precompute) {\n\t  if (this.inf)\n\t    return this;\n\n\t  var res = this.curve.point(this.x, this.y.redNeg());\n\t  if (_precompute && this.precomputed) {\n\t    var pre = this.precomputed;\n\t    var negate = function(p) {\n\t      return p.neg();\n\t    };\n\t    res.precomputed = {\n\t      naf: pre.naf && {\n\t        wnd: pre.naf.wnd,\n\t        points: pre.naf.points.map(negate),\n\t      },\n\t      doubles: pre.doubles && {\n\t        step: pre.doubles.step,\n\t        points: pre.doubles.points.map(negate),\n\t      },\n\t    };\n\t  }\n\t  return res;\n\t};\n\n\tPoint.prototype.toJ = function toJ() {\n\t  if (this.inf)\n\t    return this.curve.jpoint(null, null, null);\n\n\t  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n\t  return res;\n\t};\n\n\tfunction JPoint(curve, x, y, z) {\n\t  base.BasePoint.call(this, curve, 'jacobian');\n\t  if (x === null && y === null && z === null) {\n\t    this.x = this.curve.one;\n\t    this.y = this.curve.one;\n\t    this.z = new bn(0);\n\t  } else {\n\t    this.x = new bn(x, 16);\n\t    this.y = new bn(y, 16);\n\t    this.z = new bn(z, 16);\n\t  }\n\t  if (!this.x.red)\n\t    this.x = this.x.toRed(this.curve.red);\n\t  if (!this.y.red)\n\t    this.y = this.y.toRed(this.curve.red);\n\t  if (!this.z.red)\n\t    this.z = this.z.toRed(this.curve.red);\n\n\t  this.zOne = this.z === this.curve.one;\n\t}\n\tinherits_browser(JPoint, base.BasePoint);\n\n\tShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n\t  return new JPoint(this, x, y, z);\n\t};\n\n\tJPoint.prototype.toP = function toP() {\n\t  if (this.isInfinity())\n\t    return this.curve.point(null, null);\n\n\t  var zinv = this.z.redInvm();\n\t  var zinv2 = zinv.redSqr();\n\t  var ax = this.x.redMul(zinv2);\n\t  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n\t  return this.curve.point(ax, ay);\n\t};\n\n\tJPoint.prototype.neg = function neg() {\n\t  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n\t};\n\n\tJPoint.prototype.add = function add(p) {\n\t  // O + P = P\n\t  if (this.isInfinity())\n\t    return p;\n\n\t  // P + O = P\n\t  if (p.isInfinity())\n\t    return this;\n\n\t  // 12M + 4S + 7A\n\t  var pz2 = p.z.redSqr();\n\t  var z2 = this.z.redSqr();\n\t  var u1 = this.x.redMul(pz2);\n\t  var u2 = p.x.redMul(z2);\n\t  var s1 = this.y.redMul(pz2.redMul(p.z));\n\t  var s2 = p.y.redMul(z2.redMul(this.z));\n\n\t  var h = u1.redSub(u2);\n\t  var r = s1.redSub(s2);\n\t  if (h.cmpn(0) === 0) {\n\t    if (r.cmpn(0) !== 0)\n\t      return this.curve.jpoint(null, null, null);\n\t    else\n\t      return this.dbl();\n\t  }\n\n\t  var h2 = h.redSqr();\n\t  var h3 = h2.redMul(h);\n\t  var v = u1.redMul(h2);\n\n\t  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n\t  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n\t  var nz = this.z.redMul(p.z).redMul(h);\n\n\t  return this.curve.jpoint(nx, ny, nz);\n\t};\n\n\tJPoint.prototype.mixedAdd = function mixedAdd(p) {\n\t  // O + P = P\n\t  if (this.isInfinity())\n\t    return p.toJ();\n\n\t  // P + O = P\n\t  if (p.isInfinity())\n\t    return this;\n\n\t  // 8M + 3S + 7A\n\t  var z2 = this.z.redSqr();\n\t  var u1 = this.x;\n\t  var u2 = p.x.redMul(z2);\n\t  var s1 = this.y;\n\t  var s2 = p.y.redMul(z2).redMul(this.z);\n\n\t  var h = u1.redSub(u2);\n\t  var r = s1.redSub(s2);\n\t  if (h.cmpn(0) === 0) {\n\t    if (r.cmpn(0) !== 0)\n\t      return this.curve.jpoint(null, null, null);\n\t    else\n\t      return this.dbl();\n\t  }\n\n\t  var h2 = h.redSqr();\n\t  var h3 = h2.redMul(h);\n\t  var v = u1.redMul(h2);\n\n\t  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n\t  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n\t  var nz = this.z.redMul(h);\n\n\t  return this.curve.jpoint(nx, ny, nz);\n\t};\n\n\tJPoint.prototype.dblp = function dblp(pow) {\n\t  if (pow === 0)\n\t    return this;\n\t  if (this.isInfinity())\n\t    return this;\n\t  if (!pow)\n\t    return this.dbl();\n\n\t  var i;\n\t  if (this.curve.zeroA || this.curve.threeA) {\n\t    var r = this;\n\t    for (i = 0; i < pow; i++)\n\t      r = r.dbl();\n\t    return r;\n\t  }\n\n\t  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n\t  // N = 1 => 6M + 6S + 9A\n\t  var a = this.curve.a;\n\t  var tinv = this.curve.tinv;\n\n\t  var jx = this.x;\n\t  var jy = this.y;\n\t  var jz = this.z;\n\t  var jz4 = jz.redSqr().redSqr();\n\n\t  // Reuse results\n\t  var jyd = jy.redAdd(jy);\n\t  for (i = 0; i < pow; i++) {\n\t    var jx2 = jx.redSqr();\n\t    var jyd2 = jyd.redSqr();\n\t    var jyd4 = jyd2.redSqr();\n\t    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n\t    var t1 = jx.redMul(jyd2);\n\t    var nx = c.redSqr().redISub(t1.redAdd(t1));\n\t    var t2 = t1.redISub(nx);\n\t    var dny = c.redMul(t2);\n\t    dny = dny.redIAdd(dny).redISub(jyd4);\n\t    var nz = jyd.redMul(jz);\n\t    if (i + 1 < pow)\n\t      jz4 = jz4.redMul(jyd4);\n\n\t    jx = nx;\n\t    jz = nz;\n\t    jyd = dny;\n\t  }\n\n\t  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n\t};\n\n\tJPoint.prototype.dbl = function dbl() {\n\t  if (this.isInfinity())\n\t    return this;\n\n\t  if (this.curve.zeroA)\n\t    return this._zeroDbl();\n\t  else if (this.curve.threeA)\n\t    return this._threeDbl();\n\t  else\n\t    return this._dbl();\n\t};\n\n\tJPoint.prototype._zeroDbl = function _zeroDbl() {\n\t  var nx;\n\t  var ny;\n\t  var nz;\n\t  // Z = 1\n\t  if (this.zOne) {\n\t    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n\t    //     #doubling-mdbl-2007-bl\n\t    // 1M + 5S + 14A\n\n\t    // XX = X1^2\n\t    var xx = this.x.redSqr();\n\t    // YY = Y1^2\n\t    var yy = this.y.redSqr();\n\t    // YYYY = YY^2\n\t    var yyyy = yy.redSqr();\n\t    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\t    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n\t    s = s.redIAdd(s);\n\t    // M = 3 * XX + a; a = 0\n\t    var m = xx.redAdd(xx).redIAdd(xx);\n\t    // T = M ^ 2 - 2*S\n\t    var t = m.redSqr().redISub(s).redISub(s);\n\n\t    // 8 * YYYY\n\t    var yyyy8 = yyyy.redIAdd(yyyy);\n\t    yyyy8 = yyyy8.redIAdd(yyyy8);\n\t    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n\t    // X3 = T\n\t    nx = t;\n\t    // Y3 = M * (S - T) - 8 * YYYY\n\t    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n\t    // Z3 = 2*Y1\n\t    nz = this.y.redAdd(this.y);\n\t  } else {\n\t    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n\t    //     #doubling-dbl-2009-l\n\t    // 2M + 5S + 13A\n\n\t    // A = X1^2\n\t    var a = this.x.redSqr();\n\t    // B = Y1^2\n\t    var b = this.y.redSqr();\n\t    // C = B^2\n\t    var c = b.redSqr();\n\t    // D = 2 * ((X1 + B)^2 - A - C)\n\t    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n\t    d = d.redIAdd(d);\n\t    // E = 3 * A\n\t    var e = a.redAdd(a).redIAdd(a);\n\t    // F = E^2\n\t    var f = e.redSqr();\n\n\t    // 8 * C\n\t    var c8 = c.redIAdd(c);\n\t    c8 = c8.redIAdd(c8);\n\t    c8 = c8.redIAdd(c8);\n\n\t    // X3 = F - 2 * D\n\t    nx = f.redISub(d).redISub(d);\n\t    // Y3 = E * (D - X3) - 8 * C\n\t    ny = e.redMul(d.redISub(nx)).redISub(c8);\n\t    // Z3 = 2 * Y1 * Z1\n\t    nz = this.y.redMul(this.z);\n\t    nz = nz.redIAdd(nz);\n\t  }\n\n\t  return this.curve.jpoint(nx, ny, nz);\n\t};\n\n\tJPoint.prototype._threeDbl = function _threeDbl() {\n\t  var nx;\n\t  var ny;\n\t  var nz;\n\t  // Z = 1\n\t  if (this.zOne) {\n\t    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n\t    //     #doubling-mdbl-2007-bl\n\t    // 1M + 5S + 15A\n\n\t    // XX = X1^2\n\t    var xx = this.x.redSqr();\n\t    // YY = Y1^2\n\t    var yy = this.y.redSqr();\n\t    // YYYY = YY^2\n\t    var yyyy = yy.redSqr();\n\t    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\t    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n\t    s = s.redIAdd(s);\n\t    // M = 3 * XX + a\n\t    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n\t    // T = M^2 - 2 * S\n\t    var t = m.redSqr().redISub(s).redISub(s);\n\t    // X3 = T\n\t    nx = t;\n\t    // Y3 = M * (S - T) - 8 * YYYY\n\t    var yyyy8 = yyyy.redIAdd(yyyy);\n\t    yyyy8 = yyyy8.redIAdd(yyyy8);\n\t    yyyy8 = yyyy8.redIAdd(yyyy8);\n\t    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n\t    // Z3 = 2 * Y1\n\t    nz = this.y.redAdd(this.y);\n\t  } else {\n\t    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n\t    // 3M + 5S\n\n\t    // delta = Z1^2\n\t    var delta = this.z.redSqr();\n\t    // gamma = Y1^2\n\t    var gamma = this.y.redSqr();\n\t    // beta = X1 * gamma\n\t    var beta = this.x.redMul(gamma);\n\t    // alpha = 3 * (X1 - delta) * (X1 + delta)\n\t    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n\t    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n\t    // X3 = alpha^2 - 8 * beta\n\t    var beta4 = beta.redIAdd(beta);\n\t    beta4 = beta4.redIAdd(beta4);\n\t    var beta8 = beta4.redAdd(beta4);\n\t    nx = alpha.redSqr().redISub(beta8);\n\t    // Z3 = (Y1 + Z1)^2 - gamma - delta\n\t    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n\t    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n\t    var ggamma8 = gamma.redSqr();\n\t    ggamma8 = ggamma8.redIAdd(ggamma8);\n\t    ggamma8 = ggamma8.redIAdd(ggamma8);\n\t    ggamma8 = ggamma8.redIAdd(ggamma8);\n\t    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n\t  }\n\n\t  return this.curve.jpoint(nx, ny, nz);\n\t};\n\n\tJPoint.prototype._dbl = function _dbl() {\n\t  var a = this.curve.a;\n\n\t  // 4M + 6S + 10A\n\t  var jx = this.x;\n\t  var jy = this.y;\n\t  var jz = this.z;\n\t  var jz4 = jz.redSqr().redSqr();\n\n\t  var jx2 = jx.redSqr();\n\t  var jy2 = jy.redSqr();\n\n\t  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n\t  var jxd4 = jx.redAdd(jx);\n\t  jxd4 = jxd4.redIAdd(jxd4);\n\t  var t1 = jxd4.redMul(jy2);\n\t  var nx = c.redSqr().redISub(t1.redAdd(t1));\n\t  var t2 = t1.redISub(nx);\n\n\t  var jyd8 = jy2.redSqr();\n\t  jyd8 = jyd8.redIAdd(jyd8);\n\t  jyd8 = jyd8.redIAdd(jyd8);\n\t  jyd8 = jyd8.redIAdd(jyd8);\n\t  var ny = c.redMul(t2).redISub(jyd8);\n\t  var nz = jy.redAdd(jy).redMul(jz);\n\n\t  return this.curve.jpoint(nx, ny, nz);\n\t};\n\n\tJPoint.prototype.trpl = function trpl() {\n\t  if (!this.curve.zeroA)\n\t    return this.dbl().add(this);\n\n\t  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n\t  // 5M + 10S + ...\n\n\t  // XX = X1^2\n\t  var xx = this.x.redSqr();\n\t  // YY = Y1^2\n\t  var yy = this.y.redSqr();\n\t  // ZZ = Z1^2\n\t  var zz = this.z.redSqr();\n\t  // YYYY = YY^2\n\t  var yyyy = yy.redSqr();\n\t  // M = 3 * XX + a * ZZ2; a = 0\n\t  var m = xx.redAdd(xx).redIAdd(xx);\n\t  // MM = M^2\n\t  var mm = m.redSqr();\n\t  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n\t  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n\t  e = e.redIAdd(e);\n\t  e = e.redAdd(e).redIAdd(e);\n\t  e = e.redISub(mm);\n\t  // EE = E^2\n\t  var ee = e.redSqr();\n\t  // T = 16*YYYY\n\t  var t = yyyy.redIAdd(yyyy);\n\t  t = t.redIAdd(t);\n\t  t = t.redIAdd(t);\n\t  t = t.redIAdd(t);\n\t  // U = (M + E)^2 - MM - EE - T\n\t  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n\t  // X3 = 4 * (X1 * EE - 4 * YY * U)\n\t  var yyu4 = yy.redMul(u);\n\t  yyu4 = yyu4.redIAdd(yyu4);\n\t  yyu4 = yyu4.redIAdd(yyu4);\n\t  var nx = this.x.redMul(ee).redISub(yyu4);\n\t  nx = nx.redIAdd(nx);\n\t  nx = nx.redIAdd(nx);\n\t  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n\t  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n\t  ny = ny.redIAdd(ny);\n\t  ny = ny.redIAdd(ny);\n\t  ny = ny.redIAdd(ny);\n\t  // Z3 = (Z1 + E)^2 - ZZ - EE\n\t  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n\t  return this.curve.jpoint(nx, ny, nz);\n\t};\n\n\tJPoint.prototype.mul = function mul(k, kbase) {\n\t  k = new bn(k, kbase);\n\n\t  return this.curve._wnafMul(this, k);\n\t};\n\n\tJPoint.prototype.eq = function eq(p) {\n\t  if (p.type === 'affine')\n\t    return this.eq(p.toJ());\n\n\t  if (this === p)\n\t    return true;\n\n\t  // x1 * z2^2 == x2 * z1^2\n\t  var z2 = this.z.redSqr();\n\t  var pz2 = p.z.redSqr();\n\t  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n\t    return false;\n\n\t  // y1 * z2^3 == y2 * z1^3\n\t  var z3 = z2.redMul(this.z);\n\t  var pz3 = pz2.redMul(p.z);\n\t  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n\t};\n\n\tJPoint.prototype.eqXToP = function eqXToP(x) {\n\t  var zs = this.z.redSqr();\n\t  var rx = x.toRed(this.curve.red).redMul(zs);\n\t  if (this.x.cmp(rx) === 0)\n\t    return true;\n\n\t  var xc = x.clone();\n\t  var t = this.curve.redN.redMul(zs);\n\t  for (;;) {\n\t    xc.iadd(this.curve.n);\n\t    if (xc.cmp(this.curve.p) >= 0)\n\t      return false;\n\n\t    rx.redIAdd(t);\n\t    if (this.x.cmp(rx) === 0)\n\t      return true;\n\t  }\n\t};\n\n\tJPoint.prototype.inspect = function inspect() {\n\t  if (this.isInfinity())\n\t    return '<EC JPoint Infinity>';\n\t  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n\t      ' y: ' + this.y.toString(16, 2) +\n\t      ' z: ' + this.z.toString(16, 2) + '>';\n\t};\n\n\tJPoint.prototype.isInfinity = function isInfinity() {\n\t  // XXX This code assumes that zero is always zero in red\n\t  return this.z.cmpn(0) === 0;\n\t};\n\n\tvar curve_1 = createCommonjsModule(function (module, exports) {\n\t'use strict';\n\n\tvar curve = exports;\n\n\tcurve.base = base;\n\tcurve.short = short_1;\n\tcurve.mont = /*RicMoo:ethers:require(./mont)*/(null);\n\tcurve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);\n\t});\n\n\t'use strict';\n\n\n\n\n\tvar inherits_1 = inherits_browser;\n\n\tfunction isSurrogatePair(msg, i) {\n\t  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n\t    return false;\n\t  }\n\t  if (i < 0 || i + 1 >= msg.length) {\n\t    return false;\n\t  }\n\t  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n\t}\n\n\tfunction toArray(msg, enc) {\n\t  if (Array.isArray(msg))\n\t    return msg.slice();\n\t  if (!msg)\n\t    return [];\n\t  var res = [];\n\t  if (typeof msg === 'string') {\n\t    if (!enc) {\n\t      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n\t      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n\t      // Apache License 2.0\n\t      // https://github.com/google/closure-library/blob/master/LICENSE\n\t      var p = 0;\n\t      for (var i = 0; i < msg.length; i++) {\n\t        var c = msg.charCodeAt(i);\n\t        if (c < 128) {\n\t          res[p++] = c;\n\t        } else if (c < 2048) {\n\t          res[p++] = (c >> 6) | 192;\n\t          res[p++] = (c & 63) | 128;\n\t        } else if (isSurrogatePair(msg, i)) {\n\t          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n\t          res[p++] = (c >> 18) | 240;\n\t          res[p++] = ((c >> 12) & 63) | 128;\n\t          res[p++] = ((c >> 6) & 63) | 128;\n\t          res[p++] = (c & 63) | 128;\n\t        } else {\n\t          res[p++] = (c >> 12) | 224;\n\t          res[p++] = ((c >> 6) & 63) | 128;\n\t          res[p++] = (c & 63) | 128;\n\t        }\n\t      }\n\t    } else if (enc === 'hex') {\n\t      msg = msg.replace(/[^a-z0-9]+/ig, '');\n\t      if (msg.length % 2 !== 0)\n\t        msg = '0' + msg;\n\t      for (i = 0; i < msg.length; i += 2)\n\t        res.push(parseInt(msg[i] + msg[i + 1], 16));\n\t    }\n\t  } else {\n\t    for (i = 0; i < msg.length; i++)\n\t      res[i] = msg[i] | 0;\n\t  }\n\t  return res;\n\t}\n\tvar toArray_1 = toArray;\n\n\tfunction toHex(msg) {\n\t  var res = '';\n\t  for (var i = 0; i < msg.length; i++)\n\t    res += zero2(msg[i].toString(16));\n\t  return res;\n\t}\n\tvar toHex_1 = toHex;\n\n\tfunction htonl(w) {\n\t  var res = (w >>> 24) |\n\t            ((w >>> 8) & 0xff00) |\n\t            ((w << 8) & 0xff0000) |\n\t            ((w & 0xff) << 24);\n\t  return res >>> 0;\n\t}\n\tvar htonl_1 = htonl;\n\n\tfunction toHex32(msg, endian) {\n\t  var res = '';\n\t  for (var i = 0; i < msg.length; i++) {\n\t    var w = msg[i];\n\t    if (endian === 'little')\n\t      w = htonl(w);\n\t    res += zero8(w.toString(16));\n\t  }\n\t  return res;\n\t}\n\tvar toHex32_1 = toHex32;\n\n\tfunction zero2(word) {\n\t  if (word.length === 1)\n\t    return '0' + word;\n\t  else\n\t    return word;\n\t}\n\tvar zero2_1 = zero2;\n\n\tfunction zero8(word) {\n\t  if (word.length === 7)\n\t    return '0' + word;\n\t  else if (word.length === 6)\n\t    return '00' + word;\n\t  else if (word.length === 5)\n\t    return '000' + word;\n\t  else if (word.length === 4)\n\t    return '0000' + word;\n\t  else if (word.length === 3)\n\t    return '00000' + word;\n\t  else if (word.length === 2)\n\t    return '000000' + word;\n\t  else if (word.length === 1)\n\t    return '0000000' + word;\n\t  else\n\t    return word;\n\t}\n\tvar zero8_1 = zero8;\n\n\tfunction join32(msg, start, end, endian) {\n\t  var len = end - start;\n\t  minimalisticAssert(len % 4 === 0);\n\t  var res = new Array(len / 4);\n\t  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n\t    var w;\n\t    if (endian === 'big')\n\t      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n\t    else\n\t      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n\t    res[i] = w >>> 0;\n\t  }\n\t  return res;\n\t}\n\tvar join32_1 = join32;\n\n\tfunction split32(msg, endian) {\n\t  var res = new Array(msg.length * 4);\n\t  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n\t    var m = msg[i];\n\t    if (endian === 'big') {\n\t      res[k] = m >>> 24;\n\t      res[k + 1] = (m >>> 16) & 0xff;\n\t      res[k + 2] = (m >>> 8) & 0xff;\n\t      res[k + 3] = m & 0xff;\n\t    } else {\n\t      res[k + 3] = m >>> 24;\n\t      res[k + 2] = (m >>> 16) & 0xff;\n\t      res[k + 1] = (m >>> 8) & 0xff;\n\t      res[k] = m & 0xff;\n\t    }\n\t  }\n\t  return res;\n\t}\n\tvar split32_1 = split32;\n\n\tfunction rotr32(w, b) {\n\t  return (w >>> b) | (w << (32 - b));\n\t}\n\tvar rotr32_1 = rotr32;\n\n\tfunction rotl32(w, b) {\n\t  return (w << b) | (w >>> (32 - b));\n\t}\n\tvar rotl32_1 = rotl32;\n\n\tfunction sum32(a, b) {\n\t  return (a + b) >>> 0;\n\t}\n\tvar sum32_1 = sum32;\n\n\tfunction sum32_3(a, b, c) {\n\t  return (a + b + c) >>> 0;\n\t}\n\tvar sum32_3_1 = sum32_3;\n\n\tfunction sum32_4(a, b, c, d) {\n\t  return (a + b + c + d) >>> 0;\n\t}\n\tvar sum32_4_1 = sum32_4;\n\n\tfunction sum32_5(a, b, c, d, e) {\n\t  return (a + b + c + d + e) >>> 0;\n\t}\n\tvar sum32_5_1 = sum32_5;\n\n\tfunction sum64(buf, pos, ah, al) {\n\t  var bh = buf[pos];\n\t  var bl = buf[pos + 1];\n\n\t  var lo = (al + bl) >>> 0;\n\t  var hi = (lo < al ? 1 : 0) + ah + bh;\n\t  buf[pos] = hi >>> 0;\n\t  buf[pos + 1] = lo;\n\t}\n\tvar sum64_1 = sum64;\n\n\tfunction sum64_hi(ah, al, bh, bl) {\n\t  var lo = (al + bl) >>> 0;\n\t  var hi = (lo < al ? 1 : 0) + ah + bh;\n\t  return hi >>> 0;\n\t}\n\tvar sum64_hi_1 = sum64_hi;\n\n\tfunction sum64_lo(ah, al, bh, bl) {\n\t  var lo = al + bl;\n\t  return lo >>> 0;\n\t}\n\tvar sum64_lo_1 = sum64_lo;\n\n\tfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n\t  var carry = 0;\n\t  var lo = al;\n\t  lo = (lo + bl) >>> 0;\n\t  carry += lo < al ? 1 : 0;\n\t  lo = (lo + cl) >>> 0;\n\t  carry += lo < cl ? 1 : 0;\n\t  lo = (lo + dl) >>> 0;\n\t  carry += lo < dl ? 1 : 0;\n\n\t  var hi = ah + bh + ch + dh + carry;\n\t  return hi >>> 0;\n\t}\n\tvar sum64_4_hi_1 = sum64_4_hi;\n\n\tfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n\t  var lo = al + bl + cl + dl;\n\t  return lo >>> 0;\n\t}\n\tvar sum64_4_lo_1 = sum64_4_lo;\n\n\tfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n\t  var carry = 0;\n\t  var lo = al;\n\t  lo = (lo + bl) >>> 0;\n\t  carry += lo < al ? 1 : 0;\n\t  lo = (lo + cl) >>> 0;\n\t  carry += lo < cl ? 1 : 0;\n\t  lo = (lo + dl) >>> 0;\n\t  carry += lo < dl ? 1 : 0;\n\t  lo = (lo + el) >>> 0;\n\t  carry += lo < el ? 1 : 0;\n\n\t  var hi = ah + bh + ch + dh + eh + carry;\n\t  return hi >>> 0;\n\t}\n\tvar sum64_5_hi_1 = sum64_5_hi;\n\n\tfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n\t  var lo = al + bl + cl + dl + el;\n\n\t  return lo >>> 0;\n\t}\n\tvar sum64_5_lo_1 = sum64_5_lo;\n\n\tfunction rotr64_hi(ah, al, num) {\n\t  var r = (al << (32 - num)) | (ah >>> num);\n\t  return r >>> 0;\n\t}\n\tvar rotr64_hi_1 = rotr64_hi;\n\n\tfunction rotr64_lo(ah, al, num) {\n\t  var r = (ah << (32 - num)) | (al >>> num);\n\t  return r >>> 0;\n\t}\n\tvar rotr64_lo_1 = rotr64_lo;\n\n\tfunction shr64_hi(ah, al, num) {\n\t  return ah >>> num;\n\t}\n\tvar shr64_hi_1 = shr64_hi;\n\n\tfunction shr64_lo(ah, al, num) {\n\t  var r = (ah << (32 - num)) | (al >>> num);\n\t  return r >>> 0;\n\t}\n\tvar shr64_lo_1 = shr64_lo;\n\n\tvar utils = {\n\t\tinherits: inherits_1,\n\t\ttoArray: toArray_1,\n\t\ttoHex: toHex_1,\n\t\thtonl: htonl_1,\n\t\ttoHex32: toHex32_1,\n\t\tzero2: zero2_1,\n\t\tzero8: zero8_1,\n\t\tjoin32: join32_1,\n\t\tsplit32: split32_1,\n\t\trotr32: rotr32_1,\n\t\trotl32: rotl32_1,\n\t\tsum32: sum32_1,\n\t\tsum32_3: sum32_3_1,\n\t\tsum32_4: sum32_4_1,\n\t\tsum32_5: sum32_5_1,\n\t\tsum64: sum64_1,\n\t\tsum64_hi: sum64_hi_1,\n\t\tsum64_lo: sum64_lo_1,\n\t\tsum64_4_hi: sum64_4_hi_1,\n\t\tsum64_4_lo: sum64_4_lo_1,\n\t\tsum64_5_hi: sum64_5_hi_1,\n\t\tsum64_5_lo: sum64_5_lo_1,\n\t\trotr64_hi: rotr64_hi_1,\n\t\trotr64_lo: rotr64_lo_1,\n\t\tshr64_hi: shr64_hi_1,\n\t\tshr64_lo: shr64_lo_1\n\t};\n\n\t'use strict';\n\n\n\n\n\tfunction BlockHash() {\n\t  this.pending = null;\n\t  this.pendingTotal = 0;\n\t  this.blockSize = this.constructor.blockSize;\n\t  this.outSize = this.constructor.outSize;\n\t  this.hmacStrength = this.constructor.hmacStrength;\n\t  this.padLength = this.constructor.padLength / 8;\n\t  this.endian = 'big';\n\n\t  this._delta8 = this.blockSize / 8;\n\t  this._delta32 = this.blockSize / 32;\n\t}\n\tvar BlockHash_1 = BlockHash;\n\n\tBlockHash.prototype.update = function update(msg, enc) {\n\t  // Convert message to array, pad it, and join into 32bit blocks\n\t  msg = utils.toArray(msg, enc);\n\t  if (!this.pending)\n\t    this.pending = msg;\n\t  else\n\t    this.pending = this.pending.concat(msg);\n\t  this.pendingTotal += msg.length;\n\n\t  // Enough data, try updating\n\t  if (this.pending.length >= this._delta8) {\n\t    msg = this.pending;\n\n\t    // Process pending data in blocks\n\t    var r = msg.length % this._delta8;\n\t    this.pending = msg.slice(msg.length - r, msg.length);\n\t    if (this.pending.length === 0)\n\t      this.pending = null;\n\n\t    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n\t    for (var i = 0; i < msg.length; i += this._delta32)\n\t      this._update(msg, i, i + this._delta32);\n\t  }\n\n\t  return this;\n\t};\n\n\tBlockHash.prototype.digest = function digest(enc) {\n\t  this.update(this._pad());\n\t  minimalisticAssert(this.pending === null);\n\n\t  return this._digest(enc);\n\t};\n\n\tBlockHash.prototype._pad = function pad() {\n\t  var len = this.pendingTotal;\n\t  var bytes = this._delta8;\n\t  var k = bytes - ((len + this.padLength) % bytes);\n\t  var res = new Array(k + this.padLength);\n\t  res[0] = 0x80;\n\t  for (var i = 1; i < k; i++)\n\t    res[i] = 0;\n\n\t  // Append length\n\t  len <<= 3;\n\t  if (this.endian === 'big') {\n\t    for (var t = 8; t < this.padLength; t++)\n\t      res[i++] = 0;\n\n\t    res[i++] = 0;\n\t    res[i++] = 0;\n\t    res[i++] = 0;\n\t    res[i++] = 0;\n\t    res[i++] = (len >>> 24) & 0xff;\n\t    res[i++] = (len >>> 16) & 0xff;\n\t    res[i++] = (len >>> 8) & 0xff;\n\t    res[i++] = len & 0xff;\n\t  } else {\n\t    res[i++] = len & 0xff;\n\t    res[i++] = (len >>> 8) & 0xff;\n\t    res[i++] = (len >>> 16) & 0xff;\n\t    res[i++] = (len >>> 24) & 0xff;\n\t    res[i++] = 0;\n\t    res[i++] = 0;\n\t    res[i++] = 0;\n\t    res[i++] = 0;\n\n\t    for (t = 8; t < this.padLength; t++)\n\t      res[i++] = 0;\n\t  }\n\n\t  return res;\n\t};\n\n\tvar common = {\n\t\tBlockHash: BlockHash_1\n\t};\n\n\t'use strict';\n\n\n\tvar rotr32$1 = utils.rotr32;\n\n\tfunction ft_1(s, x, y, z) {\n\t  if (s === 0)\n\t    return ch32(x, y, z);\n\t  if (s === 1 || s === 3)\n\t    return p32(x, y, z);\n\t  if (s === 2)\n\t    return maj32(x, y, z);\n\t}\n\tvar ft_1_1 = ft_1;\n\n\tfunction ch32(x, y, z) {\n\t  return (x & y) ^ ((~x) & z);\n\t}\n\tvar ch32_1 = ch32;\n\n\tfunction maj32(x, y, z) {\n\t  return (x & y) ^ (x & z) ^ (y & z);\n\t}\n\tvar maj32_1 = maj32;\n\n\tfunction p32(x, y, z) {\n\t  return x ^ y ^ z;\n\t}\n\tvar p32_1 = p32;\n\n\tfunction s0_256(x) {\n\t  return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);\n\t}\n\tvar s0_256_1 = s0_256;\n\n\tfunction s1_256(x) {\n\t  return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);\n\t}\n\tvar s1_256_1 = s1_256;\n\n\tfunction g0_256(x) {\n\t  return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ (x >>> 3);\n\t}\n\tvar g0_256_1 = g0_256;\n\n\tfunction g1_256(x) {\n\t  return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ (x >>> 10);\n\t}\n\tvar g1_256_1 = g1_256;\n\n\tvar common$1 = {\n\t\tft_1: ft_1_1,\n\t\tch32: ch32_1,\n\t\tmaj32: maj32_1,\n\t\tp32: p32_1,\n\t\ts0_256: s0_256_1,\n\t\ts1_256: s1_256_1,\n\t\tg0_256: g0_256_1,\n\t\tg1_256: g1_256_1\n\t};\n\n\t'use strict';\n\n\n\n\n\n\tvar rotl32$1 = utils.rotl32;\n\tvar sum32$1 = utils.sum32;\n\tvar sum32_5$1 = utils.sum32_5;\n\tvar ft_1$1 = common$1.ft_1;\n\tvar BlockHash$1 = common.BlockHash;\n\n\tvar sha1_K = [\n\t  0x5A827999, 0x6ED9EBA1,\n\t  0x8F1BBCDC, 0xCA62C1D6\n\t];\n\n\tfunction SHA1() {\n\t  if (!(this instanceof SHA1))\n\t    return new SHA1();\n\n\t  BlockHash$1.call(this);\n\t  this.h = [\n\t    0x67452301, 0xefcdab89, 0x98badcfe,\n\t    0x10325476, 0xc3d2e1f0 ];\n\t  this.W = new Array(80);\n\t}\n\n\tutils.inherits(SHA1, BlockHash$1);\n\tvar _1 = SHA1;\n\n\tSHA1.blockSize = 512;\n\tSHA1.outSize = 160;\n\tSHA1.hmacStrength = 80;\n\tSHA1.padLength = 64;\n\n\tSHA1.prototype._update = function _update(msg, start) {\n\t  var W = this.W;\n\n\t  for (var i = 0; i < 16; i++)\n\t    W[i] = msg[start + i];\n\n\t  for(; i < W.length; i++)\n\t    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n\t  var a = this.h[0];\n\t  var b = this.h[1];\n\t  var c = this.h[2];\n\t  var d = this.h[3];\n\t  var e = this.h[4];\n\n\t  for (i = 0; i < W.length; i++) {\n\t    var s = ~~(i / 20);\n\t    var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);\n\t    e = d;\n\t    d = c;\n\t    c = rotl32$1(b, 30);\n\t    b = a;\n\t    a = t;\n\t  }\n\n\t  this.h[0] = sum32$1(this.h[0], a);\n\t  this.h[1] = sum32$1(this.h[1], b);\n\t  this.h[2] = sum32$1(this.h[2], c);\n\t  this.h[3] = sum32$1(this.h[3], d);\n\t  this.h[4] = sum32$1(this.h[4], e);\n\t};\n\n\tSHA1.prototype._digest = function digest(enc) {\n\t  if (enc === 'hex')\n\t    return utils.toHex32(this.h, 'big');\n\t  else\n\t    return utils.split32(this.h, 'big');\n\t};\n\n\t'use strict';\n\n\n\n\n\n\n\tvar sum32$2 = utils.sum32;\n\tvar sum32_4$1 = utils.sum32_4;\n\tvar sum32_5$2 = utils.sum32_5;\n\tvar ch32$1 = common$1.ch32;\n\tvar maj32$1 = common$1.maj32;\n\tvar s0_256$1 = common$1.s0_256;\n\tvar s1_256$1 = common$1.s1_256;\n\tvar g0_256$1 = common$1.g0_256;\n\tvar g1_256$1 = common$1.g1_256;\n\n\tvar BlockHash$2 = common.BlockHash;\n\n\tvar sha256_K = [\n\t  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n\t  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n\t  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n\t  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n\t  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n\t  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n\t  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n\t  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n\t  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n\t  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n\t  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n\t  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n\t  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n\t  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n\t  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n\t  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n\t];\n\n\tfunction SHA256() {\n\t  if (!(this instanceof SHA256))\n\t    return new SHA256();\n\n\t  BlockHash$2.call(this);\n\t  this.h = [\n\t    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n\t    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n\t  ];\n\t  this.k = sha256_K;\n\t  this.W = new Array(64);\n\t}\n\tutils.inherits(SHA256, BlockHash$2);\n\tvar _256 = SHA256;\n\n\tSHA256.blockSize = 512;\n\tSHA256.outSize = 256;\n\tSHA256.hmacStrength = 192;\n\tSHA256.padLength = 64;\n\n\tSHA256.prototype._update = function _update(msg, start) {\n\t  var W = this.W;\n\n\t  for (var i = 0; i < 16; i++)\n\t    W[i] = msg[start + i];\n\t  for (; i < W.length; i++)\n\t    W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);\n\n\t  var a = this.h[0];\n\t  var b = this.h[1];\n\t  var c = this.h[2];\n\t  var d = this.h[3];\n\t  var e = this.h[4];\n\t  var f = this.h[5];\n\t  var g = this.h[6];\n\t  var h = this.h[7];\n\n\t  minimalisticAssert(this.k.length === W.length);\n\t  for (i = 0; i < W.length; i++) {\n\t    var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);\n\t    var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));\n\t    h = g;\n\t    g = f;\n\t    f = e;\n\t    e = sum32$2(d, T1);\n\t    d = c;\n\t    c = b;\n\t    b = a;\n\t    a = sum32$2(T1, T2);\n\t  }\n\n\t  this.h[0] = sum32$2(this.h[0], a);\n\t  this.h[1] = sum32$2(this.h[1], b);\n\t  this.h[2] = sum32$2(this.h[2], c);\n\t  this.h[3] = sum32$2(this.h[3], d);\n\t  this.h[4] = sum32$2(this.h[4], e);\n\t  this.h[5] = sum32$2(this.h[5], f);\n\t  this.h[6] = sum32$2(this.h[6], g);\n\t  this.h[7] = sum32$2(this.h[7], h);\n\t};\n\n\tSHA256.prototype._digest = function digest(enc) {\n\t  if (enc === 'hex')\n\t    return utils.toHex32(this.h, 'big');\n\t  else\n\t    return utils.split32(this.h, 'big');\n\t};\n\n\t'use strict';\n\n\n\n\n\tfunction SHA224() {\n\t  if (!(this instanceof SHA224))\n\t    return new SHA224();\n\n\t  _256.call(this);\n\t  this.h = [\n\t    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n\t}\n\tutils.inherits(SHA224, _256);\n\tvar _224 = SHA224;\n\n\tSHA224.blockSize = 512;\n\tSHA224.outSize = 224;\n\tSHA224.hmacStrength = 192;\n\tSHA224.padLength = 64;\n\n\tSHA224.prototype._digest = function digest(enc) {\n\t  // Just truncate output\n\t  if (enc === 'hex')\n\t    return utils.toHex32(this.h.slice(0, 7), 'big');\n\t  else\n\t    return utils.split32(this.h.slice(0, 7), 'big');\n\t};\n\n\t'use strict';\n\n\n\n\n\n\tvar rotr64_hi$1 = utils.rotr64_hi;\n\tvar rotr64_lo$1 = utils.rotr64_lo;\n\tvar shr64_hi$1 = utils.shr64_hi;\n\tvar shr64_lo$1 = utils.shr64_lo;\n\tvar sum64$1 = utils.sum64;\n\tvar sum64_hi$1 = utils.sum64_hi;\n\tvar sum64_lo$1 = utils.sum64_lo;\n\tvar sum64_4_hi$1 = utils.sum64_4_hi;\n\tvar sum64_4_lo$1 = utils.sum64_4_lo;\n\tvar sum64_5_hi$1 = utils.sum64_5_hi;\n\tvar sum64_5_lo$1 = utils.sum64_5_lo;\n\n\tvar BlockHash$3 = common.BlockHash;\n\n\tvar sha512_K = [\n\t  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n\t  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n\t  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n\t  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n\t  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n\t  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n\t  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n\t  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n\t  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n\t  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n\t  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n\t  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n\t  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n\t  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n\t  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n\t  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n\t  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n\t  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n\t  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n\t  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n\t  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n\t  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n\t  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n\t  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n\t  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n\t  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n\t  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n\t  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n\t  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n\t  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n\t  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n\t  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n\t  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n\t  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n\t  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n\t  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n\t  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n\t  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n\t  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n\t  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n\t];\n\n\tfunction SHA512() {\n\t  if (!(this instanceof SHA512))\n\t    return new SHA512();\n\n\t  BlockHash$3.call(this);\n\t  this.h = [\n\t    0x6a09e667, 0xf3bcc908,\n\t    0xbb67ae85, 0x84caa73b,\n\t    0x3c6ef372, 0xfe94f82b,\n\t    0xa54ff53a, 0x5f1d36f1,\n\t    0x510e527f, 0xade682d1,\n\t    0x9b05688c, 0x2b3e6c1f,\n\t    0x1f83d9ab, 0xfb41bd6b,\n\t    0x5be0cd19, 0x137e2179 ];\n\t  this.k = sha512_K;\n\t  this.W = new Array(160);\n\t}\n\tutils.inherits(SHA512, BlockHash$3);\n\tvar _512 = SHA512;\n\n\tSHA512.blockSize = 1024;\n\tSHA512.outSize = 512;\n\tSHA512.hmacStrength = 192;\n\tSHA512.padLength = 128;\n\n\tSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n\t  var W = this.W;\n\n\t  // 32 x 32bit words\n\t  for (var i = 0; i < 32; i++)\n\t    W[i] = msg[start + i];\n\t  for (; i < W.length; i += 2) {\n\t    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n\t    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n\t    var c1_hi = W[i - 14];  // i - 7\n\t    var c1_lo = W[i - 13];\n\t    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n\t    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n\t    var c3_hi = W[i - 32];  // i - 16\n\t    var c3_lo = W[i - 31];\n\n\t    W[i] = sum64_4_hi$1(\n\t      c0_hi, c0_lo,\n\t      c1_hi, c1_lo,\n\t      c2_hi, c2_lo,\n\t      c3_hi, c3_lo);\n\t    W[i + 1] = sum64_4_lo$1(\n\t      c0_hi, c0_lo,\n\t      c1_hi, c1_lo,\n\t      c2_hi, c2_lo,\n\t      c3_hi, c3_lo);\n\t  }\n\t};\n\n\tSHA512.prototype._update = function _update(msg, start) {\n\t  this._prepareBlock(msg, start);\n\n\t  var W = this.W;\n\n\t  var ah = this.h[0];\n\t  var al = this.h[1];\n\t  var bh = this.h[2];\n\t  var bl = this.h[3];\n\t  var ch = this.h[4];\n\t  var cl = this.h[5];\n\t  var dh = this.h[6];\n\t  var dl = this.h[7];\n\t  var eh = this.h[8];\n\t  var el = this.h[9];\n\t  var fh = this.h[10];\n\t  var fl = this.h[11];\n\t  var gh = this.h[12];\n\t  var gl = this.h[13];\n\t  var hh = this.h[14];\n\t  var hl = this.h[15];\n\n\t  minimalisticAssert(this.k.length === W.length);\n\t  for (var i = 0; i < W.length; i += 2) {\n\t    var c0_hi = hh;\n\t    var c0_lo = hl;\n\t    var c1_hi = s1_512_hi(eh, el);\n\t    var c1_lo = s1_512_lo(eh, el);\n\t    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n\t    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n\t    var c3_hi = this.k[i];\n\t    var c3_lo = this.k[i + 1];\n\t    var c4_hi = W[i];\n\t    var c4_lo = W[i + 1];\n\n\t    var T1_hi = sum64_5_hi$1(\n\t      c0_hi, c0_lo,\n\t      c1_hi, c1_lo,\n\t      c2_hi, c2_lo,\n\t      c3_hi, c3_lo,\n\t      c4_hi, c4_lo);\n\t    var T1_lo = sum64_5_lo$1(\n\t      c0_hi, c0_lo,\n\t      c1_hi, c1_lo,\n\t      c2_hi, c2_lo,\n\t      c3_hi, c3_lo,\n\t      c4_hi, c4_lo);\n\n\t    c0_hi = s0_512_hi(ah, al);\n\t    c0_lo = s0_512_lo(ah, al);\n\t    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n\t    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n\t    var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);\n\t    var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);\n\n\t    hh = gh;\n\t    hl = gl;\n\n\t    gh = fh;\n\t    gl = fl;\n\n\t    fh = eh;\n\t    fl = el;\n\n\t    eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);\n\t    el = sum64_lo$1(dl, dl, T1_hi, T1_lo);\n\n\t    dh = ch;\n\t    dl = cl;\n\n\t    ch = bh;\n\t    cl = bl;\n\n\t    bh = ah;\n\t    bl = al;\n\n\t    ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);\n\t    al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);\n\t  }\n\n\t  sum64$1(this.h, 0, ah, al);\n\t  sum64$1(this.h, 2, bh, bl);\n\t  sum64$1(this.h, 4, ch, cl);\n\t  sum64$1(this.h, 6, dh, dl);\n\t  sum64$1(this.h, 8, eh, el);\n\t  sum64$1(this.h, 10, fh, fl);\n\t  sum64$1(this.h, 12, gh, gl);\n\t  sum64$1(this.h, 14, hh, hl);\n\t};\n\n\tSHA512.prototype._digest = function digest(enc) {\n\t  if (enc === 'hex')\n\t    return utils.toHex32(this.h, 'big');\n\t  else\n\t    return utils.split32(this.h, 'big');\n\t};\n\n\tfunction ch64_hi(xh, xl, yh, yl, zh) {\n\t  var r = (xh & yh) ^ ((~xh) & zh);\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n\t  var r = (xl & yl) ^ ((~xl) & zl);\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction maj64_hi(xh, xl, yh, yl, zh) {\n\t  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n\t  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction s0_512_hi(xh, xl) {\n\t  var c0_hi = rotr64_hi$1(xh, xl, 28);\n\t  var c1_hi = rotr64_hi$1(xl, xh, 2);  // 34\n\t  var c2_hi = rotr64_hi$1(xl, xh, 7);  // 39\n\n\t  var r = c0_hi ^ c1_hi ^ c2_hi;\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction s0_512_lo(xh, xl) {\n\t  var c0_lo = rotr64_lo$1(xh, xl, 28);\n\t  var c1_lo = rotr64_lo$1(xl, xh, 2);  // 34\n\t  var c2_lo = rotr64_lo$1(xl, xh, 7);  // 39\n\n\t  var r = c0_lo ^ c1_lo ^ c2_lo;\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction s1_512_hi(xh, xl) {\n\t  var c0_hi = rotr64_hi$1(xh, xl, 14);\n\t  var c1_hi = rotr64_hi$1(xh, xl, 18);\n\t  var c2_hi = rotr64_hi$1(xl, xh, 9);  // 41\n\n\t  var r = c0_hi ^ c1_hi ^ c2_hi;\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction s1_512_lo(xh, xl) {\n\t  var c0_lo = rotr64_lo$1(xh, xl, 14);\n\t  var c1_lo = rotr64_lo$1(xh, xl, 18);\n\t  var c2_lo = rotr64_lo$1(xl, xh, 9);  // 41\n\n\t  var r = c0_lo ^ c1_lo ^ c2_lo;\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction g0_512_hi(xh, xl) {\n\t  var c0_hi = rotr64_hi$1(xh, xl, 1);\n\t  var c1_hi = rotr64_hi$1(xh, xl, 8);\n\t  var c2_hi = shr64_hi$1(xh, xl, 7);\n\n\t  var r = c0_hi ^ c1_hi ^ c2_hi;\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction g0_512_lo(xh, xl) {\n\t  var c0_lo = rotr64_lo$1(xh, xl, 1);\n\t  var c1_lo = rotr64_lo$1(xh, xl, 8);\n\t  var c2_lo = shr64_lo$1(xh, xl, 7);\n\n\t  var r = c0_lo ^ c1_lo ^ c2_lo;\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction g1_512_hi(xh, xl) {\n\t  var c0_hi = rotr64_hi$1(xh, xl, 19);\n\t  var c1_hi = rotr64_hi$1(xl, xh, 29);  // 61\n\t  var c2_hi = shr64_hi$1(xh, xl, 6);\n\n\t  var r = c0_hi ^ c1_hi ^ c2_hi;\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\tfunction g1_512_lo(xh, xl) {\n\t  var c0_lo = rotr64_lo$1(xh, xl, 19);\n\t  var c1_lo = rotr64_lo$1(xl, xh, 29);  // 61\n\t  var c2_lo = shr64_lo$1(xh, xl, 6);\n\n\t  var r = c0_lo ^ c1_lo ^ c2_lo;\n\t  if (r < 0)\n\t    r += 0x100000000;\n\t  return r;\n\t}\n\n\t'use strict';\n\n\n\n\n\n\tfunction SHA384() {\n\t  if (!(this instanceof SHA384))\n\t    return new SHA384();\n\n\t  _512.call(this);\n\t  this.h = [\n\t    0xcbbb9d5d, 0xc1059ed8,\n\t    0x629a292a, 0x367cd507,\n\t    0x9159015a, 0x3070dd17,\n\t    0x152fecd8, 0xf70e5939,\n\t    0x67332667, 0xffc00b31,\n\t    0x8eb44a87, 0x68581511,\n\t    0xdb0c2e0d, 0x64f98fa7,\n\t    0x47b5481d, 0xbefa4fa4 ];\n\t}\n\tutils.inherits(SHA384, _512);\n\tvar _384 = SHA384;\n\n\tSHA384.blockSize = 1024;\n\tSHA384.outSize = 384;\n\tSHA384.hmacStrength = 192;\n\tSHA384.padLength = 128;\n\n\tSHA384.prototype._digest = function digest(enc) {\n\t  if (enc === 'hex')\n\t    return utils.toHex32(this.h.slice(0, 12), 'big');\n\t  else\n\t    return utils.split32(this.h.slice(0, 12), 'big');\n\t};\n\n\t'use strict';\n\n\tvar sha1 = _1;\n\tvar sha224 = _224;\n\tvar sha256 = _256;\n\tvar sha384 = _384;\n\tvar sha512 = _512;\n\n\tvar sha = {\n\t\tsha1: sha1,\n\t\tsha224: sha224,\n\t\tsha256: sha256,\n\t\tsha384: sha384,\n\t\tsha512: sha512\n\t};\n\n\t'use strict';\n\n\n\n\n\tvar rotl32$2 = utils.rotl32;\n\tvar sum32$3 = utils.sum32;\n\tvar sum32_3$1 = utils.sum32_3;\n\tvar sum32_4$2 = utils.sum32_4;\n\tvar BlockHash$4 = common.BlockHash;\n\n\tfunction RIPEMD160() {\n\t  if (!(this instanceof RIPEMD160))\n\t    return new RIPEMD160();\n\n\t  BlockHash$4.call(this);\n\n\t  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n\t  this.endian = 'little';\n\t}\n\tutils.inherits(RIPEMD160, BlockHash$4);\n\tvar ripemd160 = RIPEMD160;\n\n\tRIPEMD160.blockSize = 512;\n\tRIPEMD160.outSize = 160;\n\tRIPEMD160.hmacStrength = 192;\n\tRIPEMD160.padLength = 64;\n\n\tRIPEMD160.prototype._update = function update(msg, start) {\n\t  var A = this.h[0];\n\t  var B = this.h[1];\n\t  var C = this.h[2];\n\t  var D = this.h[3];\n\t  var E = this.h[4];\n\t  var Ah = A;\n\t  var Bh = B;\n\t  var Ch = C;\n\t  var Dh = D;\n\t  var Eh = E;\n\t  for (var j = 0; j < 80; j++) {\n\t    var T = sum32$3(\n\t      rotl32$2(\n\t        sum32_4$2(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n\t        s[j]),\n\t      E);\n\t    A = E;\n\t    E = D;\n\t    D = rotl32$2(C, 10);\n\t    C = B;\n\t    B = T;\n\t    T = sum32$3(\n\t      rotl32$2(\n\t        sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n\t        sh[j]),\n\t      Eh);\n\t    Ah = Eh;\n\t    Eh = Dh;\n\t    Dh = rotl32$2(Ch, 10);\n\t    Ch = Bh;\n\t    Bh = T;\n\t  }\n\t  T = sum32_3$1(this.h[1], C, Dh);\n\t  this.h[1] = sum32_3$1(this.h[2], D, Eh);\n\t  this.h[2] = sum32_3$1(this.h[3], E, Ah);\n\t  this.h[3] = sum32_3$1(this.h[4], A, Bh);\n\t  this.h[4] = sum32_3$1(this.h[0], B, Ch);\n\t  this.h[0] = T;\n\t};\n\n\tRIPEMD160.prototype._digest = function digest(enc) {\n\t  if (enc === 'hex')\n\t    return utils.toHex32(this.h, 'little');\n\t  else\n\t    return utils.split32(this.h, 'little');\n\t};\n\n\tfunction f(j, x, y, z) {\n\t  if (j <= 15)\n\t    return x ^ y ^ z;\n\t  else if (j <= 31)\n\t    return (x & y) | ((~x) & z);\n\t  else if (j <= 47)\n\t    return (x | (~y)) ^ z;\n\t  else if (j <= 63)\n\t    return (x & z) | (y & (~z));\n\t  else\n\t    return x ^ (y | (~z));\n\t}\n\n\tfunction K(j) {\n\t  if (j <= 15)\n\t    return 0x00000000;\n\t  else if (j <= 31)\n\t    return 0x5a827999;\n\t  else if (j <= 47)\n\t    return 0x6ed9eba1;\n\t  else if (j <= 63)\n\t    return 0x8f1bbcdc;\n\t  else\n\t    return 0xa953fd4e;\n\t}\n\n\tfunction Kh(j) {\n\t  if (j <= 15)\n\t    return 0x50a28be6;\n\t  else if (j <= 31)\n\t    return 0x5c4dd124;\n\t  else if (j <= 47)\n\t    return 0x6d703ef3;\n\t  else if (j <= 63)\n\t    return 0x7a6d76e9;\n\t  else\n\t    return 0x00000000;\n\t}\n\n\tvar r = [\n\t  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n\t  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n\t  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n\t  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n\t  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n\t];\n\n\tvar rh = [\n\t  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n\t  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n\t  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n\t  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n\t  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n\t];\n\n\tvar s = [\n\t  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n\t  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n\t  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n\t  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n\t  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n\t];\n\n\tvar sh = [\n\t  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n\t  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n\t  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n\t  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n\t  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n\t];\n\n\tvar ripemd = {\n\t\tripemd160: ripemd160\n\t};\n\n\t'use strict';\n\n\n\n\n\tfunction Hmac(hash, key, enc) {\n\t  if (!(this instanceof Hmac))\n\t    return new Hmac(hash, key, enc);\n\t  this.Hash = hash;\n\t  this.blockSize = hash.blockSize / 8;\n\t  this.outSize = hash.outSize / 8;\n\t  this.inner = null;\n\t  this.outer = null;\n\n\t  this._init(utils.toArray(key, enc));\n\t}\n\tvar hmac = Hmac;\n\n\tHmac.prototype._init = function init(key) {\n\t  // Shorten key, if needed\n\t  if (key.length > this.blockSize)\n\t    key = new this.Hash().update(key).digest();\n\t  minimalisticAssert(key.length <= this.blockSize);\n\n\t  // Add padding to key\n\t  for (var i = key.length; i < this.blockSize; i++)\n\t    key.push(0);\n\n\t  for (i = 0; i < key.length; i++)\n\t    key[i] ^= 0x36;\n\t  this.inner = new this.Hash().update(key);\n\n\t  // 0x36 ^ 0x5c = 0x6a\n\t  for (i = 0; i < key.length; i++)\n\t    key[i] ^= 0x6a;\n\t  this.outer = new this.Hash().update(key);\n\t};\n\n\tHmac.prototype.update = function update(msg, enc) {\n\t  this.inner.update(msg, enc);\n\t  return this;\n\t};\n\n\tHmac.prototype.digest = function digest(enc) {\n\t  this.outer.update(this.inner.digest());\n\t  return this.outer.digest(enc);\n\t};\n\n\tvar hash_1 = createCommonjsModule(function (module, exports) {\n\tvar hash = exports;\n\n\thash.utils = utils;\n\thash.common = common;\n\thash.sha = sha;\n\thash.ripemd = ripemd;\n\thash.hmac = hmac;\n\n\t// Proxy hash functions to the main object\n\thash.sha1 = hash.sha.sha1;\n\thash.sha256 = hash.sha.sha256;\n\thash.sha224 = hash.sha.sha224;\n\thash.sha384 = hash.sha.sha384;\n\thash.sha512 = hash.sha.sha512;\n\thash.ripemd160 = hash.ripemd.ripemd160;\n\t});\n\n\tvar curves_1 = createCommonjsModule(function (module, exports) {\n\t'use strict';\n\n\tvar curves = exports;\n\n\n\n\n\n\tvar assert = utils_1$1.assert;\n\n\tfunction PresetCurve(options) {\n\t  if (options.type === 'short')\n\t    this.curve = new curve_1.short(options);\n\t  else if (options.type === 'edwards')\n\t    this.curve = new curve_1.edwards(options);\n\t  else\n\t    this.curve = new curve_1.mont(options);\n\t  this.g = this.curve.g;\n\t  this.n = this.curve.n;\n\t  this.hash = options.hash;\n\n\t  assert(this.g.validate(), 'Invalid curve');\n\t  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n\t}\n\tcurves.PresetCurve = PresetCurve;\n\n\tfunction defineCurve(name, options) {\n\t  Object.defineProperty(curves, name, {\n\t    configurable: true,\n\t    enumerable: true,\n\t    get: function() {\n\t      var curve = new PresetCurve(options);\n\t      Object.defineProperty(curves, name, {\n\t        configurable: true,\n\t        enumerable: true,\n\t        value: curve,\n\t      });\n\t      return curve;\n\t    },\n\t  });\n\t}\n\n\tdefineCurve('p192', {\n\t  type: 'short',\n\t  prime: 'p192',\n\t  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n\t  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n\t  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n\t  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n\t  hash: hash_1.sha256,\n\t  gRed: false,\n\t  g: [\n\t    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n\t    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',\n\t  ],\n\t});\n\n\tdefineCurve('p224', {\n\t  type: 'short',\n\t  prime: 'p224',\n\t  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n\t  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n\t  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n\t  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n\t  hash: hash_1.sha256,\n\t  gRed: false,\n\t  g: [\n\t    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n\t    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',\n\t  ],\n\t});\n\n\tdefineCurve('p256', {\n\t  type: 'short',\n\t  prime: null,\n\t  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n\t  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n\t  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n\t  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n\t  hash: hash_1.sha256,\n\t  gRed: false,\n\t  g: [\n\t    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n\t    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',\n\t  ],\n\t});\n\n\tdefineCurve('p384', {\n\t  type: 'short',\n\t  prime: null,\n\t  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n\t     'fffffffe ffffffff 00000000 00000000 ffffffff',\n\t  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n\t     'fffffffe ffffffff 00000000 00000000 fffffffc',\n\t  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n\t     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n\t  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n\t     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n\t  hash: hash_1.sha384,\n\t  gRed: false,\n\t  g: [\n\t    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n\t    '5502f25d bf55296c 3a545e38 72760ab7',\n\t    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n\t    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',\n\t  ],\n\t});\n\n\tdefineCurve('p521', {\n\t  type: 'short',\n\t  prime: null,\n\t  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n\t     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n\t     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n\t  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n\t     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n\t     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n\t  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n\t     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n\t     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n\t  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n\t     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n\t     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n\t  hash: hash_1.sha512,\n\t  gRed: false,\n\t  g: [\n\t    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n\t    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n\t    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n\t    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n\t    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n\t    '3fad0761 353c7086 a272c240 88be9476 9fd16650',\n\t  ],\n\t});\n\n\tdefineCurve('curve25519', {\n\t  type: 'mont',\n\t  prime: 'p25519',\n\t  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n\t  a: '76d06',\n\t  b: '1',\n\t  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n\t  hash: hash_1.sha256,\n\t  gRed: false,\n\t  g: [\n\t    '9',\n\t  ],\n\t});\n\n\tdefineCurve('ed25519', {\n\t  type: 'edwards',\n\t  prime: 'p25519',\n\t  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n\t  a: '-1',\n\t  c: '1',\n\t  // -121665 * (121666^(-1)) (mod P)\n\t  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n\t  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n\t  hash: hash_1.sha256,\n\t  gRed: false,\n\t  g: [\n\t    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n\t    // 4/5\n\t    '6666666666666666666666666666666666666666666666666666666666666658',\n\t  ],\n\t});\n\n\tvar pre;\n\ttry {\n\t  pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();\n\t} catch (e) {\n\t  pre = undefined;\n\t}\n\n\tdefineCurve('secp256k1', {\n\t  type: 'short',\n\t  prime: 'k256',\n\t  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n\t  a: '0',\n\t  b: '7',\n\t  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n\t  h: '1',\n\t  hash: hash_1.sha256,\n\n\t  // Precomputed endomorphism\n\t  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n\t  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n\t  basis: [\n\t    {\n\t      a: '3086d221a7d46bcde86c90e49284eb15',\n\t      b: '-e4437ed6010e88286f547fa90abfe4c3',\n\t    },\n\t    {\n\t      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n\t      b: '3086d221a7d46bcde86c90e49284eb15',\n\t    },\n\t  ],\n\n\t  gRed: false,\n\t  g: [\n\t    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n\t    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n\t    pre,\n\t  ],\n\t});\n\t});\n\n\t'use strict';\n\n\n\n\n\n\tfunction HmacDRBG(options) {\n\t  if (!(this instanceof HmacDRBG))\n\t    return new HmacDRBG(options);\n\t  this.hash = options.hash;\n\t  this.predResist = !!options.predResist;\n\n\t  this.outLen = this.hash.outSize;\n\t  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n\t  this._reseed = null;\n\t  this.reseedInterval = null;\n\t  this.K = null;\n\t  this.V = null;\n\n\t  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');\n\t  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');\n\t  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');\n\t  minimalisticAssert(entropy.length >= (this.minEntropy / 8),\n\t         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\t  this._init(entropy, nonce, pers);\n\t}\n\tvar hmacDrbg = HmacDRBG;\n\n\tHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n\t  var seed = entropy.concat(nonce).concat(pers);\n\n\t  this.K = new Array(this.outLen / 8);\n\t  this.V = new Array(this.outLen / 8);\n\t  for (var i = 0; i < this.V.length; i++) {\n\t    this.K[i] = 0x00;\n\t    this.V[i] = 0x01;\n\t  }\n\n\t  this._update(seed);\n\t  this._reseed = 1;\n\t  this.reseedInterval = 0x1000000000000;  // 2^48\n\t};\n\n\tHmacDRBG.prototype._hmac = function hmac() {\n\t  return new hash_1.hmac(this.hash, this.K);\n\t};\n\n\tHmacDRBG.prototype._update = function update(seed) {\n\t  var kmac = this._hmac()\n\t                 .update(this.V)\n\t                 .update([ 0x00 ]);\n\t  if (seed)\n\t    kmac = kmac.update(seed);\n\t  this.K = kmac.digest();\n\t  this.V = this._hmac().update(this.V).digest();\n\t  if (!seed)\n\t    return;\n\n\t  this.K = this._hmac()\n\t               .update(this.V)\n\t               .update([ 0x01 ])\n\t               .update(seed)\n\t               .digest();\n\t  this.V = this._hmac().update(this.V).digest();\n\t};\n\n\tHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n\t  // Optional entropy enc\n\t  if (typeof entropyEnc !== 'string') {\n\t    addEnc = add;\n\t    add = entropyEnc;\n\t    entropyEnc = null;\n\t  }\n\n\t  entropy = utils_1.toArray(entropy, entropyEnc);\n\t  add = utils_1.toArray(add, addEnc);\n\n\t  minimalisticAssert(entropy.length >= (this.minEntropy / 8),\n\t         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n\t  this._update(entropy.concat(add || []));\n\t  this._reseed = 1;\n\t};\n\n\tHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n\t  if (this._reseed > this.reseedInterval)\n\t    throw new Error('Reseed is required');\n\n\t  // Optional encoding\n\t  if (typeof enc !== 'string') {\n\t    addEnc = add;\n\t    add = enc;\n\t    enc = null;\n\t  }\n\n\t  // Optional additional data\n\t  if (add) {\n\t    add = utils_1.toArray(add, addEnc || 'hex');\n\t    this._update(add);\n\t  }\n\n\t  var temp = [];\n\t  while (temp.length < len) {\n\t    this.V = this._hmac().update(this.V).digest();\n\t    temp = temp.concat(this.V);\n\t  }\n\n\t  var res = temp.slice(0, len);\n\t  this._update(add);\n\t  this._reseed++;\n\t  return utils_1.encode(res, enc);\n\t};\n\n\t'use strict';\n\n\n\n\tvar assert$3 = utils_1$1.assert;\n\n\tfunction KeyPair(ec, options) {\n\t  this.ec = ec;\n\t  this.priv = null;\n\t  this.pub = null;\n\n\t  // KeyPair(ec, { priv: ..., pub: ... })\n\t  if (options.priv)\n\t    this._importPrivate(options.priv, options.privEnc);\n\t  if (options.pub)\n\t    this._importPublic(options.pub, options.pubEnc);\n\t}\n\tvar key = KeyPair;\n\n\tKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n\t  if (pub instanceof KeyPair)\n\t    return pub;\n\n\t  return new KeyPair(ec, {\n\t    pub: pub,\n\t    pubEnc: enc,\n\t  });\n\t};\n\n\tKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n\t  if (priv instanceof KeyPair)\n\t    return priv;\n\n\t  return new KeyPair(ec, {\n\t    priv: priv,\n\t    privEnc: enc,\n\t  });\n\t};\n\n\tKeyPair.prototype.validate = function validate() {\n\t  var pub = this.getPublic();\n\n\t  if (pub.isInfinity())\n\t    return { result: false, reason: 'Invalid public key' };\n\t  if (!pub.validate())\n\t    return { result: false, reason: 'Public key is not a point' };\n\t  if (!pub.mul(this.ec.curve.n).isInfinity())\n\t    return { result: false, reason: 'Public key * N != O' };\n\n\t  return { result: true, reason: null };\n\t};\n\n\tKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n\t  // compact is optional argument\n\t  if (typeof compact === 'string') {\n\t    enc = compact;\n\t    compact = null;\n\t  }\n\n\t  if (!this.pub)\n\t    this.pub = this.ec.g.mul(this.priv);\n\n\t  if (!enc)\n\t    return this.pub;\n\n\t  return this.pub.encode(enc, compact);\n\t};\n\n\tKeyPair.prototype.getPrivate = function getPrivate(enc) {\n\t  if (enc === 'hex')\n\t    return this.priv.toString(16, 2);\n\t  else\n\t    return this.priv;\n\t};\n\n\tKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n\t  this.priv = new bn(key, enc || 16);\n\n\t  // Ensure that the priv won't be bigger than n, otherwise we may fail\n\t  // in fixed multiplication method\n\t  this.priv = this.priv.umod(this.ec.curve.n);\n\t};\n\n\tKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n\t  if (key.x || key.y) {\n\t    // Montgomery points only have an `x` coordinate.\n\t    // Weierstrass/Edwards points on the other hand have both `x` and\n\t    // `y` coordinates.\n\t    if (this.ec.curve.type === 'mont') {\n\t      assert$3(key.x, 'Need x coordinate');\n\t    } else if (this.ec.curve.type === 'short' ||\n\t               this.ec.curve.type === 'edwards') {\n\t      assert$3(key.x && key.y, 'Need both x and y coordinate');\n\t    }\n\t    this.pub = this.ec.curve.point(key.x, key.y);\n\t    return;\n\t  }\n\t  this.pub = this.ec.curve.decodePoint(key, enc);\n\t};\n\n\t// ECDH\n\tKeyPair.prototype.derive = function derive(pub) {\n\t  if(!pub.validate()) {\n\t    assert$3(pub.validate(), 'public point not validated');\n\t  }\n\t  return pub.mul(this.priv).getX();\n\t};\n\n\t// ECDSA\n\tKeyPair.prototype.sign = function sign(msg, enc, options) {\n\t  return this.ec.sign(msg, this, enc, options);\n\t};\n\n\tKeyPair.prototype.verify = function verify(msg, signature) {\n\t  return this.ec.verify(msg, signature, this);\n\t};\n\n\tKeyPair.prototype.inspect = function inspect() {\n\t  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n\t         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n\t};\n\n\t'use strict';\n\n\n\n\n\tvar assert$4 = utils_1$1.assert;\n\n\tfunction Signature(options, enc) {\n\t  if (options instanceof Signature)\n\t    return options;\n\n\t  if (this._importDER(options, enc))\n\t    return;\n\n\t  assert$4(options.r && options.s, 'Signature without r or s');\n\t  this.r = new bn(options.r, 16);\n\t  this.s = new bn(options.s, 16);\n\t  if (options.recoveryParam === undefined)\n\t    this.recoveryParam = null;\n\t  else\n\t    this.recoveryParam = options.recoveryParam;\n\t}\n\tvar signature = Signature;\n\n\tfunction Position() {\n\t  this.place = 0;\n\t}\n\n\tfunction getLength(buf, p) {\n\t  var initial = buf[p.place++];\n\t  if (!(initial & 0x80)) {\n\t    return initial;\n\t  }\n\t  var octetLen = initial & 0xf;\n\n\t  // Indefinite length or overflow\n\t  if (octetLen === 0 || octetLen > 4) {\n\t    return false;\n\t  }\n\n\t  var val = 0;\n\t  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n\t    val <<= 8;\n\t    val |= buf[off];\n\t    val >>>= 0;\n\t  }\n\n\t  // Leading zeroes\n\t  if (val <= 0x7f) {\n\t    return false;\n\t  }\n\n\t  p.place = off;\n\t  return val;\n\t}\n\n\tfunction rmPadding(buf) {\n\t  var i = 0;\n\t  var len = buf.length - 1;\n\t  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n\t    i++;\n\t  }\n\t  if (i === 0) {\n\t    return buf;\n\t  }\n\t  return buf.slice(i);\n\t}\n\n\tSignature.prototype._importDER = function _importDER(data, enc) {\n\t  data = utils_1$1.toArray(data, enc);\n\t  var p = new Position();\n\t  if (data[p.place++] !== 0x30) {\n\t    return false;\n\t  }\n\t  var len = getLength(data, p);\n\t  if (len === false) {\n\t    return false;\n\t  }\n\t  if ((len + p.place) !== data.length) {\n\t    return false;\n\t  }\n\t  if (data[p.place++] !== 0x02) {\n\t    return false;\n\t  }\n\t  var rlen = getLength(data, p);\n\t  if (rlen === false) {\n\t    return false;\n\t  }\n\t  var r = data.slice(p.place, rlen + p.place);\n\t  p.place += rlen;\n\t  if (data[p.place++] !== 0x02) {\n\t    return false;\n\t  }\n\t  var slen = getLength(data, p);\n\t  if (slen === false) {\n\t    return false;\n\t  }\n\t  if (data.length !== slen + p.place) {\n\t    return false;\n\t  }\n\t  var s = data.slice(p.place, slen + p.place);\n\t  if (r[0] === 0) {\n\t    if (r[1] & 0x80) {\n\t      r = r.slice(1);\n\t    } else {\n\t      // Leading zeroes\n\t      return false;\n\t    }\n\t  }\n\t  if (s[0] === 0) {\n\t    if (s[1] & 0x80) {\n\t      s = s.slice(1);\n\t    } else {\n\t      // Leading zeroes\n\t      return false;\n\t    }\n\t  }\n\n\t  this.r = new bn(r);\n\t  this.s = new bn(s);\n\t  this.recoveryParam = null;\n\n\t  return true;\n\t};\n\n\tfunction constructLength(arr, len) {\n\t  if (len < 0x80) {\n\t    arr.push(len);\n\t    return;\n\t  }\n\t  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n\t  arr.push(octets | 0x80);\n\t  while (--octets) {\n\t    arr.push((len >>> (octets << 3)) & 0xff);\n\t  }\n\t  arr.push(len);\n\t}\n\n\tSignature.prototype.toDER = function toDER(enc) {\n\t  var r = this.r.toArray();\n\t  var s = this.s.toArray();\n\n\t  // Pad values\n\t  if (r[0] & 0x80)\n\t    r = [ 0 ].concat(r);\n\t  // Pad values\n\t  if (s[0] & 0x80)\n\t    s = [ 0 ].concat(s);\n\n\t  r = rmPadding(r);\n\t  s = rmPadding(s);\n\n\t  while (!s[0] && !(s[1] & 0x80)) {\n\t    s = s.slice(1);\n\t  }\n\t  var arr = [ 0x02 ];\n\t  constructLength(arr, r.length);\n\t  arr = arr.concat(r);\n\t  arr.push(0x02);\n\t  constructLength(arr, s.length);\n\t  var backHalf = arr.concat(s);\n\t  var res = [ 0x30 ];\n\t  constructLength(res, backHalf.length);\n\t  res = res.concat(backHalf);\n\t  return utils_1$1.encode(res, enc);\n\t};\n\n\t'use strict';\n\n\n\n\n\n\tvar rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });\n\tvar assert$5 = utils_1$1.assert;\n\n\n\n\n\tfunction EC(options) {\n\t  if (!(this instanceof EC))\n\t    return new EC(options);\n\n\t  // Shortcut `elliptic.ec(curve-name)`\n\t  if (typeof options === 'string') {\n\t    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),\n\t      'Unknown curve ' + options);\n\n\t    options = curves_1[options];\n\t  }\n\n\t  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n\t  if (options instanceof curves_1.PresetCurve)\n\t    options = { curve: options };\n\n\t  this.curve = options.curve.curve;\n\t  this.n = this.curve.n;\n\t  this.nh = this.n.ushrn(1);\n\t  this.g = this.curve.g;\n\n\t  // Point on curve\n\t  this.g = options.curve.g;\n\t  this.g.precompute(options.curve.n.bitLength() + 1);\n\n\t  // Hash for function for DRBG\n\t  this.hash = options.hash || options.curve.hash;\n\t}\n\tvar ec = EC;\n\n\tEC.prototype.keyPair = function keyPair(options) {\n\t  return new key(this, options);\n\t};\n\n\tEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n\t  return key.fromPrivate(this, priv, enc);\n\t};\n\n\tEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n\t  return key.fromPublic(this, pub, enc);\n\t};\n\n\tEC.prototype.genKeyPair = function genKeyPair(options) {\n\t  if (!options)\n\t    options = {};\n\n\t  // Instantiate Hmac_DRBG\n\t  var drbg = new hmacDrbg({\n\t    hash: this.hash,\n\t    pers: options.pers,\n\t    persEnc: options.persEnc || 'utf8',\n\t    entropy: options.entropy || rand(this.hash.hmacStrength),\n\t    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n\t    nonce: this.n.toArray(),\n\t  });\n\n\t  var bytes = this.n.byteLength();\n\t  var ns2 = this.n.sub(new bn(2));\n\t  for (;;) {\n\t    var priv = new bn(drbg.generate(bytes));\n\t    if (priv.cmp(ns2) > 0)\n\t      continue;\n\n\t    priv.iaddn(1);\n\t    return this.keyFromPrivate(priv);\n\t  }\n\t};\n\n\tEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n\t  var delta = msg.byteLength() * 8 - this.n.bitLength();\n\t  if (delta > 0)\n\t    msg = msg.ushrn(delta);\n\t  if (!truncOnly && msg.cmp(this.n) >= 0)\n\t    return msg.sub(this.n);\n\t  else\n\t    return msg;\n\t};\n\n\tEC.prototype.sign = function sign(msg, key, enc, options) {\n\t  if (typeof enc === 'object') {\n\t    options = enc;\n\t    enc = null;\n\t  }\n\t  if (!options)\n\t    options = {};\n\n\t  key = this.keyFromPrivate(key, enc);\n\t  msg = this._truncateToN(new bn(msg, 16));\n\n\t  // Zero-extend key to provide enough entropy\n\t  var bytes = this.n.byteLength();\n\t  var bkey = key.getPrivate().toArray('be', bytes);\n\n\t  // Zero-extend nonce to have the same byte size as N\n\t  var nonce = msg.toArray('be', bytes);\n\n\t  // Instantiate Hmac_DRBG\n\t  var drbg = new hmacDrbg({\n\t    hash: this.hash,\n\t    entropy: bkey,\n\t    nonce: nonce,\n\t    pers: options.pers,\n\t    persEnc: options.persEnc || 'utf8',\n\t  });\n\n\t  // Number of bytes to generate\n\t  var ns1 = this.n.sub(new bn(1));\n\n\t  for (var iter = 0; ; iter++) {\n\t    var k = options.k ?\n\t      options.k(iter) :\n\t      new bn(drbg.generate(this.n.byteLength()));\n\t    k = this._truncateToN(k, true);\n\t    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n\t      continue;\n\n\t    var kp = this.g.mul(k);\n\t    if (kp.isInfinity())\n\t      continue;\n\n\t    var kpX = kp.getX();\n\t    var r = kpX.umod(this.n);\n\t    if (r.cmpn(0) === 0)\n\t      continue;\n\n\t    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n\t    s = s.umod(this.n);\n\t    if (s.cmpn(0) === 0)\n\t      continue;\n\n\t    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n\t                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n\t    // Use complement of `s`, if it is > `n / 2`\n\t    if (options.canonical && s.cmp(this.nh) > 0) {\n\t      s = this.n.sub(s);\n\t      recoveryParam ^= 1;\n\t    }\n\n\t    return new signature({ r: r, s: s, recoveryParam: recoveryParam });\n\t  }\n\t};\n\n\tEC.prototype.verify = function verify(msg, signature$1, key, enc) {\n\t  msg = this._truncateToN(new bn(msg, 16));\n\t  key = this.keyFromPublic(key, enc);\n\t  signature$1 = new signature(signature$1, 'hex');\n\n\t  // Perform primitive values validation\n\t  var r = signature$1.r;\n\t  var s = signature$1.s;\n\t  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n\t    return false;\n\t  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n\t    return false;\n\n\t  // Validate signature\n\t  var sinv = s.invm(this.n);\n\t  var u1 = sinv.mul(msg).umod(this.n);\n\t  var u2 = sinv.mul(r).umod(this.n);\n\t  var p;\n\n\t  if (!this.curve._maxwellTrick) {\n\t    p = this.g.mulAdd(u1, key.getPublic(), u2);\n\t    if (p.isInfinity())\n\t      return false;\n\n\t    return p.getX().umod(this.n).cmp(r) === 0;\n\t  }\n\n\t  // NOTE: Greg Maxwell's trick, inspired by:\n\t  // https://git.io/vad3K\n\n\t  p = this.g.jmulAdd(u1, key.getPublic(), u2);\n\t  if (p.isInfinity())\n\t    return false;\n\n\t  // Compare `p.x` of Jacobian point with `r`,\n\t  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n\t  // inverse of `p.z^2`\n\t  return p.eqXToP(r);\n\t};\n\n\tEC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {\n\t  assert$5((3 & j) === j, 'The recovery param is more than two bits');\n\t  signature$1 = new signature(signature$1, enc);\n\n\t  var n = this.n;\n\t  var e = new bn(msg);\n\t  var r = signature$1.r;\n\t  var s = signature$1.s;\n\n\t  // A set LSB signifies that the y-coordinate is odd\n\t  var isYOdd = j & 1;\n\t  var isSecondKey = j >> 1;\n\t  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n\t    throw new Error('Unable to find sencond key candinate');\n\n\t  // 1.1. Let x = r + jn.\n\t  if (isSecondKey)\n\t    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n\t  else\n\t    r = this.curve.pointFromX(r, isYOdd);\n\n\t  var rInv = signature$1.r.invm(n);\n\t  var s1 = n.sub(e).mul(rInv).umod(n);\n\t  var s2 = s.mul(rInv).umod(n);\n\n\t  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n\t  //               Q = r^-1 (sR + -eG)\n\t  return this.g.mulAdd(s1, r, s2);\n\t};\n\n\tEC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {\n\t  signature$1 = new signature(signature$1, enc);\n\t  if (signature$1.recoveryParam !== null)\n\t    return signature$1.recoveryParam;\n\n\t  for (var i = 0; i < 4; i++) {\n\t    var Qprime;\n\t    try {\n\t      Qprime = this.recoverPubKey(e, signature$1, i);\n\t    } catch (e) {\n\t      continue;\n\t    }\n\n\t    if (Qprime.eq(Q))\n\t      return i;\n\t  }\n\t  throw new Error('Unable to find valid recovery factor');\n\t};\n\n\tvar elliptic_1 = createCommonjsModule(function (module, exports) {\n\t'use strict';\n\n\tvar elliptic = exports;\n\n\telliptic.version = /*RicMoo:ethers*/{ version: \"6.5.4\" }.version;\n\telliptic.utils = utils_1$1;\n\telliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });\n\telliptic.curve = curve_1;\n\telliptic.curves = curves_1;\n\n\t// Protocols\n\telliptic.ec = ec;\n\telliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);\n\t});\n\n\tvar elliptic = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {\n\t    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.EC = void 0;\n\tvar elliptic_1$1 = __importDefault(elliptic_1);\n\tvar EC = elliptic_1$1.default.ec;\n\texports.EC = EC;\n\n\t});\n\n\tvar elliptic$1 = /*@__PURE__*/getDefaultExportFromCjs(elliptic);\n\n\tvar _version$m = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"signing-key/5.5.0\";\n\n\t});\n\n\tvar _version$n = /*@__PURE__*/getDefaultExportFromCjs(_version$m);\n\n\tvar lib$d = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.computePublicKey = exports.recoverPublicKey = exports.SigningKey = void 0;\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$m.version);\n\tvar _curve = null;\n\tfunction getCurve() {\n\t    if (!_curve) {\n\t        _curve = new elliptic.EC(\"secp256k1\");\n\t    }\n\t    return _curve;\n\t}\n\tvar SigningKey = /** @class */ (function () {\n\t    function SigningKey(privateKey) {\n\t        (0, lib$3.defineReadOnly)(this, \"curve\", \"secp256k1\");\n\t        (0, lib$3.defineReadOnly)(this, \"privateKey\", (0, lib$1.hexlify)(privateKey));\n\t        var keyPair = getCurve().keyFromPrivate((0, lib$1.arrayify)(this.privateKey));\n\t        (0, lib$3.defineReadOnly)(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n\t        (0, lib$3.defineReadOnly)(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n\t        (0, lib$3.defineReadOnly)(this, \"_isSigningKey\", true);\n\t    }\n\t    SigningKey.prototype._addPoint = function (other) {\n\t        var p0 = getCurve().keyFromPublic((0, lib$1.arrayify)(this.publicKey));\n\t        var p1 = getCurve().keyFromPublic((0, lib$1.arrayify)(other));\n\t        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n\t    };\n\t    SigningKey.prototype.signDigest = function (digest) {\n\t        var keyPair = getCurve().keyFromPrivate((0, lib$1.arrayify)(this.privateKey));\n\t        var digestBytes = (0, lib$1.arrayify)(digest);\n\t        if (digestBytes.length !== 32) {\n\t            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n\t        }\n\t        var signature = keyPair.sign(digestBytes, { canonical: true });\n\t        return (0, lib$1.splitSignature)({\n\t            recoveryParam: signature.recoveryParam,\n\t            r: (0, lib$1.hexZeroPad)(\"0x\" + signature.r.toString(16), 32),\n\t            s: (0, lib$1.hexZeroPad)(\"0x\" + signature.s.toString(16), 32),\n\t        });\n\t    };\n\t    SigningKey.prototype.computeSharedSecret = function (otherKey) {\n\t        var keyPair = getCurve().keyFromPrivate((0, lib$1.arrayify)(this.privateKey));\n\t        var otherKeyPair = getCurve().keyFromPublic((0, lib$1.arrayify)(computePublicKey(otherKey)));\n\t        return (0, lib$1.hexZeroPad)(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n\t    };\n\t    SigningKey.isSigningKey = function (value) {\n\t        return !!(value && value._isSigningKey);\n\t    };\n\t    return SigningKey;\n\t}());\n\texports.SigningKey = SigningKey;\n\tfunction recoverPublicKey(digest, signature) {\n\t    var sig = (0, lib$1.splitSignature)(signature);\n\t    var rs = { r: (0, lib$1.arrayify)(sig.r), s: (0, lib$1.arrayify)(sig.s) };\n\t    return \"0x\" + getCurve().recoverPubKey((0, lib$1.arrayify)(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n\t}\n\texports.recoverPublicKey = recoverPublicKey;\n\tfunction computePublicKey(key, compressed) {\n\t    var bytes = (0, lib$1.arrayify)(key);\n\t    if (bytes.length === 32) {\n\t        var signingKey = new SigningKey(bytes);\n\t        if (compressed) {\n\t            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n\t        }\n\t        return signingKey.publicKey;\n\t    }\n\t    else if (bytes.length === 33) {\n\t        if (compressed) {\n\t            return (0, lib$1.hexlify)(bytes);\n\t        }\n\t        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n\t    }\n\t    else if (bytes.length === 65) {\n\t        if (!compressed) {\n\t            return (0, lib$1.hexlify)(bytes);\n\t        }\n\t        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n\t    }\n\t    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n\t}\n\texports.computePublicKey = computePublicKey;\n\n\t});\n\n\tvar index$d = /*@__PURE__*/getDefaultExportFromCjs(lib$d);\n\n\tvar _version$o = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"transactions/5.5.0\";\n\n\t});\n\n\tvar _version$p = /*@__PURE__*/getDefaultExportFromCjs(_version$o);\n\n\tvar lib$e = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {\n\t    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n\t}) : function(o, v) {\n\t    o[\"default\"] = v;\n\t});\n\tvar __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {\n\t    if (mod && mod.__esModule) return mod;\n\t    var result = {};\n\t    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\t    __setModuleDefault(result, mod);\n\t    return result;\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.parse = exports.serialize = exports.accessListify = exports.recoverAddress = exports.computeAddress = exports.TransactionTypes = void 0;\n\n\n\n\n\n\n\tvar RLP = __importStar(lib$5);\n\n\n\n\tvar logger = new lib.Logger(_version$o.version);\n\tvar TransactionTypes;\n\t(function (TransactionTypes) {\n\t    TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n\t    TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n\t    TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n\t})(TransactionTypes = exports.TransactionTypes || (exports.TransactionTypes = {}));\n\t;\n\t///////////////////////////////\n\tfunction handleAddress(value) {\n\t    if (value === \"0x\") {\n\t        return null;\n\t    }\n\t    return (0, lib$6.getAddress)(value);\n\t}\n\tfunction handleNumber(value) {\n\t    if (value === \"0x\") {\n\t        return lib$7.Zero;\n\t    }\n\t    return lib$2.BigNumber.from(value);\n\t}\n\t// Legacy Transaction Fields\n\tvar transactionFields = [\n\t    { name: \"nonce\", maxLength: 32, numeric: true },\n\t    { name: \"gasPrice\", maxLength: 32, numeric: true },\n\t    { name: \"gasLimit\", maxLength: 32, numeric: true },\n\t    { name: \"to\", length: 20 },\n\t    { name: \"value\", maxLength: 32, numeric: true },\n\t    { name: \"data\" },\n\t];\n\tvar allowedTransactionKeys = {\n\t    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true\n\t};\n\tfunction computeAddress(key) {\n\t    var publicKey = (0, lib$d.computePublicKey)(key);\n\t    return (0, lib$6.getAddress)((0, lib$1.hexDataSlice)((0, lib$4.keccak256)((0, lib$1.hexDataSlice)(publicKey, 1)), 12));\n\t}\n\texports.computeAddress = computeAddress;\n\tfunction recoverAddress(digest, signature) {\n\t    return computeAddress((0, lib$d.recoverPublicKey)((0, lib$1.arrayify)(digest), signature));\n\t}\n\texports.recoverAddress = recoverAddress;\n\tfunction formatNumber(value, name) {\n\t    var result = (0, lib$1.stripZeros)(lib$2.BigNumber.from(value).toHexString());\n\t    if (result.length > 32) {\n\t        logger.throwArgumentError(\"invalid length for \" + name, (\"transaction:\" + name), value);\n\t    }\n\t    return result;\n\t}\n\tfunction accessSetify(addr, storageKeys) {\n\t    return {\n\t        address: (0, lib$6.getAddress)(addr),\n\t        storageKeys: (storageKeys || []).map(function (storageKey, index) {\n\t            if ((0, lib$1.hexDataLength)(storageKey) !== 32) {\n\t                logger.throwArgumentError(\"invalid access list storageKey\", \"accessList[\" + addr + \":\" + index + \"]\", storageKey);\n\t            }\n\t            return storageKey.toLowerCase();\n\t        })\n\t    };\n\t}\n\tfunction accessListify(value) {\n\t    if (Array.isArray(value)) {\n\t        return value.map(function (set, index) {\n\t            if (Array.isArray(set)) {\n\t                if (set.length > 2) {\n\t                    logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", \"value[\" + index + \"]\", set);\n\t                }\n\t                return accessSetify(set[0], set[1]);\n\t            }\n\t            return accessSetify(set.address, set.storageKeys);\n\t        });\n\t    }\n\t    var result = Object.keys(value).map(function (addr) {\n\t        var storageKeys = value[addr].reduce(function (accum, storageKey) {\n\t            accum[storageKey] = true;\n\t            return accum;\n\t        }, {});\n\t        return accessSetify(addr, Object.keys(storageKeys).sort());\n\t    });\n\t    result.sort(function (a, b) { return (a.address.localeCompare(b.address)); });\n\t    return result;\n\t}\n\texports.accessListify = accessListify;\n\tfunction formatAccessList(value) {\n\t    return accessListify(value).map(function (set) { return [set.address, set.storageKeys]; });\n\t}\n\tfunction _serializeEip1559(transaction, signature) {\n\t    // If there is an explicit gasPrice, make sure it matches the\n\t    // EIP-1559 fees; otherwise they may not understand what they\n\t    // think they are setting in terms of fee.\n\t    if (transaction.gasPrice != null) {\n\t        var gasPrice = lib$2.BigNumber.from(transaction.gasPrice);\n\t        var maxFeePerGas = lib$2.BigNumber.from(transaction.maxFeePerGas || 0);\n\t        if (!gasPrice.eq(maxFeePerGas)) {\n\t            logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n\t                gasPrice: gasPrice,\n\t                maxFeePerGas: maxFeePerGas\n\t            });\n\t        }\n\t    }\n\t    var fields = [\n\t        formatNumber(transaction.chainId || 0, \"chainId\"),\n\t        formatNumber(transaction.nonce || 0, \"nonce\"),\n\t        formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n\t        formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"),\n\t        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n\t        ((transaction.to != null) ? (0, lib$6.getAddress)(transaction.to) : \"0x\"),\n\t        formatNumber(transaction.value || 0, \"value\"),\n\t        (transaction.data || \"0x\"),\n\t        (formatAccessList(transaction.accessList || []))\n\t    ];\n\t    if (signature) {\n\t        var sig = (0, lib$1.splitSignature)(signature);\n\t        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n\t        fields.push((0, lib$1.stripZeros)(sig.r));\n\t        fields.push((0, lib$1.stripZeros)(sig.s));\n\t    }\n\t    return (0, lib$1.hexConcat)([\"0x02\", RLP.encode(fields)]);\n\t}\n\tfunction _serializeEip2930(transaction, signature) {\n\t    var fields = [\n\t        formatNumber(transaction.chainId || 0, \"chainId\"),\n\t        formatNumber(transaction.nonce || 0, \"nonce\"),\n\t        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n\t        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n\t        ((transaction.to != null) ? (0, lib$6.getAddress)(transaction.to) : \"0x\"),\n\t        formatNumber(transaction.value || 0, \"value\"),\n\t        (transaction.data || \"0x\"),\n\t        (formatAccessList(transaction.accessList || []))\n\t    ];\n\t    if (signature) {\n\t        var sig = (0, lib$1.splitSignature)(signature);\n\t        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n\t        fields.push((0, lib$1.stripZeros)(sig.r));\n\t        fields.push((0, lib$1.stripZeros)(sig.s));\n\t    }\n\t    return (0, lib$1.hexConcat)([\"0x01\", RLP.encode(fields)]);\n\t}\n\t// Legacy Transactions and EIP-155\n\tfunction _serialize(transaction, signature) {\n\t    (0, lib$3.checkProperties)(transaction, allowedTransactionKeys);\n\t    var raw = [];\n\t    transactionFields.forEach(function (fieldInfo) {\n\t        var value = transaction[fieldInfo.name] || ([]);\n\t        var options = {};\n\t        if (fieldInfo.numeric) {\n\t            options.hexPad = \"left\";\n\t        }\n\t        value = (0, lib$1.arrayify)((0, lib$1.hexlify)(value, options));\n\t        // Fixed-width field\n\t        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n\t            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n\t        }\n\t        // Variable-width (with a maximum)\n\t        if (fieldInfo.maxLength) {\n\t            value = (0, lib$1.stripZeros)(value);\n\t            if (value.length > fieldInfo.maxLength) {\n\t                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n\t            }\n\t        }\n\t        raw.push((0, lib$1.hexlify)(value));\n\t    });\n\t    var chainId = 0;\n\t    if (transaction.chainId != null) {\n\t        // A chainId was provided; if non-zero we'll use EIP-155\n\t        chainId = transaction.chainId;\n\t        if (typeof (chainId) !== \"number\") {\n\t            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n\t        }\n\t    }\n\t    else if (signature && !(0, lib$1.isBytesLike)(signature) && signature.v > 28) {\n\t        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n\t        chainId = Math.floor((signature.v - 35) / 2);\n\t    }\n\t    // We have an EIP-155 transaction (chainId was specified and non-zero)\n\t    if (chainId !== 0) {\n\t        raw.push((0, lib$1.hexlify)(chainId)); // @TODO: hexValue?\n\t        raw.push(\"0x\");\n\t        raw.push(\"0x\");\n\t    }\n\t    // Requesting an unsigned transaction\n\t    if (!signature) {\n\t        return RLP.encode(raw);\n\t    }\n\t    // The splitSignature will ensure the transaction has a recoveryParam in the\n\t    // case that the signTransaction function only adds a v.\n\t    var sig = (0, lib$1.splitSignature)(signature);\n\t    // We pushed a chainId and null r, s on for hashing only; remove those\n\t    var v = 27 + sig.recoveryParam;\n\t    if (chainId !== 0) {\n\t        raw.pop();\n\t        raw.pop();\n\t        raw.pop();\n\t        v += chainId * 2 + 8;\n\t        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n\t        if (sig.v > 28 && sig.v !== v) {\n\t            logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n\t        }\n\t    }\n\t    else if (sig.v !== v) {\n\t        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n\t    }\n\t    raw.push((0, lib$1.hexlify)(v));\n\t    raw.push((0, lib$1.stripZeros)((0, lib$1.arrayify)(sig.r)));\n\t    raw.push((0, lib$1.stripZeros)((0, lib$1.arrayify)(sig.s)));\n\t    return RLP.encode(raw);\n\t}\n\tfunction serialize(transaction, signature) {\n\t    // Legacy and EIP-155 Transactions\n\t    if (transaction.type == null || transaction.type === 0) {\n\t        if (transaction.accessList != null) {\n\t            logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n\t        }\n\t        return _serialize(transaction, signature);\n\t    }\n\t    // Typed Transactions (EIP-2718)\n\t    switch (transaction.type) {\n\t        case 1:\n\t            return _serializeEip2930(transaction, signature);\n\t        case 2:\n\t            return _serializeEip1559(transaction, signature);\n\t        default:\n\t            break;\n\t    }\n\t    return logger.throwError(\"unsupported transaction type: \" + transaction.type, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t        operation: \"serializeTransaction\",\n\t        transactionType: transaction.type\n\t    });\n\t}\n\texports.serialize = serialize;\n\tfunction _parseEipSignature(tx, fields, serialize) {\n\t    try {\n\t        var recid = handleNumber(fields[0]).toNumber();\n\t        if (recid !== 0 && recid !== 1) {\n\t            throw new Error(\"bad recid\");\n\t        }\n\t        tx.v = recid;\n\t    }\n\t    catch (error) {\n\t        logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n\t    }\n\t    tx.r = (0, lib$1.hexZeroPad)(fields[1], 32);\n\t    tx.s = (0, lib$1.hexZeroPad)(fields[2], 32);\n\t    try {\n\t        var digest = (0, lib$4.keccak256)(serialize(tx));\n\t        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });\n\t    }\n\t    catch (error) {\n\t        console.log(error);\n\t    }\n\t}\n\tfunction _parseEip1559(payload) {\n\t    var transaction = RLP.decode(payload.slice(1));\n\t    if (transaction.length !== 9 && transaction.length !== 12) {\n\t        logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", (0, lib$1.hexlify)(payload));\n\t    }\n\t    var maxPriorityFeePerGas = handleNumber(transaction[2]);\n\t    var maxFeePerGas = handleNumber(transaction[3]);\n\t    var tx = {\n\t        type: 2,\n\t        chainId: handleNumber(transaction[0]).toNumber(),\n\t        nonce: handleNumber(transaction[1]).toNumber(),\n\t        maxPriorityFeePerGas: maxPriorityFeePerGas,\n\t        maxFeePerGas: maxFeePerGas,\n\t        gasPrice: null,\n\t        gasLimit: handleNumber(transaction[4]),\n\t        to: handleAddress(transaction[5]),\n\t        value: handleNumber(transaction[6]),\n\t        data: transaction[7],\n\t        accessList: accessListify(transaction[8]),\n\t    };\n\t    // Unsigned EIP-1559 Transaction\n\t    if (transaction.length === 9) {\n\t        return tx;\n\t    }\n\t    tx.hash = (0, lib$4.keccak256)(payload);\n\t    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n\t    return tx;\n\t}\n\tfunction _parseEip2930(payload) {\n\t    var transaction = RLP.decode(payload.slice(1));\n\t    if (transaction.length !== 8 && transaction.length !== 11) {\n\t        logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", (0, lib$1.hexlify)(payload));\n\t    }\n\t    var tx = {\n\t        type: 1,\n\t        chainId: handleNumber(transaction[0]).toNumber(),\n\t        nonce: handleNumber(transaction[1]).toNumber(),\n\t        gasPrice: handleNumber(transaction[2]),\n\t        gasLimit: handleNumber(transaction[3]),\n\t        to: handleAddress(transaction[4]),\n\t        value: handleNumber(transaction[5]),\n\t        data: transaction[6],\n\t        accessList: accessListify(transaction[7])\n\t    };\n\t    // Unsigned EIP-2930 Transaction\n\t    if (transaction.length === 8) {\n\t        return tx;\n\t    }\n\t    tx.hash = (0, lib$4.keccak256)(payload);\n\t    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n\t    return tx;\n\t}\n\t// Legacy Transactions and EIP-155\n\tfunction _parse(rawTransaction) {\n\t    var transaction = RLP.decode(rawTransaction);\n\t    if (transaction.length !== 9 && transaction.length !== 6) {\n\t        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n\t    }\n\t    var tx = {\n\t        nonce: handleNumber(transaction[0]).toNumber(),\n\t        gasPrice: handleNumber(transaction[1]),\n\t        gasLimit: handleNumber(transaction[2]),\n\t        to: handleAddress(transaction[3]),\n\t        value: handleNumber(transaction[4]),\n\t        data: transaction[5],\n\t        chainId: 0\n\t    };\n\t    // Legacy unsigned transaction\n\t    if (transaction.length === 6) {\n\t        return tx;\n\t    }\n\t    try {\n\t        tx.v = lib$2.BigNumber.from(transaction[6]).toNumber();\n\t    }\n\t    catch (error) {\n\t        console.log(error);\n\t        return tx;\n\t    }\n\t    tx.r = (0, lib$1.hexZeroPad)(transaction[7], 32);\n\t    tx.s = (0, lib$1.hexZeroPad)(transaction[8], 32);\n\t    if (lib$2.BigNumber.from(tx.r).isZero() && lib$2.BigNumber.from(tx.s).isZero()) {\n\t        // EIP-155 unsigned transaction\n\t        tx.chainId = tx.v;\n\t        tx.v = 0;\n\t    }\n\t    else {\n\t        // Signed Transaction\n\t        tx.chainId = Math.floor((tx.v - 35) / 2);\n\t        if (tx.chainId < 0) {\n\t            tx.chainId = 0;\n\t        }\n\t        var recoveryParam = tx.v - 27;\n\t        var raw = transaction.slice(0, 6);\n\t        if (tx.chainId !== 0) {\n\t            raw.push((0, lib$1.hexlify)(tx.chainId));\n\t            raw.push(\"0x\");\n\t            raw.push(\"0x\");\n\t            recoveryParam -= tx.chainId * 2 + 8;\n\t        }\n\t        var digest = (0, lib$4.keccak256)(RLP.encode(raw));\n\t        try {\n\t            tx.from = recoverAddress(digest, { r: (0, lib$1.hexlify)(tx.r), s: (0, lib$1.hexlify)(tx.s), recoveryParam: recoveryParam });\n\t        }\n\t        catch (error) {\n\t            console.log(error);\n\t        }\n\t        tx.hash = (0, lib$4.keccak256)(rawTransaction);\n\t    }\n\t    tx.type = null;\n\t    return tx;\n\t}\n\tfunction parse(rawTransaction) {\n\t    var payload = (0, lib$1.arrayify)(rawTransaction);\n\t    // Legacy and EIP-155 Transactions\n\t    if (payload[0] > 0x7f) {\n\t        return _parse(payload);\n\t    }\n\t    // Typed Transaction (EIP-2718)\n\t    switch (payload[0]) {\n\t        case 1:\n\t            return _parseEip2930(payload);\n\t        case 2:\n\t            return _parseEip1559(payload);\n\t        default:\n\t            break;\n\t    }\n\t    return logger.throwError(\"unsupported transaction type: \" + payload[0], lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t        operation: \"parseTransaction\",\n\t        transactionType: payload[0]\n\t    });\n\t}\n\texports.parse = parse;\n\n\t});\n\n\tvar index$e = /*@__PURE__*/getDefaultExportFromCjs(lib$e);\n\n\tvar _version$q = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"contracts/5.5.0\";\n\n\t});\n\n\tvar _version$r = /*@__PURE__*/getDefaultExportFromCjs(_version$q);\n\n\tvar lib$f = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tvar __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from, pack) {\n\t    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n\t        if (ar || !(i in from)) {\n\t            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n\t            ar[i] = from[i];\n\t        }\n\t    }\n\t    return to.concat(ar || Array.prototype.slice.call(from));\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.ContractFactory = exports.Contract = exports.BaseContract = void 0;\n\n\n\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$q.version);\n\t;\n\t;\n\t///////////////////////////////\n\tvar allowedTransactionKeys = {\n\t    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n\t    type: true, accessList: true,\n\t    maxFeePerGas: true, maxPriorityFeePerGas: true,\n\t    customData: true\n\t};\n\tfunction resolveName(resolver, nameOrPromise) {\n\t    return __awaiter(this, void 0, void 0, function () {\n\t        var name, address;\n\t        return __generator(this, function (_a) {\n\t            switch (_a.label) {\n\t                case 0: return [4 /*yield*/, nameOrPromise];\n\t                case 1:\n\t                    name = _a.sent();\n\t                    if (typeof (name) !== \"string\") {\n\t                        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n\t                    }\n\t                    // If it is already an address, just use it (after adding checksum)\n\t                    try {\n\t                        return [2 /*return*/, (0, lib$6.getAddress)(name)];\n\t                    }\n\t                    catch (error) { }\n\t                    if (!resolver) {\n\t                        logger.throwError(\"a provider or signer is needed to resolve ENS names\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                            operation: \"resolveName\"\n\t                        });\n\t                    }\n\t                    return [4 /*yield*/, resolver.resolveName(name)];\n\t                case 2:\n\t                    address = _a.sent();\n\t                    if (address == null) {\n\t                        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n\t                    }\n\t                    return [2 /*return*/, address];\n\t            }\n\t        });\n\t    });\n\t}\n\t// Recursively replaces ENS names with promises to resolve the name and resolves all properties\n\tfunction resolveAddresses(resolver, value, paramType) {\n\t    return __awaiter(this, void 0, void 0, function () {\n\t        return __generator(this, function (_a) {\n\t            switch (_a.label) {\n\t                case 0:\n\t                    if (!Array.isArray(paramType)) return [3 /*break*/, 2];\n\t                    return [4 /*yield*/, Promise.all(paramType.map(function (paramType, index) {\n\t                            return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n\t                        }))];\n\t                case 1: return [2 /*return*/, _a.sent()];\n\t                case 2:\n\t                    if (!(paramType.type === \"address\")) return [3 /*break*/, 4];\n\t                    return [4 /*yield*/, resolveName(resolver, value)];\n\t                case 3: return [2 /*return*/, _a.sent()];\n\t                case 4:\n\t                    if (!(paramType.type === \"tuple\")) return [3 /*break*/, 6];\n\t                    return [4 /*yield*/, resolveAddresses(resolver, value, paramType.components)];\n\t                case 5: return [2 /*return*/, _a.sent()];\n\t                case 6:\n\t                    if (!(paramType.baseType === \"array\")) return [3 /*break*/, 8];\n\t                    if (!Array.isArray(value)) {\n\t                        return [2 /*return*/, Promise.reject(logger.makeError(\"invalid value for array\", lib.Logger.errors.INVALID_ARGUMENT, {\n\t                                argument: \"value\",\n\t                                value: value\n\t                            }))];\n\t                    }\n\t                    return [4 /*yield*/, Promise.all(value.map(function (v) { return resolveAddresses(resolver, v, paramType.arrayChildren); }))];\n\t                case 7: return [2 /*return*/, _a.sent()];\n\t                case 8: return [2 /*return*/, value];\n\t            }\n\t        });\n\t    });\n\t}\n\tfunction populateTransaction(contract, fragment, args) {\n\t    return __awaiter(this, void 0, void 0, function () {\n\t        var overrides, resolved, data, tx, ro, intrinsic, bytes, i, roValue, leftovers;\n\t        var _this = this;\n\t        return __generator(this, function (_a) {\n\t            switch (_a.label) {\n\t                case 0:\n\t                    overrides = {};\n\t                    if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n\t                        overrides = (0, lib$3.shallowCopy)(args.pop());\n\t                    }\n\t                    // Make sure the parameter count matches\n\t                    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\t                    // Populate \"from\" override (allow promises)\n\t                    if (contract.signer) {\n\t                        if (overrides.from) {\n\t                            // Contracts with a Signer are from the Signer's frame-of-reference;\n\t                            // but we allow overriding \"from\" if it matches the signer\n\t                            overrides.from = (0, lib$3.resolveProperties)({\n\t                                override: resolveName(contract.signer, overrides.from),\n\t                                signer: contract.signer.getAddress()\n\t                            }).then(function (check) { return __awaiter(_this, void 0, void 0, function () {\n\t                                return __generator(this, function (_a) {\n\t                                    if ((0, lib$6.getAddress)(check.signer) !== check.override) {\n\t                                        logger.throwError(\"Contract with a Signer cannot override from\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                            operation: \"overrides.from\"\n\t                                        });\n\t                                    }\n\t                                    return [2 /*return*/, check.override];\n\t                                });\n\t                            }); });\n\t                        }\n\t                        else {\n\t                            overrides.from = contract.signer.getAddress();\n\t                        }\n\t                    }\n\t                    else if (overrides.from) {\n\t                        overrides.from = resolveName(contract.provider, overrides.from);\n\t                        //} else {\n\t                        // Contracts without a signer can override \"from\", and if\n\t                        // unspecified the zero address is used\n\t                        //overrides.from = AddressZero;\n\t                    }\n\t                    return [4 /*yield*/, (0, lib$3.resolveProperties)({\n\t                            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n\t                            address: contract.resolvedAddress,\n\t                            overrides: ((0, lib$3.resolveProperties)(overrides) || {})\n\t                        })];\n\t                case 1:\n\t                    resolved = _a.sent();\n\t                    data = contract.interface.encodeFunctionData(fragment, resolved.args);\n\t                    tx = {\n\t                        data: data,\n\t                        to: resolved.address\n\t                    };\n\t                    ro = resolved.overrides;\n\t                    // Populate simple overrides\n\t                    if (ro.nonce != null) {\n\t                        tx.nonce = lib$2.BigNumber.from(ro.nonce).toNumber();\n\t                    }\n\t                    if (ro.gasLimit != null) {\n\t                        tx.gasLimit = lib$2.BigNumber.from(ro.gasLimit);\n\t                    }\n\t                    if (ro.gasPrice != null) {\n\t                        tx.gasPrice = lib$2.BigNumber.from(ro.gasPrice);\n\t                    }\n\t                    if (ro.maxFeePerGas != null) {\n\t                        tx.maxFeePerGas = lib$2.BigNumber.from(ro.maxFeePerGas);\n\t                    }\n\t                    if (ro.maxPriorityFeePerGas != null) {\n\t                        tx.maxPriorityFeePerGas = lib$2.BigNumber.from(ro.maxPriorityFeePerGas);\n\t                    }\n\t                    if (ro.from != null) {\n\t                        tx.from = ro.from;\n\t                    }\n\t                    if (ro.type != null) {\n\t                        tx.type = ro.type;\n\t                    }\n\t                    if (ro.accessList != null) {\n\t                        tx.accessList = (0, lib$e.accessListify)(ro.accessList);\n\t                    }\n\t                    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n\t                    if (tx.gasLimit == null && fragment.gas != null) {\n\t                        intrinsic = 21000;\n\t                        bytes = (0, lib$1.arrayify)(data);\n\t                        for (i = 0; i < bytes.length; i++) {\n\t                            intrinsic += 4;\n\t                            if (bytes[i]) {\n\t                                intrinsic += 64;\n\t                            }\n\t                        }\n\t                        tx.gasLimit = lib$2.BigNumber.from(fragment.gas).add(intrinsic);\n\t                    }\n\t                    // Populate \"value\" override\n\t                    if (ro.value) {\n\t                        roValue = lib$2.BigNumber.from(ro.value);\n\t                        if (!roValue.isZero() && !fragment.payable) {\n\t                            logger.throwError(\"non-payable method cannot override value\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                operation: \"overrides.value\",\n\t                                value: overrides.value\n\t                            });\n\t                        }\n\t                        tx.value = roValue;\n\t                    }\n\t                    if (ro.customData) {\n\t                        tx.customData = (0, lib$3.shallowCopy)(ro.customData);\n\t                    }\n\t                    // Remove the overrides\n\t                    delete overrides.nonce;\n\t                    delete overrides.gasLimit;\n\t                    delete overrides.gasPrice;\n\t                    delete overrides.from;\n\t                    delete overrides.value;\n\t                    delete overrides.type;\n\t                    delete overrides.accessList;\n\t                    delete overrides.maxFeePerGas;\n\t                    delete overrides.maxPriorityFeePerGas;\n\t                    delete overrides.customData;\n\t                    leftovers = Object.keys(overrides).filter(function (key) { return (overrides[key] != null); });\n\t                    if (leftovers.length) {\n\t                        logger.throwError(\"cannot override \" + leftovers.map(function (l) { return JSON.stringify(l); }).join(\",\"), lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                            operation: \"overrides\",\n\t                            overrides: leftovers\n\t                        });\n\t                    }\n\t                    return [2 /*return*/, tx];\n\t            }\n\t        });\n\t    });\n\t}\n\tfunction buildPopulate(contract, fragment) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        return populateTransaction(contract, fragment, args);\n\t    };\n\t}\n\tfunction buildEstimate(contract, fragment) {\n\t    var signerOrProvider = (contract.signer || contract.provider);\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var tx;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (!signerOrProvider) {\n\t                            logger.throwError(\"estimate require a provider or signer\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                operation: \"estimateGas\"\n\t                            });\n\t                        }\n\t                        return [4 /*yield*/, populateTransaction(contract, fragment, args)];\n\t                    case 1:\n\t                        tx = _a.sent();\n\t                        return [4 /*yield*/, signerOrProvider.estimateGas(tx)];\n\t                    case 2: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t}\n\tfunction addContractWait(contract, tx) {\n\t    var wait = tx.wait.bind(tx);\n\t    tx.wait = function (confirmations) {\n\t        return wait(confirmations).then(function (receipt) {\n\t            receipt.events = receipt.logs.map(function (log) {\n\t                var event = (0, lib$3.deepCopy)(log);\n\t                var parsed = null;\n\t                try {\n\t                    parsed = contract.interface.parseLog(log);\n\t                }\n\t                catch (e) { }\n\t                // Successfully parsed the event log; include it\n\t                if (parsed) {\n\t                    event.args = parsed.args;\n\t                    event.decode = function (data, topics) {\n\t                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n\t                    };\n\t                    event.event = parsed.name;\n\t                    event.eventSignature = parsed.signature;\n\t                }\n\t                // Useful operations\n\t                event.removeListener = function () { return contract.provider; };\n\t                event.getBlock = function () {\n\t                    return contract.provider.getBlock(receipt.blockHash);\n\t                };\n\t                event.getTransaction = function () {\n\t                    return contract.provider.getTransaction(receipt.transactionHash);\n\t                };\n\t                event.getTransactionReceipt = function () {\n\t                    return Promise.resolve(receipt);\n\t                };\n\t                return event;\n\t            });\n\t            return receipt;\n\t        });\n\t    };\n\t}\n\tfunction buildCall(contract, fragment, collapseSimple) {\n\t    var signerOrProvider = (contract.signer || contract.provider);\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var blockTag, overrides, tx, result, value;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        blockTag = undefined;\n\t                        if (!(args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\")) return [3 /*break*/, 3];\n\t                        overrides = (0, lib$3.shallowCopy)(args.pop());\n\t                        if (!(overrides.blockTag != null)) return [3 /*break*/, 2];\n\t                        return [4 /*yield*/, overrides.blockTag];\n\t                    case 1:\n\t                        blockTag = _a.sent();\n\t                        _a.label = 2;\n\t                    case 2:\n\t                        delete overrides.blockTag;\n\t                        args.push(overrides);\n\t                        _a.label = 3;\n\t                    case 3:\n\t                        if (!(contract.deployTransaction != null)) return [3 /*break*/, 5];\n\t                        return [4 /*yield*/, contract._deployed(blockTag)];\n\t                    case 4:\n\t                        _a.sent();\n\t                        _a.label = 5;\n\t                    case 5: return [4 /*yield*/, populateTransaction(contract, fragment, args)];\n\t                    case 6:\n\t                        tx = _a.sent();\n\t                        return [4 /*yield*/, signerOrProvider.call(tx, blockTag)];\n\t                    case 7:\n\t                        result = _a.sent();\n\t                        try {\n\t                            value = contract.interface.decodeFunctionResult(fragment, result);\n\t                            if (collapseSimple && fragment.outputs.length === 1) {\n\t                                value = value[0];\n\t                            }\n\t                            return [2 /*return*/, value];\n\t                        }\n\t                        catch (error) {\n\t                            if (error.code === lib.Logger.errors.CALL_EXCEPTION) {\n\t                                error.address = contract.address;\n\t                                error.args = args;\n\t                                error.transaction = tx;\n\t                            }\n\t                            throw error;\n\t                        }\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t}\n\tfunction buildSend(contract, fragment) {\n\t    return function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var txRequest, tx;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (!contract.signer) {\n\t                            logger.throwError(\"sending a transaction requires a signer\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                operation: \"sendTransaction\"\n\t                            });\n\t                        }\n\t                        if (!(contract.deployTransaction != null)) return [3 /*break*/, 2];\n\t                        return [4 /*yield*/, contract._deployed()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        _a.label = 2;\n\t                    case 2: return [4 /*yield*/, populateTransaction(contract, fragment, args)];\n\t                    case 3:\n\t                        txRequest = _a.sent();\n\t                        return [4 /*yield*/, contract.signer.sendTransaction(txRequest)];\n\t                    case 4:\n\t                        tx = _a.sent();\n\t                        // Tweak the tx.wait so the receipt has extra properties\n\t                        addContractWait(contract, tx);\n\t                        return [2 /*return*/, tx];\n\t                }\n\t            });\n\t        });\n\t    };\n\t}\n\tfunction buildDefault(contract, fragment, collapseSimple) {\n\t    if (fragment.constant) {\n\t        return buildCall(contract, fragment, collapseSimple);\n\t    }\n\t    return buildSend(contract, fragment);\n\t}\n\tfunction getEventTag(filter) {\n\t    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n\t        return \"*\";\n\t    }\n\t    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(function (topic) {\n\t        if (Array.isArray(topic)) {\n\t            return topic.join(\"|\");\n\t        }\n\t        return topic;\n\t    }).join(\":\") : \"\");\n\t}\n\tvar RunningEvent = /** @class */ (function () {\n\t    function RunningEvent(tag, filter) {\n\t        (0, lib$3.defineReadOnly)(this, \"tag\", tag);\n\t        (0, lib$3.defineReadOnly)(this, \"filter\", filter);\n\t        this._listeners = [];\n\t    }\n\t    RunningEvent.prototype.addListener = function (listener, once) {\n\t        this._listeners.push({ listener: listener, once: once });\n\t    };\n\t    RunningEvent.prototype.removeListener = function (listener) {\n\t        var done = false;\n\t        this._listeners = this._listeners.filter(function (item) {\n\t            if (done || item.listener !== listener) {\n\t                return true;\n\t            }\n\t            done = true;\n\t            return false;\n\t        });\n\t    };\n\t    RunningEvent.prototype.removeAllListeners = function () {\n\t        this._listeners = [];\n\t    };\n\t    RunningEvent.prototype.listeners = function () {\n\t        return this._listeners.map(function (i) { return i.listener; });\n\t    };\n\t    RunningEvent.prototype.listenerCount = function () {\n\t        return this._listeners.length;\n\t    };\n\t    RunningEvent.prototype.run = function (args) {\n\t        var _this = this;\n\t        var listenerCount = this.listenerCount();\n\t        this._listeners = this._listeners.filter(function (item) {\n\t            var argsCopy = args.slice();\n\t            // Call the callback in the next event loop\n\t            setTimeout(function () {\n\t                item.listener.apply(_this, argsCopy);\n\t            }, 0);\n\t            // Reschedule it if it not \"once\"\n\t            return !(item.once);\n\t        });\n\t        return listenerCount;\n\t    };\n\t    RunningEvent.prototype.prepareEvent = function (event) {\n\t    };\n\t    // Returns the array that will be applied to an emit\n\t    RunningEvent.prototype.getEmit = function (event) {\n\t        return [event];\n\t    };\n\t    return RunningEvent;\n\t}());\n\tvar ErrorRunningEvent = /** @class */ (function (_super) {\n\t    __extends(ErrorRunningEvent, _super);\n\t    function ErrorRunningEvent() {\n\t        return _super.call(this, \"error\", null) || this;\n\t    }\n\t    return ErrorRunningEvent;\n\t}(RunningEvent));\n\t// @TODO Fragment should inherit Wildcard? and just override getEmit?\n\t//       or have a common abstract super class, with enough constructor\n\t//       options to configure both.\n\t// A Fragment Event will populate all the properties that Wildcard\n\t// will, and additionally dereference the arguments when emitting\n\tvar FragmentRunningEvent = /** @class */ (function (_super) {\n\t    __extends(FragmentRunningEvent, _super);\n\t    function FragmentRunningEvent(address, contractInterface, fragment, topics) {\n\t        var _this = this;\n\t        var filter = {\n\t            address: address\n\t        };\n\t        var topic = contractInterface.getEventTopic(fragment);\n\t        if (topics) {\n\t            if (topic !== topics[0]) {\n\t                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n\t            }\n\t            filter.topics = topics.slice();\n\t        }\n\t        else {\n\t            filter.topics = [topic];\n\t        }\n\t        _this = _super.call(this, getEventTag(filter), filter) || this;\n\t        (0, lib$3.defineReadOnly)(_this, \"address\", address);\n\t        (0, lib$3.defineReadOnly)(_this, \"interface\", contractInterface);\n\t        (0, lib$3.defineReadOnly)(_this, \"fragment\", fragment);\n\t        return _this;\n\t    }\n\t    FragmentRunningEvent.prototype.prepareEvent = function (event) {\n\t        var _this = this;\n\t        _super.prototype.prepareEvent.call(this, event);\n\t        event.event = this.fragment.name;\n\t        event.eventSignature = this.fragment.format();\n\t        event.decode = function (data, topics) {\n\t            return _this.interface.decodeEventLog(_this.fragment, data, topics);\n\t        };\n\t        try {\n\t            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n\t        }\n\t        catch (error) {\n\t            event.args = null;\n\t            event.decodeError = error;\n\t        }\n\t    };\n\t    FragmentRunningEvent.prototype.getEmit = function (event) {\n\t        var errors = (0, lib$a.checkResultErrors)(event.args);\n\t        if (errors.length) {\n\t            throw errors[0].error;\n\t        }\n\t        var args = (event.args || []).slice();\n\t        args.push(event);\n\t        return args;\n\t    };\n\t    return FragmentRunningEvent;\n\t}(RunningEvent));\n\t// A Wildcard Event will attempt to populate:\n\t//  - event            The name of the event name\n\t//  - eventSignature   The full signature of the event\n\t//  - decode           A function to decode data and topics\n\t//  - args             The decoded data and topics\n\tvar WildcardRunningEvent = /** @class */ (function (_super) {\n\t    __extends(WildcardRunningEvent, _super);\n\t    function WildcardRunningEvent(address, contractInterface) {\n\t        var _this = _super.call(this, \"*\", { address: address }) || this;\n\t        (0, lib$3.defineReadOnly)(_this, \"address\", address);\n\t        (0, lib$3.defineReadOnly)(_this, \"interface\", contractInterface);\n\t        return _this;\n\t    }\n\t    WildcardRunningEvent.prototype.prepareEvent = function (event) {\n\t        var _this = this;\n\t        _super.prototype.prepareEvent.call(this, event);\n\t        try {\n\t            var parsed_1 = this.interface.parseLog(event);\n\t            event.event = parsed_1.name;\n\t            event.eventSignature = parsed_1.signature;\n\t            event.decode = function (data, topics) {\n\t                return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);\n\t            };\n\t            event.args = parsed_1.args;\n\t        }\n\t        catch (error) {\n\t            // No matching event\n\t        }\n\t    };\n\t    return WildcardRunningEvent;\n\t}(RunningEvent));\n\tvar BaseContract = /** @class */ (function () {\n\t    function BaseContract(addressOrName, contractInterface, signerOrProvider) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, Contract);\n\t        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n\t        //address = getAddress(address);\n\t        (0, lib$3.defineReadOnly)(this, \"interface\", (0, lib$3.getStatic)(_newTarget, \"getInterface\")(contractInterface));\n\t        if (signerOrProvider == null) {\n\t            (0, lib$3.defineReadOnly)(this, \"provider\", null);\n\t            (0, lib$3.defineReadOnly)(this, \"signer\", null);\n\t        }\n\t        else if (lib$c.Signer.isSigner(signerOrProvider)) {\n\t            (0, lib$3.defineReadOnly)(this, \"provider\", signerOrProvider.provider || null);\n\t            (0, lib$3.defineReadOnly)(this, \"signer\", signerOrProvider);\n\t        }\n\t        else if (lib$b.Provider.isProvider(signerOrProvider)) {\n\t            (0, lib$3.defineReadOnly)(this, \"provider\", signerOrProvider);\n\t            (0, lib$3.defineReadOnly)(this, \"signer\", null);\n\t        }\n\t        else {\n\t            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n\t        }\n\t        (0, lib$3.defineReadOnly)(this, \"callStatic\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"estimateGas\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"functions\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"populateTransaction\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"filters\", {});\n\t        {\n\t            var uniqueFilters_1 = {};\n\t            Object.keys(this.interface.events).forEach(function (eventSignature) {\n\t                var event = _this.interface.events[eventSignature];\n\t                (0, lib$3.defineReadOnly)(_this.filters, eventSignature, function () {\n\t                    var args = [];\n\t                    for (var _i = 0; _i < arguments.length; _i++) {\n\t                        args[_i] = arguments[_i];\n\t                    }\n\t                    return {\n\t                        address: _this.address,\n\t                        topics: _this.interface.encodeFilterTopics(event, args)\n\t                    };\n\t                });\n\t                if (!uniqueFilters_1[event.name]) {\n\t                    uniqueFilters_1[event.name] = [];\n\t                }\n\t                uniqueFilters_1[event.name].push(eventSignature);\n\t            });\n\t            Object.keys(uniqueFilters_1).forEach(function (name) {\n\t                var filters = uniqueFilters_1[name];\n\t                if (filters.length === 1) {\n\t                    (0, lib$3.defineReadOnly)(_this.filters, name, _this.filters[filters[0]]);\n\t                }\n\t                else {\n\t                    logger.warn(\"Duplicate definition of \" + name + \" (\" + filters.join(\", \") + \")\");\n\t                }\n\t            });\n\t        }\n\t        (0, lib$3.defineReadOnly)(this, \"_runningEvents\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"_wrappedEmits\", {});\n\t        if (addressOrName == null) {\n\t            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n\t        }\n\t        (0, lib$3.defineReadOnly)(this, \"address\", addressOrName);\n\t        if (this.provider) {\n\t            (0, lib$3.defineReadOnly)(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n\t        }\n\t        else {\n\t            try {\n\t                (0, lib$3.defineReadOnly)(this, \"resolvedAddress\", Promise.resolve((0, lib$6.getAddress)(addressOrName)));\n\t            }\n\t            catch (error) {\n\t                // Without a provider, we cannot use ENS names\n\t                logger.throwError(\"provider is required to use ENS name as contract address\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                    operation: \"new Contract\"\n\t                });\n\t            }\n\t        }\n\t        var uniqueNames = {};\n\t        var uniqueSignatures = {};\n\t        Object.keys(this.interface.functions).forEach(function (signature) {\n\t            var fragment = _this.interface.functions[signature];\n\t            // Check that the signature is unique; if not the ABI generation has\n\t            // not been cleaned or may be incorrectly generated\n\t            if (uniqueSignatures[signature]) {\n\t                logger.warn(\"Duplicate ABI entry for \" + JSON.stringify(signature));\n\t                return;\n\t            }\n\t            uniqueSignatures[signature] = true;\n\t            // Track unique names; we only expose bare named functions if they\n\t            // are ambiguous\n\t            {\n\t                var name_1 = fragment.name;\n\t                if (!uniqueNames[\"%\" + name_1]) {\n\t                    uniqueNames[\"%\" + name_1] = [];\n\t                }\n\t                uniqueNames[\"%\" + name_1].push(signature);\n\t            }\n\t            if (_this[signature] == null) {\n\t                (0, lib$3.defineReadOnly)(_this, signature, buildDefault(_this, fragment, true));\n\t            }\n\t            // We do not collapse simple calls on this bucket, which allows\n\t            // frameworks to safely use this without introspection as well as\n\t            // allows decoding error recovery.\n\t            if (_this.functions[signature] == null) {\n\t                (0, lib$3.defineReadOnly)(_this.functions, signature, buildDefault(_this, fragment, false));\n\t            }\n\t            if (_this.callStatic[signature] == null) {\n\t                (0, lib$3.defineReadOnly)(_this.callStatic, signature, buildCall(_this, fragment, true));\n\t            }\n\t            if (_this.populateTransaction[signature] == null) {\n\t                (0, lib$3.defineReadOnly)(_this.populateTransaction, signature, buildPopulate(_this, fragment));\n\t            }\n\t            if (_this.estimateGas[signature] == null) {\n\t                (0, lib$3.defineReadOnly)(_this.estimateGas, signature, buildEstimate(_this, fragment));\n\t            }\n\t        });\n\t        Object.keys(uniqueNames).forEach(function (name) {\n\t            // Ambiguous names to not get attached as bare names\n\t            var signatures = uniqueNames[name];\n\t            if (signatures.length > 1) {\n\t                return;\n\t            }\n\t            // Strip off the leading \"%\" used for prototype protection\n\t            name = name.substring(1);\n\t            var signature = signatures[0];\n\t            // If overwriting a member property that is null, swallow the error\n\t            try {\n\t                if (_this[name] == null) {\n\t                    (0, lib$3.defineReadOnly)(_this, name, _this[signature]);\n\t                }\n\t            }\n\t            catch (e) { }\n\t            if (_this.functions[name] == null) {\n\t                (0, lib$3.defineReadOnly)(_this.functions, name, _this.functions[signature]);\n\t            }\n\t            if (_this.callStatic[name] == null) {\n\t                (0, lib$3.defineReadOnly)(_this.callStatic, name, _this.callStatic[signature]);\n\t            }\n\t            if (_this.populateTransaction[name] == null) {\n\t                (0, lib$3.defineReadOnly)(_this.populateTransaction, name, _this.populateTransaction[signature]);\n\t            }\n\t            if (_this.estimateGas[name] == null) {\n\t                (0, lib$3.defineReadOnly)(_this.estimateGas, name, _this.estimateGas[signature]);\n\t            }\n\t        });\n\t    }\n\t    BaseContract.getContractAddress = function (transaction) {\n\t        return (0, lib$6.getContractAddress)(transaction);\n\t    };\n\t    BaseContract.getInterface = function (contractInterface) {\n\t        if (lib$a.Interface.isInterface(contractInterface)) {\n\t            return contractInterface;\n\t        }\n\t        return new lib$a.Interface(contractInterface);\n\t    };\n\t    // @TODO: Allow timeout?\n\t    BaseContract.prototype.deployed = function () {\n\t        return this._deployed();\n\t    };\n\t    BaseContract.prototype._deployed = function (blockTag) {\n\t        var _this = this;\n\t        if (!this._deployedPromise) {\n\t            // If we were just deployed, we know the transaction we should occur in\n\t            if (this.deployTransaction) {\n\t                this._deployedPromise = this.deployTransaction.wait().then(function () {\n\t                    return _this;\n\t                });\n\t            }\n\t            else {\n\t                // @TODO: Once we allow a timeout to be passed in, we will wait\n\t                // up to that many blocks for getCode\n\t                // Otherwise, poll for our code to be deployed\n\t                this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {\n\t                    if (code === \"0x\") {\n\t                        logger.throwError(\"contract not deployed\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                            contractAddress: _this.address,\n\t                            operation: \"getDeployed\"\n\t                        });\n\t                    }\n\t                    return _this;\n\t                });\n\t            }\n\t        }\n\t        return this._deployedPromise;\n\t    };\n\t    // @TODO:\n\t    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\t    // @TODO:\n\t    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\t    BaseContract.prototype.fallback = function (overrides) {\n\t        var _this = this;\n\t        if (!this.signer) {\n\t            logger.throwError(\"sending a transactions require a signer\", lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n\t        }\n\t        var tx = (0, lib$3.shallowCopy)(overrides || {});\n\t        [\"from\", \"to\"].forEach(function (key) {\n\t            if (tx[key] == null) {\n\t                return;\n\t            }\n\t            logger.throwError(\"cannot override \" + key, lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n\t        });\n\t        tx.to = this.resolvedAddress;\n\t        return this.deployed().then(function () {\n\t            return _this.signer.sendTransaction(tx);\n\t        });\n\t    };\n\t    // Reconnect to a different signer or provider\n\t    BaseContract.prototype.connect = function (signerOrProvider) {\n\t        if (typeof (signerOrProvider) === \"string\") {\n\t            signerOrProvider = new lib$c.VoidSigner(signerOrProvider, this.provider);\n\t        }\n\t        var contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n\t        if (this.deployTransaction) {\n\t            (0, lib$3.defineReadOnly)(contract, \"deployTransaction\", this.deployTransaction);\n\t        }\n\t        return contract;\n\t    };\n\t    // Re-attach to a different on-chain instance of this contract\n\t    BaseContract.prototype.attach = function (addressOrName) {\n\t        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n\t    };\n\t    BaseContract.isIndexed = function (value) {\n\t        return lib$a.Indexed.isIndexed(value);\n\t    };\n\t    BaseContract.prototype._normalizeRunningEvent = function (runningEvent) {\n\t        // Already have an instance of this event running; we can re-use it\n\t        if (this._runningEvents[runningEvent.tag]) {\n\t            return this._runningEvents[runningEvent.tag];\n\t        }\n\t        return runningEvent;\n\t    };\n\t    BaseContract.prototype._getRunningEvent = function (eventName) {\n\t        if (typeof (eventName) === \"string\") {\n\t            // Listen for \"error\" events (if your contract has an error event, include\n\t            // the full signature to bypass this special event keyword)\n\t            if (eventName === \"error\") {\n\t                return this._normalizeRunningEvent(new ErrorRunningEvent());\n\t            }\n\t            // Listen for any event that is registered\n\t            if (eventName === \"event\") {\n\t                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n\t            }\n\t            // Listen for any event\n\t            if (eventName === \"*\") {\n\t                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n\t            }\n\t            // Get the event Fragment (throws if ambiguous/unknown event)\n\t            var fragment = this.interface.getEvent(eventName);\n\t            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n\t        }\n\t        // We have topics to filter by...\n\t        if (eventName.topics && eventName.topics.length > 0) {\n\t            // Is it a known topichash? (throws if no matching topichash)\n\t            try {\n\t                var topic = eventName.topics[0];\n\t                if (typeof (topic) !== \"string\") {\n\t                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n\t                }\n\t                var fragment = this.interface.getEvent(topic);\n\t                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n\t            }\n\t            catch (error) { }\n\t            // Filter by the unknown topichash\n\t            var filter = {\n\t                address: this.address,\n\t                topics: eventName.topics\n\t            };\n\t            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n\t        }\n\t        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n\t    };\n\t    BaseContract.prototype._checkRunningEvents = function (runningEvent) {\n\t        if (runningEvent.listenerCount() === 0) {\n\t            delete this._runningEvents[runningEvent.tag];\n\t            // If we have a poller for this, remove it\n\t            var emit = this._wrappedEmits[runningEvent.tag];\n\t            if (emit && runningEvent.filter) {\n\t                this.provider.off(runningEvent.filter, emit);\n\t                delete this._wrappedEmits[runningEvent.tag];\n\t            }\n\t        }\n\t    };\n\t    // Subclasses can override this to gracefully recover\n\t    // from parse errors if they wish\n\t    BaseContract.prototype._wrapEvent = function (runningEvent, log, listener) {\n\t        var _this = this;\n\t        var event = (0, lib$3.deepCopy)(log);\n\t        event.removeListener = function () {\n\t            if (!listener) {\n\t                return;\n\t            }\n\t            runningEvent.removeListener(listener);\n\t            _this._checkRunningEvents(runningEvent);\n\t        };\n\t        event.getBlock = function () { return _this.provider.getBlock(log.blockHash); };\n\t        event.getTransaction = function () { return _this.provider.getTransaction(log.transactionHash); };\n\t        event.getTransactionReceipt = function () { return _this.provider.getTransactionReceipt(log.transactionHash); };\n\t        // This may throw if the topics and data mismatch the signature\n\t        runningEvent.prepareEvent(event);\n\t        return event;\n\t    };\n\t    BaseContract.prototype._addEventListener = function (runningEvent, listener, once) {\n\t        var _this = this;\n\t        if (!this.provider) {\n\t            logger.throwError(\"events require a provider or a signer with a provider\", lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n\t        }\n\t        runningEvent.addListener(listener, once);\n\t        // Track this running event and its listeners (may already be there; but no hard in updating)\n\t        this._runningEvents[runningEvent.tag] = runningEvent;\n\t        // If we are not polling the provider, start polling\n\t        if (!this._wrappedEmits[runningEvent.tag]) {\n\t            var wrappedEmit = function (log) {\n\t                var event = _this._wrapEvent(runningEvent, log, listener);\n\t                // Try to emit the result for the parameterized event...\n\t                if (event.decodeError == null) {\n\t                    try {\n\t                        var args = runningEvent.getEmit(event);\n\t                        _this.emit.apply(_this, __spreadArray([runningEvent.filter], args, false));\n\t                    }\n\t                    catch (error) {\n\t                        event.decodeError = error.error;\n\t                    }\n\t                }\n\t                // Always emit \"event\" for fragment-base events\n\t                if (runningEvent.filter != null) {\n\t                    _this.emit(\"event\", event);\n\t                }\n\t                // Emit \"error\" if there was an error\n\t                if (event.decodeError != null) {\n\t                    _this.emit(\"error\", event.decodeError, event);\n\t                }\n\t            };\n\t            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\t            // Special events, like \"error\" do not have a filter\n\t            if (runningEvent.filter != null) {\n\t                this.provider.on(runningEvent.filter, wrappedEmit);\n\t            }\n\t        }\n\t    };\n\t    BaseContract.prototype.queryFilter = function (event, fromBlockOrBlockhash, toBlock) {\n\t        var _this = this;\n\t        var runningEvent = this._getRunningEvent(event);\n\t        var filter = (0, lib$3.shallowCopy)(runningEvent.filter);\n\t        if (typeof (fromBlockOrBlockhash) === \"string\" && (0, lib$1.isHexString)(fromBlockOrBlockhash, 32)) {\n\t            if (toBlock != null) {\n\t                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n\t            }\n\t            filter.blockHash = fromBlockOrBlockhash;\n\t        }\n\t        else {\n\t            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n\t            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n\t        }\n\t        return this.provider.getLogs(filter).then(function (logs) {\n\t            return logs.map(function (log) { return _this._wrapEvent(runningEvent, log, null); });\n\t        });\n\t    };\n\t    BaseContract.prototype.on = function (event, listener) {\n\t        this._addEventListener(this._getRunningEvent(event), listener, false);\n\t        return this;\n\t    };\n\t    BaseContract.prototype.once = function (event, listener) {\n\t        this._addEventListener(this._getRunningEvent(event), listener, true);\n\t        return this;\n\t    };\n\t    BaseContract.prototype.emit = function (eventName) {\n\t        var args = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            args[_i - 1] = arguments[_i];\n\t        }\n\t        if (!this.provider) {\n\t            return false;\n\t        }\n\t        var runningEvent = this._getRunningEvent(eventName);\n\t        var result = (runningEvent.run(args) > 0);\n\t        // May have drained all the \"once\" events; check for living events\n\t        this._checkRunningEvents(runningEvent);\n\t        return result;\n\t    };\n\t    BaseContract.prototype.listenerCount = function (eventName) {\n\t        var _this = this;\n\t        if (!this.provider) {\n\t            return 0;\n\t        }\n\t        if (eventName == null) {\n\t            return Object.keys(this._runningEvents).reduce(function (accum, key) {\n\t                return accum + _this._runningEvents[key].listenerCount();\n\t            }, 0);\n\t        }\n\t        return this._getRunningEvent(eventName).listenerCount();\n\t    };\n\t    BaseContract.prototype.listeners = function (eventName) {\n\t        if (!this.provider) {\n\t            return [];\n\t        }\n\t        if (eventName == null) {\n\t            var result_1 = [];\n\t            for (var tag in this._runningEvents) {\n\t                this._runningEvents[tag].listeners().forEach(function (listener) {\n\t                    result_1.push(listener);\n\t                });\n\t            }\n\t            return result_1;\n\t        }\n\t        return this._getRunningEvent(eventName).listeners();\n\t    };\n\t    BaseContract.prototype.removeAllListeners = function (eventName) {\n\t        if (!this.provider) {\n\t            return this;\n\t        }\n\t        if (eventName == null) {\n\t            for (var tag in this._runningEvents) {\n\t                var runningEvent_1 = this._runningEvents[tag];\n\t                runningEvent_1.removeAllListeners();\n\t                this._checkRunningEvents(runningEvent_1);\n\t            }\n\t            return this;\n\t        }\n\t        // Delete any listeners\n\t        var runningEvent = this._getRunningEvent(eventName);\n\t        runningEvent.removeAllListeners();\n\t        this._checkRunningEvents(runningEvent);\n\t        return this;\n\t    };\n\t    BaseContract.prototype.off = function (eventName, listener) {\n\t        if (!this.provider) {\n\t            return this;\n\t        }\n\t        var runningEvent = this._getRunningEvent(eventName);\n\t        runningEvent.removeListener(listener);\n\t        this._checkRunningEvents(runningEvent);\n\t        return this;\n\t    };\n\t    BaseContract.prototype.removeListener = function (eventName, listener) {\n\t        return this.off(eventName, listener);\n\t    };\n\t    return BaseContract;\n\t}());\n\texports.BaseContract = BaseContract;\n\tvar Contract = /** @class */ (function (_super) {\n\t    __extends(Contract, _super);\n\t    function Contract() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    return Contract;\n\t}(BaseContract));\n\texports.Contract = Contract;\n\tvar ContractFactory = /** @class */ (function () {\n\t    function ContractFactory(contractInterface, bytecode, signer) {\n\t        var _newTarget = this.constructor;\n\t        var bytecodeHex = null;\n\t        if (typeof (bytecode) === \"string\") {\n\t            bytecodeHex = bytecode;\n\t        }\n\t        else if ((0, lib$1.isBytes)(bytecode)) {\n\t            bytecodeHex = (0, lib$1.hexlify)(bytecode);\n\t        }\n\t        else if (bytecode && typeof (bytecode.object) === \"string\") {\n\t            // Allow the bytecode object from the Solidity compiler\n\t            bytecodeHex = bytecode.object;\n\t        }\n\t        else {\n\t            // Crash in the next verification step\n\t            bytecodeHex = \"!\";\n\t        }\n\t        // Make sure it is 0x prefixed\n\t        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n\t            bytecodeHex = \"0x\" + bytecodeHex;\n\t        }\n\t        // Make sure the final result is valid bytecode\n\t        if (!(0, lib$1.isHexString)(bytecodeHex) || (bytecodeHex.length % 2)) {\n\t            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n\t        }\n\t        // If we have a signer, make sure it is valid\n\t        if (signer && !lib$c.Signer.isSigner(signer)) {\n\t            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n\t        }\n\t        (0, lib$3.defineReadOnly)(this, \"bytecode\", bytecodeHex);\n\t        (0, lib$3.defineReadOnly)(this, \"interface\", (0, lib$3.getStatic)(_newTarget, \"getInterface\")(contractInterface));\n\t        (0, lib$3.defineReadOnly)(this, \"signer\", signer || null);\n\t    }\n\t    // @TODO: Future; rename to populateTransaction?\n\t    ContractFactory.prototype.getDeployTransaction = function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        var tx = {};\n\t        // If we have 1 additional argument, we allow transaction overrides\n\t        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n\t            tx = (0, lib$3.shallowCopy)(args.pop());\n\t            for (var key in tx) {\n\t                if (!allowedTransactionKeys[key]) {\n\t                    throw new Error(\"unknown transaction override \" + key);\n\t                }\n\t            }\n\t        }\n\t        // Do not allow these to be overridden in a deployment transaction\n\t        [\"data\", \"from\", \"to\"].forEach(function (key) {\n\t            if (tx[key] == null) {\n\t                return;\n\t            }\n\t            logger.throwError(\"cannot override \" + key, lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n\t        });\n\t        if (tx.value) {\n\t            var value = lib$2.BigNumber.from(tx.value);\n\t            if (!value.isZero() && !this.interface.deploy.payable) {\n\t                logger.throwError(\"non-payable constructor cannot override value\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                    operation: \"overrides.value\",\n\t                    value: tx.value\n\t                });\n\t            }\n\t        }\n\t        // Make sure the call matches the constructor signature\n\t        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\t        // Set the data to the bytecode + the encoded constructor arguments\n\t        tx.data = (0, lib$1.hexlify)((0, lib$1.concat)([\n\t            this.bytecode,\n\t            this.interface.encodeDeploy(args)\n\t        ]));\n\t        return tx;\n\t    };\n\t    ContractFactory.prototype.deploy = function () {\n\t        var args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            args[_i] = arguments[_i];\n\t        }\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var overrides, params, unsignedTx, tx, address, contract;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        overrides = {};\n\t                        // If 1 extra parameter was passed in, it contains overrides\n\t                        if (args.length === this.interface.deploy.inputs.length + 1) {\n\t                            overrides = args.pop();\n\t                        }\n\t                        // Make sure the call matches the constructor signature\n\t                        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\t                        return [4 /*yield*/, resolveAddresses(this.signer, args, this.interface.deploy.inputs)];\n\t                    case 1:\n\t                        params = _a.sent();\n\t                        params.push(overrides);\n\t                        unsignedTx = this.getDeployTransaction.apply(this, params);\n\t                        return [4 /*yield*/, this.signer.sendTransaction(unsignedTx)];\n\t                    case 2:\n\t                        tx = _a.sent();\n\t                        address = (0, lib$3.getStatic)(this.constructor, \"getContractAddress\")(tx);\n\t                        contract = (0, lib$3.getStatic)(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\t                        // Add the modified wait that wraps events\n\t                        addContractWait(contract, tx);\n\t                        (0, lib$3.defineReadOnly)(contract, \"deployTransaction\", tx);\n\t                        return [2 /*return*/, contract];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    ContractFactory.prototype.attach = function (address) {\n\t        return (this.constructor).getContract(address, this.interface, this.signer);\n\t    };\n\t    ContractFactory.prototype.connect = function (signer) {\n\t        return new (this.constructor)(this.interface, this.bytecode, signer);\n\t    };\n\t    ContractFactory.fromSolidity = function (compilerOutput, signer) {\n\t        if (compilerOutput == null) {\n\t            logger.throwError(\"missing compiler output\", lib.Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n\t        }\n\t        if (typeof (compilerOutput) === \"string\") {\n\t            compilerOutput = JSON.parse(compilerOutput);\n\t        }\n\t        var abi = compilerOutput.abi;\n\t        var bytecode = null;\n\t        if (compilerOutput.bytecode) {\n\t            bytecode = compilerOutput.bytecode;\n\t        }\n\t        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n\t            bytecode = compilerOutput.evm.bytecode;\n\t        }\n\t        return new this(abi, bytecode, signer);\n\t    };\n\t    ContractFactory.getInterface = function (contractInterface) {\n\t        return Contract.getInterface(contractInterface);\n\t    };\n\t    ContractFactory.getContractAddress = function (tx) {\n\t        return (0, lib$6.getContractAddress)(tx);\n\t    };\n\t    ContractFactory.getContract = function (address, contractInterface, signer) {\n\t        return new Contract(address, contractInterface, signer);\n\t    };\n\t    return ContractFactory;\n\t}());\n\texports.ContractFactory = ContractFactory;\n\n\t});\n\n\tvar index$f = /*@__PURE__*/getDefaultExportFromCjs(lib$f);\n\n\tvar lib$g = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\t/**\n\t * var basex = require(\"base-x\");\n\t *\n\t * This implementation is heavily based on base-x. The main reason to\n\t * deviate was to prevent the dependency of Buffer.\n\t *\n\t * Contributors:\n\t *\n\t * base-x encoding\n\t * Forked from https://github.com/cryptocoinjs/bs58\n\t * Originally written by Mike Hearn for BitcoinJ\n\t * Copyright (c) 2011 Google Inc\n\t * Ported to JavaScript by Stefan Thomas\n\t * Merged Buffer refactorings from base58-native by Stephen Pair\n\t * Copyright (c) 2013 BitPay Inc\n\t *\n\t * The MIT License (MIT)\n\t *\n\t * Copyright base-x contributors (c) 2016\n\t *\n\t * Permission is hereby granted, free of charge, to any person obtaining a\n\t * copy of this software and associated documentation files (the \"Software\"),\n\t * to deal in the Software without restriction, including without limitation\n\t * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\t * and/or sell copies of the Software, and to permit persons to whom the\n\t * Software is furnished to do so, subject to the following conditions:\n\t *\n\t * The above copyright notice and this permission notice shall be included in\n\t * all copies or substantial portions of the Software.\n\n\t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\t * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n\t * IN THE SOFTWARE.\n\t *\n\t */\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Base58 = exports.Base32 = exports.BaseX = void 0;\n\n\n\tvar BaseX = /** @class */ (function () {\n\t    function BaseX(alphabet) {\n\t        (0, lib$3.defineReadOnly)(this, \"alphabet\", alphabet);\n\t        (0, lib$3.defineReadOnly)(this, \"base\", alphabet.length);\n\t        (0, lib$3.defineReadOnly)(this, \"_alphabetMap\", {});\n\t        (0, lib$3.defineReadOnly)(this, \"_leader\", alphabet.charAt(0));\n\t        // pre-compute lookup table\n\t        for (var i = 0; i < alphabet.length; i++) {\n\t            this._alphabetMap[alphabet.charAt(i)] = i;\n\t        }\n\t    }\n\t    BaseX.prototype.encode = function (value) {\n\t        var source = (0, lib$1.arrayify)(value);\n\t        if (source.length === 0) {\n\t            return \"\";\n\t        }\n\t        var digits = [0];\n\t        for (var i = 0; i < source.length; ++i) {\n\t            var carry = source[i];\n\t            for (var j = 0; j < digits.length; ++j) {\n\t                carry += digits[j] << 8;\n\t                digits[j] = carry % this.base;\n\t                carry = (carry / this.base) | 0;\n\t            }\n\t            while (carry > 0) {\n\t                digits.push(carry % this.base);\n\t                carry = (carry / this.base) | 0;\n\t            }\n\t        }\n\t        var string = \"\";\n\t        // deal with leading zeros\n\t        for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n\t            string += this._leader;\n\t        }\n\t        // convert digits to a string\n\t        for (var q = digits.length - 1; q >= 0; --q) {\n\t            string += this.alphabet[digits[q]];\n\t        }\n\t        return string;\n\t    };\n\t    BaseX.prototype.decode = function (value) {\n\t        if (typeof (value) !== \"string\") {\n\t            throw new TypeError(\"Expected String\");\n\t        }\n\t        var bytes = [];\n\t        if (value.length === 0) {\n\t            return new Uint8Array(bytes);\n\t        }\n\t        bytes.push(0);\n\t        for (var i = 0; i < value.length; i++) {\n\t            var byte = this._alphabetMap[value[i]];\n\t            if (byte === undefined) {\n\t                throw new Error(\"Non-base\" + this.base + \" character\");\n\t            }\n\t            var carry = byte;\n\t            for (var j = 0; j < bytes.length; ++j) {\n\t                carry += bytes[j] * this.base;\n\t                bytes[j] = carry & 0xff;\n\t                carry >>= 8;\n\t            }\n\t            while (carry > 0) {\n\t                bytes.push(carry & 0xff);\n\t                carry >>= 8;\n\t            }\n\t        }\n\t        // deal with leading zeros\n\t        for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n\t            bytes.push(0);\n\t        }\n\t        return (0, lib$1.arrayify)(new Uint8Array(bytes.reverse()));\n\t    };\n\t    return BaseX;\n\t}());\n\texports.BaseX = BaseX;\n\tvar Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\n\texports.Base32 = Base32;\n\tvar Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n\texports.Base58 = Base58;\n\t//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n\t//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n\n\t});\n\n\tvar index$g = /*@__PURE__*/getDefaultExportFromCjs(lib$g);\n\n\tvar types = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.SupportedAlgorithm = void 0;\n\tvar SupportedAlgorithm;\n\t(function (SupportedAlgorithm) {\n\t    SupportedAlgorithm[\"sha256\"] = \"sha256\";\n\t    SupportedAlgorithm[\"sha512\"] = \"sha512\";\n\t})(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));\n\t;\n\n\t});\n\n\tvar types$1 = /*@__PURE__*/getDefaultExportFromCjs(types);\n\n\tvar _version$s = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"sha2/5.5.0\";\n\n\t});\n\n\tvar _version$t = /*@__PURE__*/getDefaultExportFromCjs(_version$s);\n\n\tvar browserSha2 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {\n\t    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.computeHmac = exports.sha512 = exports.sha256 = exports.ripemd160 = void 0;\n\tvar hash_js_1 = __importDefault(hash_1);\n\t//const _ripemd160 = _hash.ripemd160;\n\n\n\n\n\tvar logger = new lib.Logger(_version$s.version);\n\tfunction ripemd160(data) {\n\t    return \"0x\" + (hash_js_1.default.ripemd160().update((0, lib$1.arrayify)(data)).digest(\"hex\"));\n\t}\n\texports.ripemd160 = ripemd160;\n\tfunction sha256(data) {\n\t    return \"0x\" + (hash_js_1.default.sha256().update((0, lib$1.arrayify)(data)).digest(\"hex\"));\n\t}\n\texports.sha256 = sha256;\n\tfunction sha512(data) {\n\t    return \"0x\" + (hash_js_1.default.sha512().update((0, lib$1.arrayify)(data)).digest(\"hex\"));\n\t}\n\texports.sha512 = sha512;\n\tfunction computeHmac(algorithm, key, data) {\n\t    if (!types.SupportedAlgorithm[algorithm]) {\n\t        logger.throwError(\"unsupported algorithm \" + algorithm, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t            operation: \"hmac\",\n\t            algorithm: algorithm\n\t        });\n\t    }\n\t    return \"0x\" + hash_js_1.default.hmac(hash_js_1.default[algorithm], (0, lib$1.arrayify)(key)).update((0, lib$1.arrayify)(data)).digest(\"hex\");\n\t}\n\texports.computeHmac = computeHmac;\n\n\t});\n\n\tvar browserSha2$1 = /*@__PURE__*/getDefaultExportFromCjs(browserSha2);\n\n\tvar lib$h = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.SupportedAlgorithm = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.computeHmac = void 0;\n\n\tObject.defineProperty(exports, \"computeHmac\", { enumerable: true, get: function () { return browserSha2.computeHmac; } });\n\tObject.defineProperty(exports, \"ripemd160\", { enumerable: true, get: function () { return browserSha2.ripemd160; } });\n\tObject.defineProperty(exports, \"sha256\", { enumerable: true, get: function () { return browserSha2.sha256; } });\n\tObject.defineProperty(exports, \"sha512\", { enumerable: true, get: function () { return browserSha2.sha512; } });\n\n\tObject.defineProperty(exports, \"SupportedAlgorithm\", { enumerable: true, get: function () { return types.SupportedAlgorithm; } });\n\n\t});\n\n\tvar index$h = /*@__PURE__*/getDefaultExportFromCjs(lib$h);\n\n\tvar browserPbkdf2 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.pbkdf2 = void 0;\n\n\n\tfunction pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n\t    password = (0, lib$1.arrayify)(password);\n\t    salt = (0, lib$1.arrayify)(salt);\n\t    var hLen;\n\t    var l = 1;\n\t    var DK = new Uint8Array(keylen);\n\t    var block1 = new Uint8Array(salt.length + 4);\n\t    block1.set(salt);\n\t    //salt.copy(block1, 0, 0, salt.length)\n\t    var r;\n\t    var T;\n\t    for (var i = 1; i <= l; i++) {\n\t        //block1.writeUInt32BE(i, salt.length)\n\t        block1[salt.length] = (i >> 24) & 0xff;\n\t        block1[salt.length + 1] = (i >> 16) & 0xff;\n\t        block1[salt.length + 2] = (i >> 8) & 0xff;\n\t        block1[salt.length + 3] = i & 0xff;\n\t        //let U = createHmac(password).update(block1).digest();\n\t        var U = (0, lib$1.arrayify)((0, lib$h.computeHmac)(hashAlgorithm, password, block1));\n\t        if (!hLen) {\n\t            hLen = U.length;\n\t            T = new Uint8Array(hLen);\n\t            l = Math.ceil(keylen / hLen);\n\t            r = keylen - (l - 1) * hLen;\n\t        }\n\t        //U.copy(T, 0, 0, hLen)\n\t        T.set(U);\n\t        for (var j = 1; j < iterations; j++) {\n\t            //U = createHmac(password).update(U).digest();\n\t            U = (0, lib$1.arrayify)((0, lib$h.computeHmac)(hashAlgorithm, password, U));\n\t            for (var k = 0; k < hLen; k++)\n\t                T[k] ^= U[k];\n\t        }\n\t        var destPos = (i - 1) * hLen;\n\t        var len = (i === l ? r : hLen);\n\t        //T.copy(DK, destPos, 0, len)\n\t        DK.set((0, lib$1.arrayify)(T).slice(0, len), destPos);\n\t    }\n\t    return (0, lib$1.hexlify)(DK);\n\t}\n\texports.pbkdf2 = pbkdf2;\n\n\t});\n\n\tvar browserPbkdf2$1 = /*@__PURE__*/getDefaultExportFromCjs(browserPbkdf2);\n\n\tvar lib$i = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.pbkdf2 = void 0;\n\n\tObject.defineProperty(exports, \"pbkdf2\", { enumerable: true, get: function () { return browserPbkdf2.pbkdf2; } });\n\n\t});\n\n\tvar index$i = /*@__PURE__*/getDefaultExportFromCjs(lib$i);\n\n\tvar _version$u = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"wordlists/5.5.0\";\n\n\t});\n\n\tvar _version$v = /*@__PURE__*/getDefaultExportFromCjs(_version$u);\n\n\tvar wordlist = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Wordlist = exports.logger = void 0;\n\t// This gets overridden by rollup\n\tvar exportWordlist = false;\n\n\n\n\n\texports.logger = new lib.Logger(_version$u.version);\n\tvar Wordlist = /** @class */ (function () {\n\t    function Wordlist(locale) {\n\t        var _newTarget = this.constructor;\n\t        exports.logger.checkAbstract(_newTarget, Wordlist);\n\t        (0, lib$3.defineReadOnly)(this, \"locale\", locale);\n\t    }\n\t    // Subclasses may override this\n\t    Wordlist.prototype.split = function (mnemonic) {\n\t        return mnemonic.toLowerCase().split(/ +/g);\n\t    };\n\t    // Subclasses may override this\n\t    Wordlist.prototype.join = function (words) {\n\t        return words.join(\" \");\n\t    };\n\t    Wordlist.check = function (wordlist) {\n\t        var words = [];\n\t        for (var i = 0; i < 2048; i++) {\n\t            var word = wordlist.getWord(i);\n\t            /* istanbul ignore if */\n\t            if (i !== wordlist.getWordIndex(word)) {\n\t                return \"0x\";\n\t            }\n\t            words.push(word);\n\t        }\n\t        return (0, lib$9.id)(words.join(\"\\n\") + \"\\n\");\n\t    };\n\t    Wordlist.register = function (lang, name) {\n\t        if (!name) {\n\t            name = lang.locale;\n\t        }\n\t        /* istanbul ignore if */\n\t        if (exportWordlist) {\n\t            try {\n\t                var anyGlobal = window;\n\t                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n\t                    if (!anyGlobal._ethers.wordlists[name]) {\n\t                        (0, lib$3.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);\n\t                    }\n\t                }\n\t            }\n\t            catch (error) { }\n\t        }\n\t    };\n\t    return Wordlist;\n\t}());\n\texports.Wordlist = Wordlist;\n\n\t});\n\n\tvar wordlist$1 = /*@__PURE__*/getDefaultExportFromCjs(wordlist);\n\n\tvar langEn_1 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.langEn = void 0;\n\n\tvar words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\n\tvar wordlist$1 = null;\n\tfunction loadWords(lang) {\n\t    if (wordlist$1 != null) {\n\t        return;\n\t    }\n\t    wordlist$1 = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n\t    // Verify the computed list matches the official list\n\t    /* istanbul ignore if */\n\t    if (wordlist.Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n\t        wordlist$1 = null;\n\t        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n\t    }\n\t}\n\tvar LangEn = /** @class */ (function (_super) {\n\t    __extends(LangEn, _super);\n\t    function LangEn() {\n\t        return _super.call(this, \"en\") || this;\n\t    }\n\t    LangEn.prototype.getWord = function (index) {\n\t        loadWords(this);\n\t        return wordlist$1[index];\n\t    };\n\t    LangEn.prototype.getWordIndex = function (word) {\n\t        loadWords(this);\n\t        return wordlist$1.indexOf(word);\n\t    };\n\t    return LangEn;\n\t}(wordlist.Wordlist));\n\tvar langEn = new LangEn();\n\texports.langEn = langEn;\n\twordlist.Wordlist.register(langEn);\n\n\t});\n\n\tvar langEn = /*@__PURE__*/getDefaultExportFromCjs(langEn_1);\n\n\tvar browserWordlists = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.wordlists = void 0;\n\n\texports.wordlists = {\n\t    en: langEn_1.langEn\n\t};\n\n\t});\n\n\tvar browserWordlists$1 = /*@__PURE__*/getDefaultExportFromCjs(browserWordlists);\n\n\tvar lib$j = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.wordlists = exports.Wordlist = exports.logger = void 0;\n\t// Wordlists\n\t// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md\n\n\tObject.defineProperty(exports, \"logger\", { enumerable: true, get: function () { return wordlist.logger; } });\n\tObject.defineProperty(exports, \"Wordlist\", { enumerable: true, get: function () { return wordlist.Wordlist; } });\n\n\tObject.defineProperty(exports, \"wordlists\", { enumerable: true, get: function () { return browserWordlists.wordlists; } });\n\n\t});\n\n\tvar index$j = /*@__PURE__*/getDefaultExportFromCjs(lib$j);\n\n\tvar _version$w = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"hdnode/5.5.0\";\n\n\t});\n\n\tvar _version$x = /*@__PURE__*/getDefaultExportFromCjs(_version$w);\n\n\tvar lib$k = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.getAccountPath = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.mnemonicToSeed = exports.HDNode = exports.defaultPath = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$w.version);\n\tvar N = lib$2.BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\t// \"Bitcoin seed\"\n\tvar MasterSecret = (0, lib$8.toUtf8Bytes)(\"Bitcoin seed\");\n\tvar HardenedBit = 0x80000000;\n\t// Returns a byte with the MSB bits set\n\tfunction getUpperMask(bits) {\n\t    return ((1 << bits) - 1) << (8 - bits);\n\t}\n\t// Returns a byte with the LSB bits set\n\tfunction getLowerMask(bits) {\n\t    return (1 << bits) - 1;\n\t}\n\tfunction bytes32(value) {\n\t    return (0, lib$1.hexZeroPad)((0, lib$1.hexlify)(value), 32);\n\t}\n\tfunction base58check(data) {\n\t    return lib$g.Base58.encode((0, lib$1.concat)([data, (0, lib$1.hexDataSlice)((0, lib$h.sha256)((0, lib$h.sha256)(data)), 0, 4)]));\n\t}\n\tfunction getWordlist(wordlist) {\n\t    if (wordlist == null) {\n\t        return lib$j.wordlists[\"en\"];\n\t    }\n\t    if (typeof (wordlist) === \"string\") {\n\t        var words = lib$j.wordlists[wordlist];\n\t        if (words == null) {\n\t            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n\t        }\n\t        return words;\n\t    }\n\t    return wordlist;\n\t}\n\tvar _constructorGuard = {};\n\texports.defaultPath = \"m/44'/60'/0'/0/0\";\n\t;\n\tvar HDNode = /** @class */ (function () {\n\t    /**\n\t     *  This constructor should not be called directly.\n\t     *\n\t     *  Please use:\n\t     *   - fromMnemonic\n\t     *   - fromSeed\n\t     */\n\t    function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n\t        var _newTarget = this.constructor;\n\t        logger.checkNew(_newTarget, HDNode);\n\t        /* istanbul ignore if */\n\t        if (constructorGuard !== _constructorGuard) {\n\t            throw new Error(\"HDNode constructor cannot be called directly\");\n\t        }\n\t        if (privateKey) {\n\t            var signingKey = new lib$d.SigningKey(privateKey);\n\t            (0, lib$3.defineReadOnly)(this, \"privateKey\", signingKey.privateKey);\n\t            (0, lib$3.defineReadOnly)(this, \"publicKey\", signingKey.compressedPublicKey);\n\t        }\n\t        else {\n\t            (0, lib$3.defineReadOnly)(this, \"privateKey\", null);\n\t            (0, lib$3.defineReadOnly)(this, \"publicKey\", (0, lib$1.hexlify)(publicKey));\n\t        }\n\t        (0, lib$3.defineReadOnly)(this, \"parentFingerprint\", parentFingerprint);\n\t        (0, lib$3.defineReadOnly)(this, \"fingerprint\", (0, lib$1.hexDataSlice)((0, lib$h.ripemd160)((0, lib$h.sha256)(this.publicKey)), 0, 4));\n\t        (0, lib$3.defineReadOnly)(this, \"address\", (0, lib$e.computeAddress)(this.publicKey));\n\t        (0, lib$3.defineReadOnly)(this, \"chainCode\", chainCode);\n\t        (0, lib$3.defineReadOnly)(this, \"index\", index);\n\t        (0, lib$3.defineReadOnly)(this, \"depth\", depth);\n\t        if (mnemonicOrPath == null) {\n\t            // From a source that does not preserve the path (e.g. extended keys)\n\t            (0, lib$3.defineReadOnly)(this, \"mnemonic\", null);\n\t            (0, lib$3.defineReadOnly)(this, \"path\", null);\n\t        }\n\t        else if (typeof (mnemonicOrPath) === \"string\") {\n\t            // From a source that does not preserve the mnemonic (e.g. neutered)\n\t            (0, lib$3.defineReadOnly)(this, \"mnemonic\", null);\n\t            (0, lib$3.defineReadOnly)(this, \"path\", mnemonicOrPath);\n\t        }\n\t        else {\n\t            // From a fully qualified source\n\t            (0, lib$3.defineReadOnly)(this, \"mnemonic\", mnemonicOrPath);\n\t            (0, lib$3.defineReadOnly)(this, \"path\", mnemonicOrPath.path);\n\t        }\n\t    }\n\t    Object.defineProperty(HDNode.prototype, \"extendedKey\", {\n\t        get: function () {\n\t            // We only support the mainnet values for now, but if anyone needs\n\t            // testnet values, let me know. I believe current sentiment is that\n\t            // we should always use mainnet, and use BIP-44 to derive the network\n\t            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n\t            //   - Testnet: public=0x043587CF, private=0x04358394\n\t            if (this.depth >= 256) {\n\t                throw new Error(\"Depth too large!\");\n\t            }\n\t            return base58check((0, lib$1.concat)([\n\t                ((this.privateKey != null) ? \"0x0488ADE4\" : \"0x0488B21E\"),\n\t                (0, lib$1.hexlify)(this.depth),\n\t                this.parentFingerprint,\n\t                (0, lib$1.hexZeroPad)((0, lib$1.hexlify)(this.index), 4),\n\t                this.chainCode,\n\t                ((this.privateKey != null) ? (0, lib$1.concat)([\"0x00\", this.privateKey]) : this.publicKey),\n\t            ]));\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    HDNode.prototype.neuter = function () {\n\t        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n\t    };\n\t    HDNode.prototype._derive = function (index) {\n\t        if (index > 0xffffffff) {\n\t            throw new Error(\"invalid index - \" + String(index));\n\t        }\n\t        // Base path\n\t        var path = this.path;\n\t        if (path) {\n\t            path += \"/\" + (index & ~HardenedBit);\n\t        }\n\t        var data = new Uint8Array(37);\n\t        if (index & HardenedBit) {\n\t            if (!this.privateKey) {\n\t                throw new Error(\"cannot derive child of neutered node\");\n\t            }\n\t            // Data = 0x00 || ser_256(k_par)\n\t            data.set((0, lib$1.arrayify)(this.privateKey), 1);\n\t            // Hardened path\n\t            if (path) {\n\t                path += \"'\";\n\t            }\n\t        }\n\t        else {\n\t            // Data = ser_p(point(k_par))\n\t            data.set((0, lib$1.arrayify)(this.publicKey));\n\t        }\n\t        // Data += ser_32(i)\n\t        for (var i = 24; i >= 0; i -= 8) {\n\t            data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\n\t        }\n\t        var I = (0, lib$1.arrayify)((0, lib$h.computeHmac)(lib$h.SupportedAlgorithm.sha512, this.chainCode, data));\n\t        var IL = I.slice(0, 32);\n\t        var IR = I.slice(32);\n\t        // The private key\n\t        var ki = null;\n\t        // The public key\n\t        var Ki = null;\n\t        if (this.privateKey) {\n\t            ki = bytes32(lib$2.BigNumber.from(IL).add(this.privateKey).mod(N));\n\t        }\n\t        else {\n\t            var ek = new lib$d.SigningKey((0, lib$1.hexlify)(IL));\n\t            Ki = ek._addPoint(this.publicKey);\n\t        }\n\t        var mnemonicOrPath = path;\n\t        var srcMnemonic = this.mnemonic;\n\t        if (srcMnemonic) {\n\t            mnemonicOrPath = Object.freeze({\n\t                phrase: srcMnemonic.phrase,\n\t                path: path,\n\t                locale: (srcMnemonic.locale || \"en\")\n\t            });\n\t        }\n\t        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n\t    };\n\t    HDNode.prototype.derivePath = function (path) {\n\t        var components = path.split(\"/\");\n\t        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n\t            throw new Error(\"invalid path - \" + path);\n\t        }\n\t        if (components[0] === \"m\") {\n\t            components.shift();\n\t        }\n\t        var result = this;\n\t        for (var i = 0; i < components.length; i++) {\n\t            var component = components[i];\n\t            if (component.match(/^[0-9]+'$/)) {\n\t                var index = parseInt(component.substring(0, component.length - 1));\n\t                if (index >= HardenedBit) {\n\t                    throw new Error(\"invalid path index - \" + component);\n\t                }\n\t                result = result._derive(HardenedBit + index);\n\t            }\n\t            else if (component.match(/^[0-9]+$/)) {\n\t                var index = parseInt(component);\n\t                if (index >= HardenedBit) {\n\t                    throw new Error(\"invalid path index - \" + component);\n\t                }\n\t                result = result._derive(index);\n\t            }\n\t            else {\n\t                throw new Error(\"invalid path component - \" + component);\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    HDNode._fromSeed = function (seed, mnemonic) {\n\t        var seedArray = (0, lib$1.arrayify)(seed);\n\t        if (seedArray.length < 16 || seedArray.length > 64) {\n\t            throw new Error(\"invalid seed\");\n\t        }\n\t        var I = (0, lib$1.arrayify)((0, lib$h.computeHmac)(lib$h.SupportedAlgorithm.sha512, MasterSecret, seedArray));\n\t        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n\t    };\n\t    HDNode.fromMnemonic = function (mnemonic, password, wordlist) {\n\t        // If a locale name was passed in, find the associated wordlist\n\t        wordlist = getWordlist(wordlist);\n\t        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n\t        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n\t        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n\t            phrase: mnemonic,\n\t            path: \"m\",\n\t            locale: wordlist.locale\n\t        });\n\t    };\n\t    HDNode.fromSeed = function (seed) {\n\t        return HDNode._fromSeed(seed, null);\n\t    };\n\t    HDNode.fromExtendedKey = function (extendedKey) {\n\t        var bytes = lib$g.Base58.decode(extendedKey);\n\t        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n\t            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n\t        }\n\t        var depth = bytes[4];\n\t        var parentFingerprint = (0, lib$1.hexlify)(bytes.slice(5, 9));\n\t        var index = parseInt((0, lib$1.hexlify)(bytes.slice(9, 13)).substring(2), 16);\n\t        var chainCode = (0, lib$1.hexlify)(bytes.slice(13, 45));\n\t        var key = bytes.slice(45, 78);\n\t        switch ((0, lib$1.hexlify)(bytes.slice(0, 4))) {\n\t            // Public Key\n\t            case \"0x0488b21e\":\n\t            case \"0x043587cf\":\n\t                return new HDNode(_constructorGuard, null, (0, lib$1.hexlify)(key), parentFingerprint, chainCode, index, depth, null);\n\t            // Private Key\n\t            case \"0x0488ade4\":\n\t            case \"0x04358394 \":\n\t                if (key[0] !== 0) {\n\t                    break;\n\t                }\n\t                return new HDNode(_constructorGuard, (0, lib$1.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n\t        }\n\t        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n\t    };\n\t    return HDNode;\n\t}());\n\texports.HDNode = HDNode;\n\tfunction mnemonicToSeed(mnemonic, password) {\n\t    if (!password) {\n\t        password = \"\";\n\t    }\n\t    var salt = (0, lib$8.toUtf8Bytes)(\"mnemonic\" + password, lib$8.UnicodeNormalizationForm.NFKD);\n\t    return (0, lib$i.pbkdf2)((0, lib$8.toUtf8Bytes)(mnemonic, lib$8.UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n\t}\n\texports.mnemonicToSeed = mnemonicToSeed;\n\tfunction mnemonicToEntropy(mnemonic, wordlist) {\n\t    wordlist = getWordlist(wordlist);\n\t    logger.checkNormalize();\n\t    var words = wordlist.split(mnemonic);\n\t    if ((words.length % 3) !== 0) {\n\t        throw new Error(\"invalid mnemonic\");\n\t    }\n\t    var entropy = (0, lib$1.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));\n\t    var offset = 0;\n\t    for (var i = 0; i < words.length; i++) {\n\t        var index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n\t        if (index === -1) {\n\t            throw new Error(\"invalid mnemonic\");\n\t        }\n\t        for (var bit = 0; bit < 11; bit++) {\n\t            if (index & (1 << (10 - bit))) {\n\t                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n\t            }\n\t            offset++;\n\t        }\n\t    }\n\t    var entropyBits = 32 * words.length / 3;\n\t    var checksumBits = words.length / 3;\n\t    var checksumMask = getUpperMask(checksumBits);\n\t    var checksum = (0, lib$1.arrayify)((0, lib$h.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\t    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n\t        throw new Error(\"invalid checksum\");\n\t    }\n\t    return (0, lib$1.hexlify)(entropy.slice(0, entropyBits / 8));\n\t}\n\texports.mnemonicToEntropy = mnemonicToEntropy;\n\tfunction entropyToMnemonic(entropy, wordlist) {\n\t    wordlist = getWordlist(wordlist);\n\t    entropy = (0, lib$1.arrayify)(entropy);\n\t    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n\t        throw new Error(\"invalid entropy\");\n\t    }\n\t    var indices = [0];\n\t    var remainingBits = 11;\n\t    for (var i = 0; i < entropy.length; i++) {\n\t        // Consume the whole byte (with still more to go)\n\t        if (remainingBits > 8) {\n\t            indices[indices.length - 1] <<= 8;\n\t            indices[indices.length - 1] |= entropy[i];\n\t            remainingBits -= 8;\n\t            // This byte will complete an 11-bit index\n\t        }\n\t        else {\n\t            indices[indices.length - 1] <<= remainingBits;\n\t            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\t            // Start the next word\n\t            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\t            remainingBits += 3;\n\t        }\n\t    }\n\t    // Compute the checksum bits\n\t    var checksumBits = entropy.length / 4;\n\t    var checksum = (0, lib$1.arrayify)((0, lib$h.sha256)(entropy))[0] & getUpperMask(checksumBits);\n\t    // Shift the checksum into the word indices\n\t    indices[indices.length - 1] <<= checksumBits;\n\t    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n\t    return wordlist.join(indices.map(function (index) { return wordlist.getWord(index); }));\n\t}\n\texports.entropyToMnemonic = entropyToMnemonic;\n\tfunction isValidMnemonic(mnemonic, wordlist) {\n\t    try {\n\t        mnemonicToEntropy(mnemonic, wordlist);\n\t        return true;\n\t    }\n\t    catch (error) { }\n\t    return false;\n\t}\n\texports.isValidMnemonic = isValidMnemonic;\n\tfunction getAccountPath(index) {\n\t    if (typeof (index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n\t        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n\t    }\n\t    return \"m/44'/60'/\" + index + \"'/0/0\";\n\t}\n\texports.getAccountPath = getAccountPath;\n\n\t});\n\n\tvar index$k = /*@__PURE__*/getDefaultExportFromCjs(lib$k);\n\n\tvar _version$y = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"random/5.5.0\";\n\n\t});\n\n\tvar _version$z = /*@__PURE__*/getDefaultExportFromCjs(_version$y);\n\n\tvar browserRandom = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.randomBytes = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$y.version);\n\t// Debugging line for testing browser lib in node\n\t//const window = { crypto: { getRandomValues: () => { } } };\n\tvar anyGlobal = null;\n\ttry {\n\t    anyGlobal = window;\n\t    if (anyGlobal == null) {\n\t        throw new Error(\"try next\");\n\t    }\n\t}\n\tcatch (error) {\n\t    try {\n\t        anyGlobal = commonjsGlobal;\n\t        if (anyGlobal == null) {\n\t            throw new Error(\"try next\");\n\t        }\n\t    }\n\t    catch (error) {\n\t        anyGlobal = {};\n\t    }\n\t}\n\tvar crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n\tif (!crypto || !crypto.getRandomValues) {\n\t    logger.warn(\"WARNING: Missing strong random number source\");\n\t    crypto = {\n\t        getRandomValues: function (buffer) {\n\t            return logger.throwError(\"no secure random source avaialble\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"crypto.getRandomValues\"\n\t            });\n\t        }\n\t    };\n\t}\n\tfunction randomBytes(length) {\n\t    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n\t        logger.throwArgumentError(\"invalid length\", \"length\", length);\n\t    }\n\t    var result = new Uint8Array(length);\n\t    crypto.getRandomValues(result);\n\t    return (0, lib$1.arrayify)(result);\n\t}\n\texports.randomBytes = randomBytes;\n\t;\n\n\t});\n\n\tvar browserRandom$1 = /*@__PURE__*/getDefaultExportFromCjs(browserRandom);\n\n\tvar shuffle = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.shuffled = void 0;\n\tfunction shuffled(array) {\n\t    array = array.slice();\n\t    for (var i = array.length - 1; i > 0; i--) {\n\t        var j = Math.floor(Math.random() * (i + 1));\n\t        var tmp = array[i];\n\t        array[i] = array[j];\n\t        array[j] = tmp;\n\t    }\n\t    return array;\n\t}\n\texports.shuffled = shuffled;\n\n\t});\n\n\tvar shuffle$1 = /*@__PURE__*/getDefaultExportFromCjs(shuffle);\n\n\tvar lib$l = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.shuffled = exports.randomBytes = void 0;\n\n\tObject.defineProperty(exports, \"randomBytes\", { enumerable: true, get: function () { return browserRandom.randomBytes; } });\n\n\tObject.defineProperty(exports, \"shuffled\", { enumerable: true, get: function () { return shuffle.shuffled; } });\n\n\t});\n\n\tvar index$l = /*@__PURE__*/getDefaultExportFromCjs(lib$l);\n\n\tvar aesJs = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\n\t(function(root) {\n\n\t    function checkInt(value) {\n\t        return (parseInt(value) === value);\n\t    }\n\n\t    function checkInts(arrayish) {\n\t        if (!checkInt(arrayish.length)) { return false; }\n\n\t        for (var i = 0; i < arrayish.length; i++) {\n\t            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    function coerceArray(arg, copy) {\n\n\t        // ArrayBuffer view\n\t        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n\n\t            if (copy) {\n\t                if (arg.slice) {\n\t                    arg = arg.slice();\n\t                } else {\n\t                    arg = Array.prototype.slice.call(arg);\n\t                }\n\t            }\n\n\t            return arg;\n\t        }\n\n\t        // It's an array; check it is a valid representation of a byte\n\t        if (Array.isArray(arg)) {\n\t            if (!checkInts(arg)) {\n\t                throw new Error('Array contains invalid value: ' + arg);\n\t            }\n\n\t            return new Uint8Array(arg);\n\t        }\n\n\t        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n\t        if (checkInt(arg.length) && checkInts(arg)) {\n\t            return new Uint8Array(arg);\n\t        }\n\n\t        throw new Error('unsupported array-like object');\n\t    }\n\n\t    function createArray(length) {\n\t        return new Uint8Array(length);\n\t    }\n\n\t    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n\t        if (sourceStart != null || sourceEnd != null) {\n\t            if (sourceArray.slice) {\n\t                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n\t            } else {\n\t                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n\t            }\n\t        }\n\t        targetArray.set(sourceArray, targetStart);\n\t    }\n\n\n\n\t    var convertUtf8 = (function() {\n\t        function toBytes(text) {\n\t            var result = [], i = 0;\n\t            text = encodeURI(text);\n\t            while (i < text.length) {\n\t                var c = text.charCodeAt(i++);\n\n\t                // if it is a % sign, encode the following 2 bytes as a hex value\n\t                if (c === 37) {\n\t                    result.push(parseInt(text.substr(i, 2), 16));\n\t                    i += 2;\n\n\t                // otherwise, just the actual byte\n\t                } else {\n\t                    result.push(c);\n\t                }\n\t            }\n\n\t            return coerceArray(result);\n\t        }\n\n\t        function fromBytes(bytes) {\n\t            var result = [], i = 0;\n\n\t            while (i < bytes.length) {\n\t                var c = bytes[i];\n\n\t                if (c < 128) {\n\t                    result.push(String.fromCharCode(c));\n\t                    i++;\n\t                } else if (c > 191 && c < 224) {\n\t                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n\t                    i += 2;\n\t                } else {\n\t                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n\t                    i += 3;\n\t                }\n\t            }\n\n\t            return result.join('');\n\t        }\n\n\t        return {\n\t            toBytes: toBytes,\n\t            fromBytes: fromBytes,\n\t        }\n\t    })();\n\n\t    var convertHex = (function() {\n\t        function toBytes(text) {\n\t            var result = [];\n\t            for (var i = 0; i < text.length; i += 2) {\n\t                result.push(parseInt(text.substr(i, 2), 16));\n\t            }\n\n\t            return result;\n\t        }\n\n\t        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n\t        var Hex = '0123456789abcdef';\n\n\t        function fromBytes(bytes) {\n\t                var result = [];\n\t                for (var i = 0; i < bytes.length; i++) {\n\t                    var v = bytes[i];\n\t                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n\t                }\n\t                return result.join('');\n\t        }\n\n\t        return {\n\t            toBytes: toBytes,\n\t            fromBytes: fromBytes,\n\t        }\n\t    })();\n\n\n\t    // Number of rounds by keysize\n\t    var numberOfRounds = {16: 10, 24: 12, 32: 14};\n\n\t    // Round constant words\n\t    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n\t    // S-box and Inverse S-box (S is for Substitution)\n\t    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n\t    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n\t    // Transformations for encryption\n\t    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n\t    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n\t    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n\t    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n\t    // Transformations for decryption\n\t    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n\t    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n\t    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n\t    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n\t    // Transformations for decryption key expansion\n\t    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n\t    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n\t    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n\t    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n\t    function convertToInt32(bytes) {\n\t        var result = [];\n\t        for (var i = 0; i < bytes.length; i += 4) {\n\t            result.push(\n\t                (bytes[i    ] << 24) |\n\t                (bytes[i + 1] << 16) |\n\t                (bytes[i + 2] <<  8) |\n\t                 bytes[i + 3]\n\t            );\n\t        }\n\t        return result;\n\t    }\n\n\t    var AES = function(key) {\n\t        if (!(this instanceof AES)) {\n\t            throw Error('AES must be instanitated with `new`');\n\t        }\n\n\t        Object.defineProperty(this, 'key', {\n\t            value: coerceArray(key, true)\n\t        });\n\n\t        this._prepare();\n\t    };\n\n\n\t    AES.prototype._prepare = function() {\n\n\t        var rounds = numberOfRounds[this.key.length];\n\t        if (rounds == null) {\n\t            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n\t        }\n\n\t        // encryption round keys\n\t        this._Ke = [];\n\n\t        // decryption round keys\n\t        this._Kd = [];\n\n\t        for (var i = 0; i <= rounds; i++) {\n\t            this._Ke.push([0, 0, 0, 0]);\n\t            this._Kd.push([0, 0, 0, 0]);\n\t        }\n\n\t        var roundKeyCount = (rounds + 1) * 4;\n\t        var KC = this.key.length / 4;\n\n\t        // convert the key into ints\n\t        var tk = convertToInt32(this.key);\n\n\t        // copy values into round key arrays\n\t        var index;\n\t        for (var i = 0; i < KC; i++) {\n\t            index = i >> 2;\n\t            this._Ke[index][i % 4] = tk[i];\n\t            this._Kd[rounds - index][i % 4] = tk[i];\n\t        }\n\n\t        // key expansion (fips-197 section 5.2)\n\t        var rconpointer = 0;\n\t        var t = KC, tt;\n\t        while (t < roundKeyCount) {\n\t            tt = tk[KC - 1];\n\t            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n\t                      (S[(tt >>  8) & 0xFF] << 16) ^\n\t                      (S[ tt        & 0xFF] <<  8) ^\n\t                       S[(tt >> 24) & 0xFF]        ^\n\t                      (rcon[rconpointer] << 24));\n\t            rconpointer += 1;\n\n\t            // key expansion (for non-256 bit)\n\t            if (KC != 8) {\n\t                for (var i = 1; i < KC; i++) {\n\t                    tk[i] ^= tk[i - 1];\n\t                }\n\n\t            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n\t            } else {\n\t                for (var i = 1; i < (KC / 2); i++) {\n\t                    tk[i] ^= tk[i - 1];\n\t                }\n\t                tt = tk[(KC / 2) - 1];\n\n\t                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n\t                              (S[(tt >>  8) & 0xFF] <<  8) ^\n\t                              (S[(tt >> 16) & 0xFF] << 16) ^\n\t                              (S[(tt >> 24) & 0xFF] << 24));\n\n\t                for (var i = (KC / 2) + 1; i < KC; i++) {\n\t                    tk[i] ^= tk[i - 1];\n\t                }\n\t            }\n\n\t            // copy values into round key arrays\n\t            var i = 0, r, c;\n\t            while (i < KC && t < roundKeyCount) {\n\t                r = t >> 2;\n\t                c = t % 4;\n\t                this._Ke[r][c] = tk[i];\n\t                this._Kd[rounds - r][c] = tk[i++];\n\t                t++;\n\t            }\n\t        }\n\n\t        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n\t        for (var r = 1; r < rounds; r++) {\n\t            for (var c = 0; c < 4; c++) {\n\t                tt = this._Kd[r][c];\n\t                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n\t                                  U2[(tt >> 16) & 0xFF] ^\n\t                                  U3[(tt >>  8) & 0xFF] ^\n\t                                  U4[ tt        & 0xFF]);\n\t            }\n\t        }\n\t    };\n\n\t    AES.prototype.encrypt = function(plaintext) {\n\t        if (plaintext.length != 16) {\n\t            throw new Error('invalid plaintext size (must be 16 bytes)');\n\t        }\n\n\t        var rounds = this._Ke.length - 1;\n\t        var a = [0, 0, 0, 0];\n\n\t        // convert plaintext to (ints ^ key)\n\t        var t = convertToInt32(plaintext);\n\t        for (var i = 0; i < 4; i++) {\n\t            t[i] ^= this._Ke[0][i];\n\t        }\n\n\t        // apply round transforms\n\t        for (var r = 1; r < rounds; r++) {\n\t            for (var i = 0; i < 4; i++) {\n\t                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n\t                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n\t                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n\t                        T4[ t[(i + 3) % 4]        & 0xff] ^\n\t                        this._Ke[r][i]);\n\t            }\n\t            t = a.slice();\n\t        }\n\n\t        // the last round is special\n\t        var result = createArray(16), tt;\n\t        for (var i = 0; i < 4; i++) {\n\t            tt = this._Ke[rounds][i];\n\t            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n\t            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n\t            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n\t            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n\t        }\n\n\t        return result;\n\t    };\n\n\t    AES.prototype.decrypt = function(ciphertext) {\n\t        if (ciphertext.length != 16) {\n\t            throw new Error('invalid ciphertext size (must be 16 bytes)');\n\t        }\n\n\t        var rounds = this._Kd.length - 1;\n\t        var a = [0, 0, 0, 0];\n\n\t        // convert plaintext to (ints ^ key)\n\t        var t = convertToInt32(ciphertext);\n\t        for (var i = 0; i < 4; i++) {\n\t            t[i] ^= this._Kd[0][i];\n\t        }\n\n\t        // apply round transforms\n\t        for (var r = 1; r < rounds; r++) {\n\t            for (var i = 0; i < 4; i++) {\n\t                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n\t                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n\t                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n\t                        T8[ t[(i + 1) % 4]        & 0xff] ^\n\t                        this._Kd[r][i]);\n\t            }\n\t            t = a.slice();\n\t        }\n\n\t        // the last round is special\n\t        var result = createArray(16), tt;\n\t        for (var i = 0; i < 4; i++) {\n\t            tt = this._Kd[rounds][i];\n\t            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n\t            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n\t            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n\t            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n\t        }\n\n\t        return result;\n\t    };\n\n\n\t    /**\n\t     *  Mode Of Operation - Electonic Codebook (ECB)\n\t     */\n\t    var ModeOfOperationECB = function(key) {\n\t        if (!(this instanceof ModeOfOperationECB)) {\n\t            throw Error('AES must be instanitated with `new`');\n\t        }\n\n\t        this.description = \"Electronic Code Block\";\n\t        this.name = \"ecb\";\n\n\t        this._aes = new AES(key);\n\t    };\n\n\t    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n\t        plaintext = coerceArray(plaintext);\n\n\t        if ((plaintext.length % 16) !== 0) {\n\t            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n\t        }\n\n\t        var ciphertext = createArray(plaintext.length);\n\t        var block = createArray(16);\n\n\t        for (var i = 0; i < plaintext.length; i += 16) {\n\t            copyArray(plaintext, block, 0, i, i + 16);\n\t            block = this._aes.encrypt(block);\n\t            copyArray(block, ciphertext, i);\n\t        }\n\n\t        return ciphertext;\n\t    };\n\n\t    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n\t        ciphertext = coerceArray(ciphertext);\n\n\t        if ((ciphertext.length % 16) !== 0) {\n\t            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n\t        }\n\n\t        var plaintext = createArray(ciphertext.length);\n\t        var block = createArray(16);\n\n\t        for (var i = 0; i < ciphertext.length; i += 16) {\n\t            copyArray(ciphertext, block, 0, i, i + 16);\n\t            block = this._aes.decrypt(block);\n\t            copyArray(block, plaintext, i);\n\t        }\n\n\t        return plaintext;\n\t    };\n\n\n\t    /**\n\t     *  Mode Of Operation - Cipher Block Chaining (CBC)\n\t     */\n\t    var ModeOfOperationCBC = function(key, iv) {\n\t        if (!(this instanceof ModeOfOperationCBC)) {\n\t            throw Error('AES must be instanitated with `new`');\n\t        }\n\n\t        this.description = \"Cipher Block Chaining\";\n\t        this.name = \"cbc\";\n\n\t        if (!iv) {\n\t            iv = createArray(16);\n\n\t        } else if (iv.length != 16) {\n\t            throw new Error('invalid initialation vector size (must be 16 bytes)');\n\t        }\n\n\t        this._lastCipherblock = coerceArray(iv, true);\n\n\t        this._aes = new AES(key);\n\t    };\n\n\t    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n\t        plaintext = coerceArray(plaintext);\n\n\t        if ((plaintext.length % 16) !== 0) {\n\t            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n\t        }\n\n\t        var ciphertext = createArray(plaintext.length);\n\t        var block = createArray(16);\n\n\t        for (var i = 0; i < plaintext.length; i += 16) {\n\t            copyArray(plaintext, block, 0, i, i + 16);\n\n\t            for (var j = 0; j < 16; j++) {\n\t                block[j] ^= this._lastCipherblock[j];\n\t            }\n\n\t            this._lastCipherblock = this._aes.encrypt(block);\n\t            copyArray(this._lastCipherblock, ciphertext, i);\n\t        }\n\n\t        return ciphertext;\n\t    };\n\n\t    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n\t        ciphertext = coerceArray(ciphertext);\n\n\t        if ((ciphertext.length % 16) !== 0) {\n\t            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n\t        }\n\n\t        var plaintext = createArray(ciphertext.length);\n\t        var block = createArray(16);\n\n\t        for (var i = 0; i < ciphertext.length; i += 16) {\n\t            copyArray(ciphertext, block, 0, i, i + 16);\n\t            block = this._aes.decrypt(block);\n\n\t            for (var j = 0; j < 16; j++) {\n\t                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n\t            }\n\n\t            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n\t        }\n\n\t        return plaintext;\n\t    };\n\n\n\t    /**\n\t     *  Mode Of Operation - Cipher Feedback (CFB)\n\t     */\n\t    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n\t        if (!(this instanceof ModeOfOperationCFB)) {\n\t            throw Error('AES must be instanitated with `new`');\n\t        }\n\n\t        this.description = \"Cipher Feedback\";\n\t        this.name = \"cfb\";\n\n\t        if (!iv) {\n\t            iv = createArray(16);\n\n\t        } else if (iv.length != 16) {\n\t            throw new Error('invalid initialation vector size (must be 16 size)');\n\t        }\n\n\t        if (!segmentSize) { segmentSize = 1; }\n\n\t        this.segmentSize = segmentSize;\n\n\t        this._shiftRegister = coerceArray(iv, true);\n\n\t        this._aes = new AES(key);\n\t    };\n\n\t    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n\t        if ((plaintext.length % this.segmentSize) != 0) {\n\t            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n\t        }\n\n\t        var encrypted = coerceArray(plaintext, true);\n\n\t        var xorSegment;\n\t        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n\t            xorSegment = this._aes.encrypt(this._shiftRegister);\n\t            for (var j = 0; j < this.segmentSize; j++) {\n\t                encrypted[i + j] ^= xorSegment[j];\n\t            }\n\n\t            // Shift the register\n\t            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n\t            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n\t        }\n\n\t        return encrypted;\n\t    };\n\n\t    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n\t        if ((ciphertext.length % this.segmentSize) != 0) {\n\t            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n\t        }\n\n\t        var plaintext = coerceArray(ciphertext, true);\n\n\t        var xorSegment;\n\t        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n\t            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n\t            for (var j = 0; j < this.segmentSize; j++) {\n\t                plaintext[i + j] ^= xorSegment[j];\n\t            }\n\n\t            // Shift the register\n\t            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n\t            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n\t        }\n\n\t        return plaintext;\n\t    };\n\n\t    /**\n\t     *  Mode Of Operation - Output Feedback (OFB)\n\t     */\n\t    var ModeOfOperationOFB = function(key, iv) {\n\t        if (!(this instanceof ModeOfOperationOFB)) {\n\t            throw Error('AES must be instanitated with `new`');\n\t        }\n\n\t        this.description = \"Output Feedback\";\n\t        this.name = \"ofb\";\n\n\t        if (!iv) {\n\t            iv = createArray(16);\n\n\t        } else if (iv.length != 16) {\n\t            throw new Error('invalid initialation vector size (must be 16 bytes)');\n\t        }\n\n\t        this._lastPrecipher = coerceArray(iv, true);\n\t        this._lastPrecipherIndex = 16;\n\n\t        this._aes = new AES(key);\n\t    };\n\n\t    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n\t        var encrypted = coerceArray(plaintext, true);\n\n\t        for (var i = 0; i < encrypted.length; i++) {\n\t            if (this._lastPrecipherIndex === 16) {\n\t                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n\t                this._lastPrecipherIndex = 0;\n\t            }\n\t            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n\t        }\n\n\t        return encrypted;\n\t    };\n\n\t    // Decryption is symetric\n\t    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n\t    /**\n\t     *  Counter object for CTR common mode of operation\n\t     */\n\t    var Counter = function(initialValue) {\n\t        if (!(this instanceof Counter)) {\n\t            throw Error('Counter must be instanitated with `new`');\n\t        }\n\n\t        // We allow 0, but anything false-ish uses the default 1\n\t        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n\t        if (typeof(initialValue) === 'number') {\n\t            this._counter = createArray(16);\n\t            this.setValue(initialValue);\n\n\t        } else {\n\t            this.setBytes(initialValue);\n\t        }\n\t    };\n\n\t    Counter.prototype.setValue = function(value) {\n\t        if (typeof(value) !== 'number' || parseInt(value) != value) {\n\t            throw new Error('invalid counter value (must be an integer)');\n\t        }\n\n\t        for (var index = 15; index >= 0; --index) {\n\t            this._counter[index] = value % 256;\n\t            value = value >> 8;\n\t        }\n\t    };\n\n\t    Counter.prototype.setBytes = function(bytes) {\n\t        bytes = coerceArray(bytes, true);\n\n\t        if (bytes.length != 16) {\n\t            throw new Error('invalid counter bytes size (must be 16 bytes)');\n\t        }\n\n\t        this._counter = bytes;\n\t    };\n\n\t    Counter.prototype.increment = function() {\n\t        for (var i = 15; i >= 0; i--) {\n\t            if (this._counter[i] === 255) {\n\t                this._counter[i] = 0;\n\t            } else {\n\t                this._counter[i]++;\n\t                break;\n\t            }\n\t        }\n\t    };\n\n\n\t    /**\n\t     *  Mode Of Operation - Counter (CTR)\n\t     */\n\t    var ModeOfOperationCTR = function(key, counter) {\n\t        if (!(this instanceof ModeOfOperationCTR)) {\n\t            throw Error('AES must be instanitated with `new`');\n\t        }\n\n\t        this.description = \"Counter\";\n\t        this.name = \"ctr\";\n\n\t        if (!(counter instanceof Counter)) {\n\t            counter = new Counter(counter);\n\t        }\n\n\t        this._counter = counter;\n\n\t        this._remainingCounter = null;\n\t        this._remainingCounterIndex = 16;\n\n\t        this._aes = new AES(key);\n\t    };\n\n\t    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n\t        var encrypted = coerceArray(plaintext, true);\n\n\t        for (var i = 0; i < encrypted.length; i++) {\n\t            if (this._remainingCounterIndex === 16) {\n\t                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n\t                this._remainingCounterIndex = 0;\n\t                this._counter.increment();\n\t            }\n\t            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n\t        }\n\n\t        return encrypted;\n\t    };\n\n\t    // Decryption is symetric\n\t    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n\t    ///////////////////////\n\t    // Padding\n\n\t    // See:https://tools.ietf.org/html/rfc2315\n\t    function pkcs7pad(data) {\n\t        data = coerceArray(data, true);\n\t        var padder = 16 - (data.length % 16);\n\t        var result = createArray(data.length + padder);\n\t        copyArray(data, result);\n\t        for (var i = data.length; i < result.length; i++) {\n\t            result[i] = padder;\n\t        }\n\t        return result;\n\t    }\n\n\t    function pkcs7strip(data) {\n\t        data = coerceArray(data, true);\n\t        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n\t        var padder = data[data.length - 1];\n\t        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n\t        var length = data.length - padder;\n\t        for (var i = 0; i < padder; i++) {\n\t            if (data[length + i] !== padder) {\n\t                throw new Error('PKCS#7 invalid padding byte');\n\t            }\n\t        }\n\n\t        var result = createArray(length);\n\t        copyArray(data, result, 0, 0, length);\n\t        return result;\n\t    }\n\n\t    ///////////////////////\n\t    // Exporting\n\n\n\t    // The block cipher\n\t    var aesjs = {\n\t        AES: AES,\n\t        Counter: Counter,\n\n\t        ModeOfOperation: {\n\t            ecb: ModeOfOperationECB,\n\t            cbc: ModeOfOperationCBC,\n\t            cfb: ModeOfOperationCFB,\n\t            ofb: ModeOfOperationOFB,\n\t            ctr: ModeOfOperationCTR\n\t        },\n\n\t        utils: {\n\t            hex: convertHex,\n\t            utf8: convertUtf8\n\t        },\n\n\t        padding: {\n\t            pkcs7: {\n\t                pad: pkcs7pad,\n\t                strip: pkcs7strip\n\t            }\n\t        },\n\n\t        _arrayTest: {\n\t            coerceArray: coerceArray,\n\t            createArray: createArray,\n\t            copyArray: copyArray,\n\t        }\n\t    };\n\n\n\t    // node.js\n\t    if (true) {\n\t        module.exports = aesjs;\n\n\t    // RequireJS/AMD\n\t    // http://www.requirejs.org/docs/api.html\n\t    // https://github.com/amdjs/amdjs-api/wiki/AMD\n\t    } else {}\n\n\n\t})(commonjsGlobal);\n\t});\n\n\tvar _version$A = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"json-wallets/5.5.0\";\n\n\t});\n\n\tvar _version$B = /*@__PURE__*/getDefaultExportFromCjs(_version$A);\n\n\tvar utils$1 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.uuidV4 = exports.searchPath = exports.getPassword = exports.zpad = exports.looseArrayify = void 0;\n\n\n\tfunction looseArrayify(hexString) {\n\t    if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\n\t        hexString = '0x' + hexString;\n\t    }\n\t    return (0, lib$1.arrayify)(hexString);\n\t}\n\texports.looseArrayify = looseArrayify;\n\tfunction zpad(value, length) {\n\t    value = String(value);\n\t    while (value.length < length) {\n\t        value = '0' + value;\n\t    }\n\t    return value;\n\t}\n\texports.zpad = zpad;\n\tfunction getPassword(password) {\n\t    if (typeof (password) === 'string') {\n\t        return (0, lib$8.toUtf8Bytes)(password, lib$8.UnicodeNormalizationForm.NFKC);\n\t    }\n\t    return (0, lib$1.arrayify)(password);\n\t}\n\texports.getPassword = getPassword;\n\tfunction searchPath(object, path) {\n\t    var currentChild = object;\n\t    var comps = path.toLowerCase().split('/');\n\t    for (var i = 0; i < comps.length; i++) {\n\t        // Search for a child object with a case-insensitive matching key\n\t        var matchingChild = null;\n\t        for (var key in currentChild) {\n\t            if (key.toLowerCase() === comps[i]) {\n\t                matchingChild = currentChild[key];\n\t                break;\n\t            }\n\t        }\n\t        // Didn't find one. :'(\n\t        if (matchingChild === null) {\n\t            return null;\n\t        }\n\t        // Now check this child...\n\t        currentChild = matchingChild;\n\t    }\n\t    return currentChild;\n\t}\n\texports.searchPath = searchPath;\n\t// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n\tfunction uuidV4(randomBytes) {\n\t    var bytes = (0, lib$1.arrayify)(randomBytes);\n\t    // Section: 4.1.3:\n\t    // - time_hi_and_version[12:16] = 0b0100\n\t    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\t    // Section 4.4\n\t    // - clock_seq_hi_and_reserved[6] = 0b0\n\t    // - clock_seq_hi_and_reserved[7] = 0b1\n\t    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\t    var value = (0, lib$1.hexlify)(bytes);\n\t    return [\n\t        value.substring(2, 10),\n\t        value.substring(10, 14),\n\t        value.substring(14, 18),\n\t        value.substring(18, 22),\n\t        value.substring(22, 34),\n\t    ].join(\"-\");\n\t}\n\texports.uuidV4 = uuidV4;\n\n\t});\n\n\tvar utils$2 = /*@__PURE__*/getDefaultExportFromCjs(utils$1);\n\n\tvar crowdsale = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {\n\t    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.decrypt = exports.CrowdsaleAccount = void 0;\n\tvar aes_js_1 = __importDefault(aesJs);\n\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$A.version);\n\n\tvar CrowdsaleAccount = /** @class */ (function (_super) {\n\t    __extends(CrowdsaleAccount, _super);\n\t    function CrowdsaleAccount() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    CrowdsaleAccount.prototype.isCrowdsaleAccount = function (value) {\n\t        return !!(value && value._isCrowdsaleAccount);\n\t    };\n\t    return CrowdsaleAccount;\n\t}(lib$3.Description));\n\texports.CrowdsaleAccount = CrowdsaleAccount;\n\t// See: https://github.com/ethereum/pyethsaletool\n\tfunction decrypt(json, password) {\n\t    var data = JSON.parse(json);\n\t    password = (0, utils$1.getPassword)(password);\n\t    // Ethereum Address\n\t    var ethaddr = (0, lib$6.getAddress)((0, utils$1.searchPath)(data, \"ethaddr\"));\n\t    // Encrypted Seed\n\t    var encseed = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, \"encseed\"));\n\t    if (!encseed || (encseed.length % 16) !== 0) {\n\t        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n\t    }\n\t    var key = (0, lib$1.arrayify)((0, lib$i.pbkdf2)(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n\t    var iv = encseed.slice(0, 16);\n\t    var encryptedSeed = encseed.slice(16);\n\t    // Decrypt the seed\n\t    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n\t    var seed = aes_js_1.default.padding.pkcs7.strip((0, lib$1.arrayify)(aesCbc.decrypt(encryptedSeed)));\n\t    // This wallet format is weird... Convert the binary encoded hex to a string.\n\t    var seedHex = \"\";\n\t    for (var i = 0; i < seed.length; i++) {\n\t        seedHex += String.fromCharCode(seed[i]);\n\t    }\n\t    var seedHexBytes = (0, lib$8.toUtf8Bytes)(seedHex);\n\t    var privateKey = (0, lib$4.keccak256)(seedHexBytes);\n\t    return new CrowdsaleAccount({\n\t        _isCrowdsaleAccount: true,\n\t        address: ethaddr,\n\t        privateKey: privateKey\n\t    });\n\t}\n\texports.decrypt = decrypt;\n\n\t});\n\n\tvar crowdsale$1 = /*@__PURE__*/getDefaultExportFromCjs(crowdsale);\n\n\tvar inspect = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = void 0;\n\n\tfunction isCrowdsaleWallet(json) {\n\t    var data = null;\n\t    try {\n\t        data = JSON.parse(json);\n\t    }\n\t    catch (error) {\n\t        return false;\n\t    }\n\t    return (data.encseed && data.ethaddr);\n\t}\n\texports.isCrowdsaleWallet = isCrowdsaleWallet;\n\tfunction isKeystoreWallet(json) {\n\t    var data = null;\n\t    try {\n\t        data = JSON.parse(json);\n\t    }\n\t    catch (error) {\n\t        return false;\n\t    }\n\t    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n\t        return false;\n\t    }\n\t    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n\t    return true;\n\t}\n\texports.isKeystoreWallet = isKeystoreWallet;\n\t//export function isJsonWallet(json: string): boolean {\n\t//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n\t//}\n\tfunction getJsonWalletAddress(json) {\n\t    if (isCrowdsaleWallet(json)) {\n\t        try {\n\t            return (0, lib$6.getAddress)(JSON.parse(json).ethaddr);\n\t        }\n\t        catch (error) {\n\t            return null;\n\t        }\n\t    }\n\t    if (isKeystoreWallet(json)) {\n\t        try {\n\t            return (0, lib$6.getAddress)(JSON.parse(json).address);\n\t        }\n\t        catch (error) {\n\t            return null;\n\t        }\n\t    }\n\t    return null;\n\t}\n\texports.getJsonWalletAddress = getJsonWalletAddress;\n\n\t});\n\n\tvar inspect$1 = /*@__PURE__*/getDefaultExportFromCjs(inspect);\n\n\tvar scrypt = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\n\t(function(root) {\n\t    const MAX_VALUE = 0x7fffffff;\n\n\t    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n\t    // See: https://github.com/dchest/scrypt-async-js\n\t    function SHA256(m) {\n\t        const K = new Uint32Array([\n\t           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n\t           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n\t           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n\t           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n\t           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n\t           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n\t           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n\t           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n\t           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n\t           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n\t           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n\t           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n\t           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n\t       ]);\n\n\t        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;\n\t        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;\n\t        const w = new Uint32Array(64);\n\n\t        function blocks(p) {\n\t            let off = 0, len = p.length;\n\t            while (len >= 64) {\n\t                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;\n\n\t                for (i = 0; i < 16; i++) {\n\t                    j = off + i*4;\n\t                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |\n\t                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);\n\t                }\n\n\t                for (i = 16; i < 64; i++) {\n\t                    u = w[i-2];\n\t                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);\n\n\t                    u = w[i-15];\n\t                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);\n\n\t                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;\n\t                }\n\n\t                for (i = 0; i < 64; i++) {\n\t                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^\n\t                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +\n\t                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n\n\t                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^\n\t                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n\n\t                    h = g;\n\t                    g = f;\n\t                    f = e;\n\t                    e = (d + t1) | 0;\n\t                    d = c;\n\t                    c = b;\n\t                    b = a;\n\t                    a = (t1 + t2) | 0;\n\t                }\n\n\t                h0 = (h0 + a) | 0;\n\t                h1 = (h1 + b) | 0;\n\t                h2 = (h2 + c) | 0;\n\t                h3 = (h3 + d) | 0;\n\t                h4 = (h4 + e) | 0;\n\t                h5 = (h5 + f) | 0;\n\t                h6 = (h6 + g) | 0;\n\t                h7 = (h7 + h) | 0;\n\n\t                off += 64;\n\t                len -= 64;\n\t            }\n\t        }\n\n\t        blocks(m);\n\n\t        let i, bytesLeft = m.length % 64,\n\t        bitLenHi = (m.length / 0x20000000) | 0,\n\t        bitLenLo = m.length << 3,\n\t        numZeros = (bytesLeft < 56) ? 56 : 120,\n\t        p = m.slice(m.length - bytesLeft, m.length);\n\n\t        p.push(0x80);\n\t        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }\n\t        p.push((bitLenHi >>> 24) & 0xff);\n\t        p.push((bitLenHi >>> 16) & 0xff);\n\t        p.push((bitLenHi >>> 8)  & 0xff);\n\t        p.push((bitLenHi >>> 0)  & 0xff);\n\t        p.push((bitLenLo >>> 24) & 0xff);\n\t        p.push((bitLenLo >>> 16) & 0xff);\n\t        p.push((bitLenLo >>> 8)  & 0xff);\n\t        p.push((bitLenLo >>> 0)  & 0xff);\n\n\t        blocks(p);\n\n\t        return [\n\t            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,\n\t            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,\n\t            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,\n\t            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,\n\t            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,\n\t            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,\n\t            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,\n\t            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff\n\t        ];\n\t    }\n\n\t    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n\t        // compress password if it's longer than hash block length\n\t        password = (password.length <= 64) ? password : SHA256(password);\n\n\t        const innerLen = 64 + salt.length + 4;\n\t        const inner = new Array(innerLen);\n\t        const outerKey = new Array(64);\n\n\t        let i;\n\t        let dk = [];\n\n\t        // inner = (password ^ ipad) || salt || counter\n\t        for (i = 0; i < 64; i++) { inner[i] = 0x36; }\n\t        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }\n\t        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }\n\t        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }\n\n\t        // outerKey = password ^ opad\n\t        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n\t        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];\n\n\t        // increments counter inside inner\n\t        function incrementCounter() {\n\t            for (let i = innerLen - 1; i >= innerLen - 4; i--) {\n\t                inner[i]++;\n\t                if (inner[i] <= 0xff) return;\n\t                inner[i] = 0;\n\t            }\n\t        }\n\n\t        // output blocks = SHA256(outerKey || SHA256(inner)) ...\n\t        while (dkLen >= 32) {\n\t            incrementCounter();\n\t            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n\t            dkLen -= 32;\n\t        }\n\t        if (dkLen > 0) {\n\t            incrementCounter();\n\t            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n\t        }\n\n\t        return dk;\n\t    }\n\n\t    // The following is an adaptation of scryptsy\n\t    // See: https://www.npmjs.com/package/scryptsy\n\t    function blockmix_salsa8(BY, Yi, r, x, _X) {\n\t        let i;\n\n\t        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n\t        for (i = 0; i < 2 * r; i++) {\n\t            blockxor(BY, i * 16, _X, 16);\n\t            salsa20_8(_X, x);\n\t            arraycopy(_X, 0, BY, Yi + (i * 16), 16);\n\t        }\n\n\t        for (i = 0; i < r; i++) {\n\t            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);\n\t        }\n\n\t        for (i = 0; i < r; i++) {\n\t            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n\t        }\n\t    }\n\n\t    function R(a, b) {\n\t        return (a << b) | (a >>> (32 - b));\n\t    }\n\n\t    function salsa20_8(B, x) {\n\t        arraycopy(B, 0, x, 0, 16);\n\n\t        for (let i = 8; i > 0; i -= 2) {\n\t            x[ 4] ^= R(x[ 0] + x[12], 7);\n\t            x[ 8] ^= R(x[ 4] + x[ 0], 9);\n\t            x[12] ^= R(x[ 8] + x[ 4], 13);\n\t            x[ 0] ^= R(x[12] + x[ 8], 18);\n\t            x[ 9] ^= R(x[ 5] + x[ 1], 7);\n\t            x[13] ^= R(x[ 9] + x[ 5], 9);\n\t            x[ 1] ^= R(x[13] + x[ 9], 13);\n\t            x[ 5] ^= R(x[ 1] + x[13], 18);\n\t            x[14] ^= R(x[10] + x[ 6], 7);\n\t            x[ 2] ^= R(x[14] + x[10], 9);\n\t            x[ 6] ^= R(x[ 2] + x[14], 13);\n\t            x[10] ^= R(x[ 6] + x[ 2], 18);\n\t            x[ 3] ^= R(x[15] + x[11], 7);\n\t            x[ 7] ^= R(x[ 3] + x[15], 9);\n\t            x[11] ^= R(x[ 7] + x[ 3], 13);\n\t            x[15] ^= R(x[11] + x[ 7], 18);\n\t            x[ 1] ^= R(x[ 0] + x[ 3], 7);\n\t            x[ 2] ^= R(x[ 1] + x[ 0], 9);\n\t            x[ 3] ^= R(x[ 2] + x[ 1], 13);\n\t            x[ 0] ^= R(x[ 3] + x[ 2], 18);\n\t            x[ 6] ^= R(x[ 5] + x[ 4], 7);\n\t            x[ 7] ^= R(x[ 6] + x[ 5], 9);\n\t            x[ 4] ^= R(x[ 7] + x[ 6], 13);\n\t            x[ 5] ^= R(x[ 4] + x[ 7], 18);\n\t            x[11] ^= R(x[10] + x[ 9], 7);\n\t            x[ 8] ^= R(x[11] + x[10], 9);\n\t            x[ 9] ^= R(x[ 8] + x[11], 13);\n\t            x[10] ^= R(x[ 9] + x[ 8], 18);\n\t            x[12] ^= R(x[15] + x[14], 7);\n\t            x[13] ^= R(x[12] + x[15], 9);\n\t            x[14] ^= R(x[13] + x[12], 13);\n\t            x[15] ^= R(x[14] + x[13], 18);\n\t        }\n\n\t        for (let i = 0; i < 16; ++i) {\n\t            B[i] += x[i];\n\t        }\n\t    }\n\n\t    // naive approach... going back to loop unrolling may yield additional performance\n\t    function blockxor(S, Si, D, len) {\n\t        for (let i = 0; i < len; i++) {\n\t            D[i] ^= S[Si + i];\n\t        }\n\t    }\n\n\t    function arraycopy(src, srcPos, dest, destPos, length) {\n\t        while (length--) {\n\t            dest[destPos++] = src[srcPos++];\n\t        }\n\t    }\n\n\t    function checkBufferish(o) {\n\t        if (!o || typeof(o.length) !== 'number') { return false; }\n\n\t        for (let i = 0; i < o.length; i++) {\n\t            const v = o[i];\n\t            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    }\n\n\t    function ensureInteger(value, name) {\n\t        if (typeof(value) !== \"number\" || (value % 1)) { throw new Error('invalid ' + name); }\n\t        return value;\n\t    }\n\n\t    // N = Cpu cost, r = Memory cost, p = parallelization cost\n\t    // callback(error, progress, key)\n\t    function _scrypt(password, salt, N, r, p, dkLen, callback) {\n\n\t        N = ensureInteger(N, 'N');\n\t        r = ensureInteger(r, 'r');\n\t        p = ensureInteger(p, 'p');\n\n\t        dkLen = ensureInteger(dkLen, 'dkLen');\n\n\t        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }\n\n\t        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }\n\t        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }\n\n\t        if (!checkBufferish(password)) {\n\t            throw new Error('password must be an array or buffer');\n\t        }\n\t        password = Array.prototype.slice.call(password);\n\n\t        if (!checkBufferish(salt)) {\n\t            throw new Error('salt must be an array or buffer');\n\t        }\n\t        salt = Array.prototype.slice.call(salt);\n\n\t        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n\t        const B = new Uint32Array(p * 32 * r);\n\t        for (let i = 0; i < B.length; i++) {\n\t            const j = i * 4;\n\t            B[i] = ((b[j + 3] & 0xff) << 24) |\n\t                   ((b[j + 2] & 0xff) << 16) |\n\t                   ((b[j + 1] & 0xff) << 8) |\n\t                   ((b[j + 0] & 0xff) << 0);\n\t        }\n\n\t        const XY = new Uint32Array(64 * r);\n\t        const V = new Uint32Array(32 * r * N);\n\n\t        const Yi = 32 * r;\n\n\t        // scratch space\n\t        const x = new Uint32Array(16);       // salsa20_8\n\t        const _X = new Uint32Array(16);      // blockmix_salsa8\n\n\t        const totalOps = p * N * 2;\n\t        let currentOp = 0;\n\t        let lastPercent10 = null;\n\n\t        // Set this to true to abandon the scrypt on the next step\n\t        let stop = false;\n\n\t        // State information\n\t        let state = 0;\n\t        let i0 = 0, i1;\n\t        let Bi;\n\n\t        // How many blockmix_salsa8 can we do per step?\n\t        const limit = callback ? parseInt(1000 / r): 0xffffffff;\n\n\t        // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n\t        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;\n\n\t        // This is really all I changed; making scryptsy a state machine so we occasionally\n\t        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n\t        const incrementalSMix = function() {\n\t            if (stop) {\n\t                return callback(new Error('cancelled'), currentOp / totalOps);\n\t            }\n\n\t            let steps;\n\n\t            switch (state) {\n\t                case 0:\n\t                    // for (var i = 0; i < p; i++)...\n\t                    Bi = i0 * 32 * r;\n\n\t                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1\n\n\t                    state = 1;                                         // Move to ROMix 2\n\t                    i1 = 0;\n\n\t                    // Fall through\n\n\t                case 1:\n\n\t                    // Run up to 1000 steps of the first inner smix loop\n\t                    steps = N - i1;\n\t                    if (steps > limit) { steps = limit; }\n\t                    for (let i = 0; i < steps; i++) {                  // ROMix - 2\n\t                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3\n\t                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4\n\t                    }\n\n\t                    // for (var i = 0; i < N; i++)\n\t                    i1 += steps;\n\t                    currentOp += steps;\n\n\t                    if (callback) {\n\t                        // Call the callback with the progress (optionally stopping us)\n\t                        const percent10 = parseInt(1000 * currentOp / totalOps);\n\t                        if (percent10 !== lastPercent10) {\n\t                            stop = callback(null, currentOp / totalOps);\n\t                            if (stop) { break; }\n\t                            lastPercent10 = percent10;\n\t                        }\n\t                    }\n\n\t                    if (i1 < N) { break; }\n\n\t                    i1 = 0;                                          // Move to ROMix 6\n\t                    state = 2;\n\n\t                    // Fall through\n\n\t                case 2:\n\n\t                    // Run up to 1000 steps of the second inner smix loop\n\t                    steps = N - i1;\n\t                    if (steps > limit) { steps = limit; }\n\t                    for (let i = 0; i < steps; i++) {                // ROMix - 6\n\t                        const offset = (2 * r - 1) * 16;             // ROMix - 7\n\t                        const j = XY[offset] & (N - 1);\n\t                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)\n\t                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)\n\t                    }\n\n\t                    // for (var i = 0; i < N; i++)...\n\t                    i1 += steps;\n\t                    currentOp += steps;\n\n\t                    // Call the callback with the progress (optionally stopping us)\n\t                    if (callback) {\n\t                        const percent10 = parseInt(1000 * currentOp / totalOps);\n\t                        if (percent10 !== lastPercent10) {\n\t                            stop = callback(null, currentOp / totalOps);\n\t                            if (stop) { break; }\n\t                            lastPercent10 = percent10;\n\t                        }\n\t                    }\n\n\t                    if (i1 < N) { break; }\n\n\t                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10\n\n\t                    // for (var i = 0; i < p; i++)...\n\t                    i0++;\n\t                    if (i0 < p) {\n\t                        state = 0;\n\t                        break;\n\t                    }\n\n\t                    b = [];\n\t                    for (let i = 0; i < B.length; i++) {\n\t                        b.push((B[i] >>  0) & 0xff);\n\t                        b.push((B[i] >>  8) & 0xff);\n\t                        b.push((B[i] >> 16) & 0xff);\n\t                        b.push((B[i] >> 24) & 0xff);\n\t                    }\n\n\t                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);\n\n\t                    // Send the result to the callback\n\t                    if (callback) { callback(null, 1.0, derivedKey); }\n\n\t                    // Done; don't break (which would reschedule)\n\t                    return derivedKey;\n\t            }\n\n\t            // Schedule the next steps\n\t            if (callback) { nextTick(incrementalSMix); }\n\t        };\n\n\t        // Run the smix state machine until completion\n\t        if (!callback) {\n\t            while (true) {\n\t                const derivedKey = incrementalSMix();\n\t                if (derivedKey != undefined) { return derivedKey; }\n\t            }\n\t        }\n\n\t        // Bootstrap the async incremental smix\n\t        incrementalSMix();\n\t    }\n\n\t    const lib = {\n\t        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {\n\t            return new Promise(function(resolve, reject) {\n\t                let lastProgress = 0;\n\t                if (progressCallback) { progressCallback(0); }\n\t                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {\n\t                    if (error) {\n\t                        reject(error);\n\t                    } else if (key) {\n\t                        if (progressCallback && lastProgress !== 1) {\n\t                            progressCallback(1);\n\t                        }\n\t                        resolve(new Uint8Array(key));\n\t                    } else if (progressCallback && progress !== lastProgress) {\n\t                        lastProgress = progress;\n\t                        return progressCallback(progress);\n\t                    }\n\t                });\n\t            });\n\t        },\n\t        syncScrypt: function(password, salt, N, r, p, dkLen) {\n\t            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n\t        }\n\t    };\n\n\t    // node.js\n\t    if (true) {\n\t       module.exports = lib;\n\n\t    // RequireJS/AMD\n\t    // http://www.requirejs.org/docs/api.html\n\t    // https://github.com/amdjs/amdjs-api/wiki/AMD\n\t    } else {}\n\n\t})(commonjsGlobal);\n\t});\n\n\tvar keystore = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tvar __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {\n\t    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.encrypt = exports.decrypt = exports.decryptSync = exports.KeystoreAccount = void 0;\n\tvar aes_js_1 = __importDefault(aesJs);\n\tvar scrypt_js_1 = __importDefault(scrypt);\n\n\n\n\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$A.version);\n\t// Exported Types\n\tfunction hasMnemonic(value) {\n\t    return (value != null && value.mnemonic && value.mnemonic.phrase);\n\t}\n\tvar KeystoreAccount = /** @class */ (function (_super) {\n\t    __extends(KeystoreAccount, _super);\n\t    function KeystoreAccount() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    KeystoreAccount.prototype.isKeystoreAccount = function (value) {\n\t        return !!(value && value._isKeystoreAccount);\n\t    };\n\t    return KeystoreAccount;\n\t}(lib$3.Description));\n\texports.KeystoreAccount = KeystoreAccount;\n\tfunction _decrypt(data, key, ciphertext) {\n\t    var cipher = (0, utils$1.searchPath)(data, \"crypto/cipher\");\n\t    if (cipher === \"aes-128-ctr\") {\n\t        var iv = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, \"crypto/cipherparams/iv\"));\n\t        var counter = new aes_js_1.default.Counter(iv);\n\t        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);\n\t        return (0, lib$1.arrayify)(aesCtr.decrypt(ciphertext));\n\t    }\n\t    return null;\n\t}\n\tfunction _getAccount(data, key) {\n\t    var ciphertext = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, \"crypto/ciphertext\"));\n\t    var computedMAC = (0, lib$1.hexlify)((0, lib$4.keccak256)((0, lib$1.concat)([key.slice(16, 32), ciphertext]))).substring(2);\n\t    if (computedMAC !== (0, utils$1.searchPath)(data, \"crypto/mac\").toLowerCase()) {\n\t        throw new Error(\"invalid password\");\n\t    }\n\t    var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n\t    if (!privateKey) {\n\t        logger.throwError(\"unsupported cipher\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t            operation: \"decrypt\"\n\t        });\n\t    }\n\t    var mnemonicKey = key.slice(32, 64);\n\t    var address = (0, lib$e.computeAddress)(privateKey);\n\t    if (data.address) {\n\t        var check = data.address.toLowerCase();\n\t        if (check.substring(0, 2) !== \"0x\") {\n\t            check = \"0x\" + check;\n\t        }\n\t        if ((0, lib$6.getAddress)(check) !== address) {\n\t            throw new Error(\"address mismatch\");\n\t        }\n\t    }\n\t    var account = {\n\t        _isKeystoreAccount: true,\n\t        address: address,\n\t        privateKey: (0, lib$1.hexlify)(privateKey)\n\t    };\n\t    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n\t    if ((0, utils$1.searchPath)(data, \"x-ethers/version\") === \"0.1\") {\n\t        var mnemonicCiphertext = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, \"x-ethers/mnemonicCiphertext\"));\n\t        var mnemonicIv = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, \"x-ethers/mnemonicCounter\"));\n\t        var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);\n\t        var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n\t        var path = (0, utils$1.searchPath)(data, \"x-ethers/path\") || lib$k.defaultPath;\n\t        var locale = (0, utils$1.searchPath)(data, \"x-ethers/locale\") || \"en\";\n\t        var entropy = (0, lib$1.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n\t        try {\n\t            var mnemonic = (0, lib$k.entropyToMnemonic)(entropy, locale);\n\t            var node = lib$k.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n\t            if (node.privateKey != account.privateKey) {\n\t                throw new Error(\"mnemonic mismatch\");\n\t            }\n\t            account.mnemonic = node.mnemonic;\n\t        }\n\t        catch (error) {\n\t            // If we don't have the locale wordlist installed to\n\t            // read this mnemonic, just bail and don't set the\n\t            // mnemonic\n\t            if (error.code !== lib.Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n\t                throw error;\n\t            }\n\t        }\n\t    }\n\t    return new KeystoreAccount(account);\n\t}\n\tfunction pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n\t    return (0, lib$1.arrayify)((0, lib$i.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));\n\t}\n\tfunction pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n\t    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n\t}\n\tfunction _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n\t    var passwordBytes = (0, utils$1.getPassword)(password);\n\t    var kdf = (0, utils$1.searchPath)(data, \"crypto/kdf\");\n\t    if (kdf && typeof (kdf) === \"string\") {\n\t        var throwError = function (name, value) {\n\t            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n\t        };\n\t        if (kdf.toLowerCase() === \"scrypt\") {\n\t            var salt = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, \"crypto/kdfparams/salt\"));\n\t            var N = parseInt((0, utils$1.searchPath)(data, \"crypto/kdfparams/n\"));\n\t            var r = parseInt((0, utils$1.searchPath)(data, \"crypto/kdfparams/r\"));\n\t            var p = parseInt((0, utils$1.searchPath)(data, \"crypto/kdfparams/p\"));\n\t            // Check for all required parameters\n\t            if (!N || !r || !p) {\n\t                throwError(\"kdf\", kdf);\n\t            }\n\t            // Make sure N is a power of 2\n\t            if ((N & (N - 1)) !== 0) {\n\t                throwError(\"N\", N);\n\t            }\n\t            var dkLen = parseInt((0, utils$1.searchPath)(data, \"crypto/kdfparams/dklen\"));\n\t            if (dkLen !== 32) {\n\t                throwError(\"dklen\", dkLen);\n\t            }\n\t            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n\t        }\n\t        else if (kdf.toLowerCase() === \"pbkdf2\") {\n\t            var salt = (0, utils$1.looseArrayify)((0, utils$1.searchPath)(data, \"crypto/kdfparams/salt\"));\n\t            var prfFunc = null;\n\t            var prf = (0, utils$1.searchPath)(data, \"crypto/kdfparams/prf\");\n\t            if (prf === \"hmac-sha256\") {\n\t                prfFunc = \"sha256\";\n\t            }\n\t            else if (prf === \"hmac-sha512\") {\n\t                prfFunc = \"sha512\";\n\t            }\n\t            else {\n\t                throwError(\"prf\", prf);\n\t            }\n\t            var count = parseInt((0, utils$1.searchPath)(data, \"crypto/kdfparams/c\"));\n\t            var dkLen = parseInt((0, utils$1.searchPath)(data, \"crypto/kdfparams/dklen\"));\n\t            if (dkLen !== 32) {\n\t                throwError(\"dklen\", dkLen);\n\t            }\n\t            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n\t        }\n\t    }\n\t    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n\t}\n\tfunction decryptSync(json, password) {\n\t    var data = JSON.parse(json);\n\t    var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_js_1.default.syncScrypt);\n\t    return _getAccount(data, key);\n\t}\n\texports.decryptSync = decryptSync;\n\tfunction decrypt(json, password, progressCallback) {\n\t    return __awaiter(this, void 0, void 0, function () {\n\t        var data, key;\n\t        return __generator(this, function (_a) {\n\t            switch (_a.label) {\n\t                case 0:\n\t                    data = JSON.parse(json);\n\t                    return [4 /*yield*/, _computeKdfKey(data, password, pbkdf2, scrypt_js_1.default.scrypt, progressCallback)];\n\t                case 1:\n\t                    key = _a.sent();\n\t                    return [2 /*return*/, _getAccount(data, key)];\n\t            }\n\t        });\n\t    });\n\t}\n\texports.decrypt = decrypt;\n\tfunction encrypt(account, password, options, progressCallback) {\n\t    try {\n\t        // Check the address matches the private key\n\t        if ((0, lib$6.getAddress)(account.address) !== (0, lib$e.computeAddress)(account.privateKey)) {\n\t            throw new Error(\"address/privateKey mismatch\");\n\t        }\n\t        // Check the mnemonic (if any) matches the private key\n\t        if (hasMnemonic(account)) {\n\t            var mnemonic = account.mnemonic;\n\t            var node = lib$k.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || lib$k.defaultPath);\n\t            if (node.privateKey != account.privateKey) {\n\t                throw new Error(\"mnemonic mismatch\");\n\t            }\n\t        }\n\t    }\n\t    catch (e) {\n\t        return Promise.reject(e);\n\t    }\n\t    // The options are optional, so adjust the call as needed\n\t    if (typeof (options) === \"function\" && !progressCallback) {\n\t        progressCallback = options;\n\t        options = {};\n\t    }\n\t    if (!options) {\n\t        options = {};\n\t    }\n\t    var privateKey = (0, lib$1.arrayify)(account.privateKey);\n\t    var passwordBytes = (0, utils$1.getPassword)(password);\n\t    var entropy = null;\n\t    var path = null;\n\t    var locale = null;\n\t    if (hasMnemonic(account)) {\n\t        var srcMnemonic = account.mnemonic;\n\t        entropy = (0, lib$1.arrayify)((0, lib$k.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n\t        path = srcMnemonic.path || lib$k.defaultPath;\n\t        locale = srcMnemonic.locale || \"en\";\n\t    }\n\t    var client = options.client;\n\t    if (!client) {\n\t        client = \"ethers.js\";\n\t    }\n\t    // Check/generate the salt\n\t    var salt = null;\n\t    if (options.salt) {\n\t        salt = (0, lib$1.arrayify)(options.salt);\n\t    }\n\t    else {\n\t        salt = (0, lib$l.randomBytes)(32);\n\t        ;\n\t    }\n\t    // Override initialization vector\n\t    var iv = null;\n\t    if (options.iv) {\n\t        iv = (0, lib$1.arrayify)(options.iv);\n\t        if (iv.length !== 16) {\n\t            throw new Error(\"invalid iv\");\n\t        }\n\t    }\n\t    else {\n\t        iv = (0, lib$l.randomBytes)(16);\n\t    }\n\t    // Override the uuid\n\t    var uuidRandom = null;\n\t    if (options.uuid) {\n\t        uuidRandom = (0, lib$1.arrayify)(options.uuid);\n\t        if (uuidRandom.length !== 16) {\n\t            throw new Error(\"invalid uuid\");\n\t        }\n\t    }\n\t    else {\n\t        uuidRandom = (0, lib$l.randomBytes)(16);\n\t    }\n\t    // Override the scrypt password-based key derivation function parameters\n\t    var N = (1 << 17), r = 8, p = 1;\n\t    if (options.scrypt) {\n\t        if (options.scrypt.N) {\n\t            N = options.scrypt.N;\n\t        }\n\t        if (options.scrypt.r) {\n\t            r = options.scrypt.r;\n\t        }\n\t        if (options.scrypt.p) {\n\t            p = options.scrypt.p;\n\t        }\n\t    }\n\t    // We take 64 bytes:\n\t    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n\t    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n\t    return scrypt_js_1.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {\n\t        key = (0, lib$1.arrayify)(key);\n\t        // This will be used to encrypt the wallet (as per Web3 secret storage)\n\t        var derivedKey = key.slice(0, 16);\n\t        var macPrefix = key.slice(16, 32);\n\t        // This will be used to encrypt the mnemonic phrase (if any)\n\t        var mnemonicKey = key.slice(32, 64);\n\t        // Encrypt the private key\n\t        var counter = new aes_js_1.default.Counter(iv);\n\t        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);\n\t        var ciphertext = (0, lib$1.arrayify)(aesCtr.encrypt(privateKey));\n\t        // Compute the message authentication code, used to check the password\n\t        var mac = (0, lib$4.keccak256)((0, lib$1.concat)([macPrefix, ciphertext]));\n\t        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n\t        var data = {\n\t            address: account.address.substring(2).toLowerCase(),\n\t            id: (0, utils$1.uuidV4)(uuidRandom),\n\t            version: 3,\n\t            Crypto: {\n\t                cipher: \"aes-128-ctr\",\n\t                cipherparams: {\n\t                    iv: (0, lib$1.hexlify)(iv).substring(2),\n\t                },\n\t                ciphertext: (0, lib$1.hexlify)(ciphertext).substring(2),\n\t                kdf: \"scrypt\",\n\t                kdfparams: {\n\t                    salt: (0, lib$1.hexlify)(salt).substring(2),\n\t                    n: N,\n\t                    dklen: 32,\n\t                    p: p,\n\t                    r: r\n\t                },\n\t                mac: mac.substring(2)\n\t            }\n\t        };\n\t        // If we have a mnemonic, encrypt it into the JSON wallet\n\t        if (entropy) {\n\t            var mnemonicIv = (0, lib$l.randomBytes)(16);\n\t            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);\n\t            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n\t            var mnemonicCiphertext = (0, lib$1.arrayify)(mnemonicAesCtr.encrypt(entropy));\n\t            var now = new Date();\n\t            var timestamp = (now.getUTCFullYear() + \"-\" +\n\t                (0, utils$1.zpad)(now.getUTCMonth() + 1, 2) + \"-\" +\n\t                (0, utils$1.zpad)(now.getUTCDate(), 2) + \"T\" +\n\t                (0, utils$1.zpad)(now.getUTCHours(), 2) + \"-\" +\n\t                (0, utils$1.zpad)(now.getUTCMinutes(), 2) + \"-\" +\n\t                (0, utils$1.zpad)(now.getUTCSeconds(), 2) + \".0Z\");\n\t            data[\"x-ethers\"] = {\n\t                client: client,\n\t                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\n\t                mnemonicCounter: (0, lib$1.hexlify)(mnemonicIv).substring(2),\n\t                mnemonicCiphertext: (0, lib$1.hexlify)(mnemonicCiphertext).substring(2),\n\t                path: path,\n\t                locale: locale,\n\t                version: \"0.1\"\n\t            };\n\t        }\n\t        return JSON.stringify(data);\n\t    });\n\t}\n\texports.encrypt = encrypt;\n\n\t});\n\n\tvar keystore$1 = /*@__PURE__*/getDefaultExportFromCjs(keystore);\n\n\tvar lib$m = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.decryptJsonWalletSync = exports.decryptJsonWallet = exports.getJsonWalletAddress = exports.isKeystoreWallet = exports.isCrowdsaleWallet = exports.encryptKeystore = exports.decryptKeystoreSync = exports.decryptKeystore = exports.decryptCrowdsale = void 0;\n\n\tObject.defineProperty(exports, \"decryptCrowdsale\", { enumerable: true, get: function () { return crowdsale.decrypt; } });\n\n\tObject.defineProperty(exports, \"getJsonWalletAddress\", { enumerable: true, get: function () { return inspect.getJsonWalletAddress; } });\n\tObject.defineProperty(exports, \"isCrowdsaleWallet\", { enumerable: true, get: function () { return inspect.isCrowdsaleWallet; } });\n\tObject.defineProperty(exports, \"isKeystoreWallet\", { enumerable: true, get: function () { return inspect.isKeystoreWallet; } });\n\n\tObject.defineProperty(exports, \"decryptKeystore\", { enumerable: true, get: function () { return keystore.decrypt; } });\n\tObject.defineProperty(exports, \"decryptKeystoreSync\", { enumerable: true, get: function () { return keystore.decryptSync; } });\n\tObject.defineProperty(exports, \"encryptKeystore\", { enumerable: true, get: function () { return keystore.encrypt; } });\n\tfunction decryptJsonWallet(json, password, progressCallback) {\n\t    if ((0, inspect.isCrowdsaleWallet)(json)) {\n\t        if (progressCallback) {\n\t            progressCallback(0);\n\t        }\n\t        var account = (0, crowdsale.decrypt)(json, password);\n\t        if (progressCallback) {\n\t            progressCallback(1);\n\t        }\n\t        return Promise.resolve(account);\n\t    }\n\t    if ((0, inspect.isKeystoreWallet)(json)) {\n\t        return (0, keystore.decrypt)(json, password, progressCallback);\n\t    }\n\t    return Promise.reject(new Error(\"invalid JSON wallet\"));\n\t}\n\texports.decryptJsonWallet = decryptJsonWallet;\n\tfunction decryptJsonWalletSync(json, password) {\n\t    if ((0, inspect.isCrowdsaleWallet)(json)) {\n\t        return (0, crowdsale.decrypt)(json, password);\n\t    }\n\t    if ((0, inspect.isKeystoreWallet)(json)) {\n\t        return (0, keystore.decryptSync)(json, password);\n\t    }\n\t    throw new Error(\"invalid JSON wallet\");\n\t}\n\texports.decryptJsonWalletSync = decryptJsonWalletSync;\n\n\t});\n\n\tvar index$m = /*@__PURE__*/getDefaultExportFromCjs(lib$m);\n\n\tvar _version$C = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"wallet/5.5.0\";\n\n\t});\n\n\tvar _version$D = /*@__PURE__*/getDefaultExportFromCjs(_version$C);\n\n\tvar lib$n = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.verifyTypedData = exports.verifyMessage = exports.Wallet = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$C.version);\n\tfunction isAccount(value) {\n\t    return (value != null && (0, lib$1.isHexString)(value.privateKey, 32) && value.address != null);\n\t}\n\tfunction hasMnemonic(value) {\n\t    var mnemonic = value.mnemonic;\n\t    return (mnemonic && mnemonic.phrase);\n\t}\n\tvar Wallet = /** @class */ (function (_super) {\n\t    __extends(Wallet, _super);\n\t    function Wallet(privateKey, provider) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, Wallet);\n\t        _this = _super.call(this) || this;\n\t        if (isAccount(privateKey)) {\n\t            var signingKey_1 = new lib$d.SigningKey(privateKey.privateKey);\n\t            (0, lib$3.defineReadOnly)(_this, \"_signingKey\", function () { return signingKey_1; });\n\t            (0, lib$3.defineReadOnly)(_this, \"address\", (0, lib$e.computeAddress)(_this.publicKey));\n\t            if (_this.address !== (0, lib$6.getAddress)(privateKey.address)) {\n\t                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n\t            }\n\t            if (hasMnemonic(privateKey)) {\n\t                var srcMnemonic_1 = privateKey.mnemonic;\n\t                (0, lib$3.defineReadOnly)(_this, \"_mnemonic\", function () { return ({\n\t                    phrase: srcMnemonic_1.phrase,\n\t                    path: srcMnemonic_1.path || lib$k.defaultPath,\n\t                    locale: srcMnemonic_1.locale || \"en\"\n\t                }); });\n\t                var mnemonic = _this.mnemonic;\n\t                var node = lib$k.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n\t                if ((0, lib$e.computeAddress)(node.privateKey) !== _this.address) {\n\t                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n\t                }\n\t            }\n\t            else {\n\t                (0, lib$3.defineReadOnly)(_this, \"_mnemonic\", function () { return null; });\n\t            }\n\t        }\n\t        else {\n\t            if (lib$d.SigningKey.isSigningKey(privateKey)) {\n\t                /* istanbul ignore if */\n\t                if (privateKey.curve !== \"secp256k1\") {\n\t                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n\t                }\n\t                (0, lib$3.defineReadOnly)(_this, \"_signingKey\", function () { return privateKey; });\n\t            }\n\t            else {\n\t                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n\t                if (typeof (privateKey) === \"string\") {\n\t                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n\t                        privateKey = \"0x\" + privateKey;\n\t                    }\n\t                }\n\t                var signingKey_2 = new lib$d.SigningKey(privateKey);\n\t                (0, lib$3.defineReadOnly)(_this, \"_signingKey\", function () { return signingKey_2; });\n\t            }\n\t            (0, lib$3.defineReadOnly)(_this, \"_mnemonic\", function () { return null; });\n\t            (0, lib$3.defineReadOnly)(_this, \"address\", (0, lib$e.computeAddress)(_this.publicKey));\n\t        }\n\t        /* istanbul ignore if */\n\t        if (provider && !lib$b.Provider.isProvider(provider)) {\n\t            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n\t        }\n\t        (0, lib$3.defineReadOnly)(_this, \"provider\", provider || null);\n\t        return _this;\n\t    }\n\t    Object.defineProperty(Wallet.prototype, \"mnemonic\", {\n\t        get: function () { return this._mnemonic(); },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Wallet.prototype, \"privateKey\", {\n\t        get: function () { return this._signingKey().privateKey; },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Wallet.prototype, \"publicKey\", {\n\t        get: function () { return this._signingKey().publicKey; },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Wallet.prototype.getAddress = function () {\n\t        return Promise.resolve(this.address);\n\t    };\n\t    Wallet.prototype.connect = function (provider) {\n\t        return new Wallet(this, provider);\n\t    };\n\t    Wallet.prototype.signTransaction = function (transaction) {\n\t        var _this = this;\n\t        return (0, lib$3.resolveProperties)(transaction).then(function (tx) {\n\t            if (tx.from != null) {\n\t                if ((0, lib$6.getAddress)(tx.from) !== _this.address) {\n\t                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n\t                }\n\t                delete tx.from;\n\t            }\n\t            var signature = _this._signingKey().signDigest((0, lib$4.keccak256)((0, lib$e.serialize)(tx)));\n\t            return (0, lib$e.serialize)(tx, signature);\n\t        });\n\t    };\n\t    Wallet.prototype.signMessage = function (message) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                return [2 /*return*/, (0, lib$1.joinSignature)(this._signingKey().signDigest((0, lib$9.hashMessage)(message)))];\n\t            });\n\t        });\n\t    };\n\t    Wallet.prototype._signTypedData = function (domain, types, value) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var populated;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, lib$9._TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n\t                            if (_this.provider == null) {\n\t                                logger.throwError(\"cannot resolve ENS names without a provider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                    operation: \"resolveName\",\n\t                                    value: name\n\t                                });\n\t                            }\n\t                            return _this.provider.resolveName(name);\n\t                        })];\n\t                    case 1:\n\t                        populated = _a.sent();\n\t                        return [2 /*return*/, (0, lib$1.joinSignature)(this._signingKey().signDigest(lib$9._TypedDataEncoder.hash(populated.domain, types, populated.value)))];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Wallet.prototype.encrypt = function (password, options, progressCallback) {\n\t        if (typeof (options) === \"function\" && !progressCallback) {\n\t            progressCallback = options;\n\t            options = {};\n\t        }\n\t        if (progressCallback && typeof (progressCallback) !== \"function\") {\n\t            throw new Error(\"invalid callback\");\n\t        }\n\t        if (!options) {\n\t            options = {};\n\t        }\n\t        return (0, lib$m.encryptKeystore)(this, password, options, progressCallback);\n\t    };\n\t    /**\n\t     *  Static methods to create Wallet instances.\n\t     */\n\t    Wallet.createRandom = function (options) {\n\t        var entropy = (0, lib$l.randomBytes)(16);\n\t        if (!options) {\n\t            options = {};\n\t        }\n\t        if (options.extraEntropy) {\n\t            entropy = (0, lib$1.arrayify)((0, lib$1.hexDataSlice)((0, lib$4.keccak256)((0, lib$1.concat)([entropy, options.extraEntropy])), 0, 16));\n\t        }\n\t        var mnemonic = (0, lib$k.entropyToMnemonic)(entropy, options.locale);\n\t        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n\t    };\n\t    Wallet.fromEncryptedJson = function (json, password, progressCallback) {\n\t        return (0, lib$m.decryptJsonWallet)(json, password, progressCallback).then(function (account) {\n\t            return new Wallet(account);\n\t        });\n\t    };\n\t    Wallet.fromEncryptedJsonSync = function (json, password) {\n\t        return new Wallet((0, lib$m.decryptJsonWalletSync)(json, password));\n\t    };\n\t    Wallet.fromMnemonic = function (mnemonic, path, wordlist) {\n\t        if (!path) {\n\t            path = lib$k.defaultPath;\n\t        }\n\t        return new Wallet(lib$k.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n\t    };\n\t    return Wallet;\n\t}(lib$c.Signer));\n\texports.Wallet = Wallet;\n\tfunction verifyMessage(message, signature) {\n\t    return (0, lib$e.recoverAddress)((0, lib$9.hashMessage)(message), signature);\n\t}\n\texports.verifyMessage = verifyMessage;\n\tfunction verifyTypedData(domain, types, value, signature) {\n\t    return (0, lib$e.recoverAddress)(lib$9._TypedDataEncoder.hash(domain, types, value), signature);\n\t}\n\texports.verifyTypedData = verifyTypedData;\n\n\t});\n\n\tvar index$n = /*@__PURE__*/getDefaultExportFromCjs(lib$n);\n\n\tvar _version$E = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"networks/5.5.0\";\n\n\t});\n\n\tvar _version$F = /*@__PURE__*/getDefaultExportFromCjs(_version$E);\n\n\tvar lib$o = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.getNetwork = void 0;\n\n\n\tvar logger = new lib.Logger(_version$E.version);\n\t;\n\tfunction isRenetworkable(value) {\n\t    return (value && typeof (value.renetwork) === \"function\");\n\t}\n\tfunction ethDefaultProvider(network) {\n\t    var func = function (providers, options) {\n\t        if (options == null) {\n\t            options = {};\n\t        }\n\t        var providerList = [];\n\t        if (providers.InfuraProvider) {\n\t            try {\n\t                providerList.push(new providers.InfuraProvider(network, options.infura));\n\t            }\n\t            catch (error) { }\n\t        }\n\t        if (providers.EtherscanProvider) {\n\t            try {\n\t                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n\t            }\n\t            catch (error) { }\n\t        }\n\t        if (providers.AlchemyProvider) {\n\t            try {\n\t                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n\t            }\n\t            catch (error) { }\n\t        }\n\t        if (providers.PocketProvider) {\n\t            // These networks are currently faulty on Pocket as their\n\t            // network does not handle the Berlin hardfork, which is\n\t            // live on these ones.\n\t            // @TODO: This goes away once Pocket has upgraded their nodes\n\t            var skip = [\"goerli\", \"ropsten\", \"rinkeby\"];\n\t            try {\n\t                var provider = new providers.PocketProvider(network);\n\t                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n\t                    providerList.push(provider);\n\t                }\n\t            }\n\t            catch (error) { }\n\t        }\n\t        if (providers.CloudflareProvider) {\n\t            try {\n\t                providerList.push(new providers.CloudflareProvider(network));\n\t            }\n\t            catch (error) { }\n\t        }\n\t        if (providerList.length === 0) {\n\t            return null;\n\t        }\n\t        if (providers.FallbackProvider) {\n\t            var quorum = 1;\n\t            if (options.quorum != null) {\n\t                quorum = options.quorum;\n\t            }\n\t            else if (network === \"homestead\") {\n\t                quorum = 2;\n\t            }\n\t            return new providers.FallbackProvider(providerList, quorum);\n\t        }\n\t        return providerList[0];\n\t    };\n\t    func.renetwork = function (network) {\n\t        return ethDefaultProvider(network);\n\t    };\n\t    return func;\n\t}\n\tfunction etcDefaultProvider(url, network) {\n\t    var func = function (providers, options) {\n\t        if (providers.JsonRpcProvider) {\n\t            return new providers.JsonRpcProvider(url, network);\n\t        }\n\t        return null;\n\t    };\n\t    func.renetwork = function (network) {\n\t        return etcDefaultProvider(url, network);\n\t    };\n\t    return func;\n\t}\n\tvar homestead = {\n\t    chainId: 1,\n\t    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n\t    name: \"homestead\",\n\t    _defaultProvider: ethDefaultProvider(\"homestead\")\n\t};\n\tvar ropsten = {\n\t    chainId: 3,\n\t    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n\t    name: \"ropsten\",\n\t    _defaultProvider: ethDefaultProvider(\"ropsten\")\n\t};\n\tvar classicMordor = {\n\t    chainId: 63,\n\t    name: \"classicMordor\",\n\t    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n\t};\n\tvar networks = {\n\t    unspecified: { chainId: 0, name: \"unspecified\" },\n\t    homestead: homestead,\n\t    mainnet: homestead,\n\t    morden: { chainId: 2, name: \"morden\" },\n\t    ropsten: ropsten,\n\t    testnet: ropsten,\n\t    rinkeby: {\n\t        chainId: 4,\n\t        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n\t        name: \"rinkeby\",\n\t        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n\t    },\n\t    kovan: {\n\t        chainId: 42,\n\t        name: \"kovan\",\n\t        _defaultProvider: ethDefaultProvider(\"kovan\")\n\t    },\n\t    goerli: {\n\t        chainId: 5,\n\t        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n\t        name: \"goerli\",\n\t        _defaultProvider: ethDefaultProvider(\"goerli\")\n\t    },\n\t    // ETC (See: #351)\n\t    classic: {\n\t        chainId: 61,\n\t        name: \"classic\",\n\t        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n\t    },\n\t    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\t    classicMordor: classicMordor,\n\t    classicTestnet: classicMordor,\n\t    classicKotti: {\n\t        chainId: 6,\n\t        name: \"classicKotti\",\n\t        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n\t    },\n\t    xdai: { chainId: 100, name: \"xdai\" },\n\t    matic: { chainId: 137, name: \"matic\" },\n\t    maticmum: { chainId: 80001, name: \"maticmum\" },\n\t    bnb: { chainId: 56, name: \"bnb\" },\n\t    bnbt: { chainId: 97, name: \"bnbt\" },\n\t};\n\t/**\n\t *  getNetwork\n\t *\n\t *  Converts a named common networks or chain ID (network ID) to a Network\n\t *  and verifies a network is a valid Network..\n\t */\n\tfunction getNetwork(network) {\n\t    // No network (null)\n\t    if (network == null) {\n\t        return null;\n\t    }\n\t    if (typeof (network) === \"number\") {\n\t        for (var name_1 in networks) {\n\t            var standard_1 = networks[name_1];\n\t            if (standard_1.chainId === network) {\n\t                return {\n\t                    name: standard_1.name,\n\t                    chainId: standard_1.chainId,\n\t                    ensAddress: (standard_1.ensAddress || null),\n\t                    _defaultProvider: (standard_1._defaultProvider || null)\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            chainId: network,\n\t            name: \"unknown\"\n\t        };\n\t    }\n\t    if (typeof (network) === \"string\") {\n\t        var standard_2 = networks[network];\n\t        if (standard_2 == null) {\n\t            return null;\n\t        }\n\t        return {\n\t            name: standard_2.name,\n\t            chainId: standard_2.chainId,\n\t            ensAddress: standard_2.ensAddress,\n\t            _defaultProvider: (standard_2._defaultProvider || null)\n\t        };\n\t    }\n\t    var standard = networks[network.name];\n\t    // Not a standard network; check that it is a valid network in general\n\t    if (!standard) {\n\t        if (typeof (network.chainId) !== \"number\") {\n\t            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n\t        }\n\t        return network;\n\t    }\n\t    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\t    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n\t        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n\t    }\n\t    // @TODO: In the next major version add an attach function to a defaultProvider\n\t    // class and move the _defaultProvider internal to this file (extend Network)\n\t    var defaultProvider = network._defaultProvider || null;\n\t    if (defaultProvider == null && standard._defaultProvider) {\n\t        if (isRenetworkable(standard._defaultProvider)) {\n\t            defaultProvider = standard._defaultProvider.renetwork(network);\n\t        }\n\t        else {\n\t            defaultProvider = standard._defaultProvider;\n\t        }\n\t    }\n\t    // Standard Network (allow overriding the ENS address)\n\t    return {\n\t        name: network.name,\n\t        chainId: standard.chainId,\n\t        ensAddress: (network.ensAddress || standard.ensAddress || null),\n\t        _defaultProvider: defaultProvider\n\t    };\n\t}\n\texports.getNetwork = getNetwork;\n\n\t});\n\n\tvar index$o = /*@__PURE__*/getDefaultExportFromCjs(lib$o);\n\n\tvar browserBase64 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.encode = exports.decode = void 0;\n\n\tfunction decode(textData) {\n\t    textData = atob(textData);\n\t    var data = [];\n\t    for (var i = 0; i < textData.length; i++) {\n\t        data.push(textData.charCodeAt(i));\n\t    }\n\t    return (0, lib$1.arrayify)(data);\n\t}\n\texports.decode = decode;\n\tfunction encode(data) {\n\t    data = (0, lib$1.arrayify)(data);\n\t    var textData = \"\";\n\t    for (var i = 0; i < data.length; i++) {\n\t        textData += String.fromCharCode(data[i]);\n\t    }\n\t    return btoa(textData);\n\t}\n\texports.encode = encode;\n\n\t});\n\n\tvar browserBase64$1 = /*@__PURE__*/getDefaultExportFromCjs(browserBase64);\n\n\tvar lib$p = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.encode = exports.decode = void 0;\n\n\tObject.defineProperty(exports, \"decode\", { enumerable: true, get: function () { return browserBase64.decode; } });\n\tObject.defineProperty(exports, \"encode\", { enumerable: true, get: function () { return browserBase64.encode; } });\n\n\t});\n\n\tvar index$p = /*@__PURE__*/getDefaultExportFromCjs(lib$p);\n\n\tvar _version$G = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"web/5.5.0\";\n\n\t});\n\n\tvar _version$H = /*@__PURE__*/getDefaultExportFromCjs(_version$G);\n\n\tvar browserGeturl = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.getUrl = void 0;\n\n\tfunction getUrl(href, options) {\n\t    return __awaiter(this, void 0, void 0, function () {\n\t        var request, response, body, headers;\n\t        return __generator(this, function (_a) {\n\t            switch (_a.label) {\n\t                case 0:\n\t                    if (options == null) {\n\t                        options = {};\n\t                    }\n\t                    request = {\n\t                        method: (options.method || \"GET\"),\n\t                        headers: (options.headers || {}),\n\t                        body: (options.body || undefined),\n\t                    };\n\t                    if (options.skipFetchSetup !== true) {\n\t                        request.mode = \"cors\"; // no-cors, cors, *same-origin\n\t                        request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n\t                        request.credentials = \"same-origin\"; // include, *same-origin, omit\n\t                        request.redirect = \"follow\"; // manual, *follow, error\n\t                        request.referrer = \"client\"; // no-referrer, *client\n\t                    }\n\t                    ;\n\t                    return [4 /*yield*/, fetch(href, request)];\n\t                case 1:\n\t                    response = _a.sent();\n\t                    return [4 /*yield*/, response.arrayBuffer()];\n\t                case 2:\n\t                    body = _a.sent();\n\t                    headers = {};\n\t                    if (response.headers.forEach) {\n\t                        response.headers.forEach(function (value, key) {\n\t                            headers[key.toLowerCase()] = value;\n\t                        });\n\t                    }\n\t                    else {\n\t                        ((response.headers).keys)().forEach(function (key) {\n\t                            headers[key.toLowerCase()] = response.headers.get(key);\n\t                        });\n\t                    }\n\t                    return [2 /*return*/, {\n\t                            headers: headers,\n\t                            statusCode: response.status,\n\t                            statusMessage: response.statusText,\n\t                            body: (0, lib$1.arrayify)(new Uint8Array(body)),\n\t                        }];\n\t            }\n\t        });\n\t    });\n\t}\n\texports.getUrl = getUrl;\n\n\t});\n\n\tvar browserGeturl$1 = /*@__PURE__*/getDefaultExportFromCjs(browserGeturl);\n\n\tvar lib$q = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.poll = exports.fetchJson = exports._fetchData = void 0;\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$G.version);\n\n\tfunction staller(duration) {\n\t    return new Promise(function (resolve) {\n\t        setTimeout(resolve, duration);\n\t    });\n\t}\n\tfunction bodyify(value, type) {\n\t    if (value == null) {\n\t        return null;\n\t    }\n\t    if (typeof (value) === \"string\") {\n\t        return value;\n\t    }\n\t    if ((0, lib$1.isBytesLike)(value)) {\n\t        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n\t            try {\n\t                return (0, lib$8.toUtf8String)(value);\n\t            }\n\t            catch (error) { }\n\t            ;\n\t        }\n\t        return (0, lib$1.hexlify)(value);\n\t    }\n\t    return value;\n\t}\n\t// This API is still a work in progress; the future changes will likely be:\n\t// - ConnectionInfo => FetchDataRequest<T = any>\n\t// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n\t//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n\t// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n\t// For this reason, it should be considered internal until the API is finalized\n\tfunction _fetchData(connection, body, processFunc) {\n\t    // How many times to retry in the event of a throttle\n\t    var attemptLimit = (typeof (connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit : 12;\n\t    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\t    var throttleCallback = ((typeof (connection) === \"object\") ? connection.throttleCallback : null);\n\t    var throttleSlotInterval = ((typeof (connection) === \"object\" && typeof (connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval : 100);\n\t    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\t    var headers = {};\n\t    var url = null;\n\t    // @TODO: Allow ConnectionInfo to override some of these values\n\t    var options = {\n\t        method: \"GET\",\n\t    };\n\t    var allow304 = false;\n\t    var timeout = 2 * 60 * 1000;\n\t    if (typeof (connection) === \"string\") {\n\t        url = connection;\n\t    }\n\t    else if (typeof (connection) === \"object\") {\n\t        if (connection == null || connection.url == null) {\n\t            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n\t        }\n\t        url = connection.url;\n\t        if (typeof (connection.timeout) === \"number\" && connection.timeout > 0) {\n\t            timeout = connection.timeout;\n\t        }\n\t        if (connection.headers) {\n\t            for (var key in connection.headers) {\n\t                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n\t                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n\t                    allow304 = true;\n\t                }\n\t            }\n\t        }\n\t        options.allowGzip = !!connection.allowGzip;\n\t        if (connection.user != null && connection.password != null) {\n\t            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n\t                logger.throwError(\"basic authentication requires a secure https url\", lib.Logger.errors.INVALID_ARGUMENT, { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" });\n\t            }\n\t            var authorization = connection.user + \":\" + connection.password;\n\t            headers[\"authorization\"] = {\n\t                key: \"Authorization\",\n\t                value: \"Basic \" + (0, lib$p.encode)((0, lib$8.toUtf8Bytes)(authorization))\n\t            };\n\t        }\n\t    }\n\t    if (body) {\n\t        options.method = \"POST\";\n\t        options.body = body;\n\t        if (headers[\"content-type\"] == null) {\n\t            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n\t        }\n\t        if (headers[\"content-length\"] == null) {\n\t            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n\t        }\n\t    }\n\t    var flatHeaders = {};\n\t    Object.keys(headers).forEach(function (key) {\n\t        var header = headers[key];\n\t        flatHeaders[header.key] = header.value;\n\t    });\n\t    options.headers = flatHeaders;\n\t    var runningTimeout = (function () {\n\t        var timer = null;\n\t        var promise = new Promise(function (resolve, reject) {\n\t            if (timeout) {\n\t                timer = setTimeout(function () {\n\t                    if (timer == null) {\n\t                        return;\n\t                    }\n\t                    timer = null;\n\t                    reject(logger.makeError(\"timeout\", lib.Logger.errors.TIMEOUT, {\n\t                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n\t                        requestMethod: options.method,\n\t                        timeout: timeout,\n\t                        url: url\n\t                    }));\n\t                }, timeout);\n\t            }\n\t        });\n\t        var cancel = function () {\n\t            if (timer == null) {\n\t                return;\n\t            }\n\t            clearTimeout(timer);\n\t            timer = null;\n\t        };\n\t        return { promise: promise, cancel: cancel };\n\t    })();\n\t    var runningFetch = (function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var attempt, response, tryAgain, stall, retryAfter, error_1, body_1, result, error_2, tryAgain, timeout_1;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        attempt = 0;\n\t                        _a.label = 1;\n\t                    case 1:\n\t                        if (!(attempt < attemptLimit)) return [3 /*break*/, 19];\n\t                        response = null;\n\t                        _a.label = 2;\n\t                    case 2:\n\t                        _a.trys.push([2, 8, , 9]);\n\t                        return [4 /*yield*/, (0, browserGeturl.getUrl)(url, options)];\n\t                    case 3:\n\t                        response = _a.sent();\n\t                        if (!(response.statusCode === 429 && attempt < attemptLimit)) return [3 /*break*/, 7];\n\t                        tryAgain = true;\n\t                        if (!throttleCallback) return [3 /*break*/, 5];\n\t                        return [4 /*yield*/, throttleCallback(attempt, url)];\n\t                    case 4:\n\t                        tryAgain = _a.sent();\n\t                        _a.label = 5;\n\t                    case 5:\n\t                        if (!tryAgain) return [3 /*break*/, 7];\n\t                        stall = 0;\n\t                        retryAfter = response.headers[\"retry-after\"];\n\t                        if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n\t                            stall = parseInt(retryAfter) * 1000;\n\t                        }\n\t                        else {\n\t                            stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\t                        }\n\t                        //console.log(\"Stalling 429\");\n\t                        return [4 /*yield*/, staller(stall)];\n\t                    case 6:\n\t                        //console.log(\"Stalling 429\");\n\t                        _a.sent();\n\t                        return [3 /*break*/, 18];\n\t                    case 7: return [3 /*break*/, 9];\n\t                    case 8:\n\t                        error_1 = _a.sent();\n\t                        response = error_1.response;\n\t                        if (response == null) {\n\t                            runningTimeout.cancel();\n\t                            logger.throwError(\"missing response\", lib.Logger.errors.SERVER_ERROR, {\n\t                                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n\t                                requestMethod: options.method,\n\t                                serverError: error_1,\n\t                                url: url\n\t                            });\n\t                        }\n\t                        return [3 /*break*/, 9];\n\t                    case 9:\n\t                        body_1 = response.body;\n\t                        if (allow304 && response.statusCode === 304) {\n\t                            body_1 = null;\n\t                        }\n\t                        else if (response.statusCode < 200 || response.statusCode >= 300) {\n\t                            runningTimeout.cancel();\n\t                            logger.throwError(\"bad response\", lib.Logger.errors.SERVER_ERROR, {\n\t                                status: response.statusCode,\n\t                                headers: response.headers,\n\t                                body: bodyify(body_1, ((response.headers) ? response.headers[\"content-type\"] : null)),\n\t                                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n\t                                requestMethod: options.method,\n\t                                url: url\n\t                            });\n\t                        }\n\t                        if (!processFunc) return [3 /*break*/, 17];\n\t                        _a.label = 10;\n\t                    case 10:\n\t                        _a.trys.push([10, 12, , 17]);\n\t                        return [4 /*yield*/, processFunc(body_1, response)];\n\t                    case 11:\n\t                        result = _a.sent();\n\t                        runningTimeout.cancel();\n\t                        return [2 /*return*/, result];\n\t                    case 12:\n\t                        error_2 = _a.sent();\n\t                        if (!(error_2.throttleRetry && attempt < attemptLimit)) return [3 /*break*/, 16];\n\t                        tryAgain = true;\n\t                        if (!throttleCallback) return [3 /*break*/, 14];\n\t                        return [4 /*yield*/, throttleCallback(attempt, url)];\n\t                    case 13:\n\t                        tryAgain = _a.sent();\n\t                        _a.label = 14;\n\t                    case 14:\n\t                        if (!tryAgain) return [3 /*break*/, 16];\n\t                        timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\t                        //console.log(\"Stalling callback\");\n\t                        return [4 /*yield*/, staller(timeout_1)];\n\t                    case 15:\n\t                        //console.log(\"Stalling callback\");\n\t                        _a.sent();\n\t                        return [3 /*break*/, 18];\n\t                    case 16:\n\t                        runningTimeout.cancel();\n\t                        logger.throwError(\"processing response error\", lib.Logger.errors.SERVER_ERROR, {\n\t                            body: bodyify(body_1, ((response.headers) ? response.headers[\"content-type\"] : null)),\n\t                            error: error_2,\n\t                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n\t                            requestMethod: options.method,\n\t                            url: url\n\t                        });\n\t                        return [3 /*break*/, 17];\n\t                    case 17:\n\t                        runningTimeout.cancel();\n\t                        // If we had a processFunc, it either returned a T or threw above.\n\t                        // The \"body\" is now a Uint8Array.\n\t                        return [2 /*return*/, body_1];\n\t                    case 18:\n\t                        attempt++;\n\t                        return [3 /*break*/, 1];\n\t                    case 19: return [2 /*return*/, logger.throwError(\"failed response\", lib.Logger.errors.SERVER_ERROR, {\n\t                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n\t                            requestMethod: options.method,\n\t                            url: url\n\t                        })];\n\t                }\n\t            });\n\t        });\n\t    })();\n\t    return Promise.race([runningTimeout.promise, runningFetch]);\n\t}\n\texports._fetchData = _fetchData;\n\tfunction fetchJson(connection, json, processFunc) {\n\t    var processJsonFunc = function (value, response) {\n\t        var result = null;\n\t        if (value != null) {\n\t            try {\n\t                result = JSON.parse((0, lib$8.toUtf8String)(value));\n\t            }\n\t            catch (error) {\n\t                logger.throwError(\"invalid JSON\", lib.Logger.errors.SERVER_ERROR, {\n\t                    body: value,\n\t                    error: error\n\t                });\n\t            }\n\t        }\n\t        if (processFunc) {\n\t            result = processFunc(result, response);\n\t        }\n\t        return result;\n\t    };\n\t    // If we have json to send, we must\n\t    // - add content-type of application/json (unless already overridden)\n\t    // - convert the json to bytes\n\t    var body = null;\n\t    if (json != null) {\n\t        body = (0, lib$8.toUtf8Bytes)(json);\n\t        // Create a connection with the content-type set for JSON\n\t        var updated = (typeof (connection) === \"string\") ? ({ url: connection }) : (0, lib$3.shallowCopy)(connection);\n\t        if (updated.headers) {\n\t            var hasContentType = (Object.keys(updated.headers).filter(function (k) { return (k.toLowerCase() === \"content-type\"); }).length) !== 0;\n\t            if (!hasContentType) {\n\t                updated.headers = (0, lib$3.shallowCopy)(updated.headers);\n\t                updated.headers[\"content-type\"] = \"application/json\";\n\t            }\n\t        }\n\t        else {\n\t            updated.headers = { \"content-type\": \"application/json\" };\n\t        }\n\t        connection = updated;\n\t    }\n\t    return _fetchData(connection, body, processJsonFunc);\n\t}\n\texports.fetchJson = fetchJson;\n\tfunction poll(func, options) {\n\t    if (!options) {\n\t        options = {};\n\t    }\n\t    options = (0, lib$3.shallowCopy)(options);\n\t    if (options.floor == null) {\n\t        options.floor = 0;\n\t    }\n\t    if (options.ceiling == null) {\n\t        options.ceiling = 10000;\n\t    }\n\t    if (options.interval == null) {\n\t        options.interval = 250;\n\t    }\n\t    return new Promise(function (resolve, reject) {\n\t        var timer = null;\n\t        var done = false;\n\t        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n\t        var cancel = function () {\n\t            if (done) {\n\t                return false;\n\t            }\n\t            done = true;\n\t            if (timer) {\n\t                clearTimeout(timer);\n\t            }\n\t            return true;\n\t        };\n\t        if (options.timeout) {\n\t            timer = setTimeout(function () {\n\t                if (cancel()) {\n\t                    reject(new Error(\"timeout\"));\n\t                }\n\t            }, options.timeout);\n\t        }\n\t        var retryLimit = options.retryLimit;\n\t        var attempt = 0;\n\t        function check() {\n\t            return func().then(function (result) {\n\t                // If we have a result, or are allowed null then we're done\n\t                if (result !== undefined) {\n\t                    if (cancel()) {\n\t                        resolve(result);\n\t                    }\n\t                }\n\t                else if (options.oncePoll) {\n\t                    options.oncePoll.once(\"poll\", check);\n\t                }\n\t                else if (options.onceBlock) {\n\t                    options.onceBlock.once(\"block\", check);\n\t                    // Otherwise, exponential back-off (up to 10s) our next request\n\t                }\n\t                else if (!done) {\n\t                    attempt++;\n\t                    if (attempt > retryLimit) {\n\t                        if (cancel()) {\n\t                            reject(new Error(\"retry limit reached\"));\n\t                        }\n\t                        return;\n\t                    }\n\t                    var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\t                    if (timeout < options.floor) {\n\t                        timeout = options.floor;\n\t                    }\n\t                    if (timeout > options.ceiling) {\n\t                        timeout = options.ceiling;\n\t                    }\n\t                    setTimeout(check, timeout);\n\t                }\n\t                return null;\n\t            }, function (error) {\n\t                if (cancel()) {\n\t                    reject(error);\n\t                }\n\t            });\n\t        }\n\t        check();\n\t    });\n\t}\n\texports.poll = poll;\n\n\t});\n\n\tvar index$q = /*@__PURE__*/getDefaultExportFromCjs(lib$q);\n\n\t'use strict';\n\tvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n\n\t// pre-compute lookup table\n\tvar ALPHABET_MAP = {};\n\tfor (var z = 0; z < ALPHABET.length; z++) {\n\t  var x = ALPHABET.charAt(z);\n\n\t  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n\t  ALPHABET_MAP[x] = z;\n\t}\n\n\tfunction polymodStep (pre) {\n\t  var b = pre >> 25;\n\t  return ((pre & 0x1FFFFFF) << 5) ^\n\t    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n\t    (-((b >> 1) & 1) & 0x26508e6d) ^\n\t    (-((b >> 2) & 1) & 0x1ea119fa) ^\n\t    (-((b >> 3) & 1) & 0x3d4233dd) ^\n\t    (-((b >> 4) & 1) & 0x2a1462b3)\n\t}\n\n\tfunction prefixChk (prefix) {\n\t  var chk = 1;\n\t  for (var i = 0; i < prefix.length; ++i) {\n\t    var c = prefix.charCodeAt(i);\n\t    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n\t    chk = polymodStep(chk) ^ (c >> 5);\n\t  }\n\t  chk = polymodStep(chk);\n\n\t  for (i = 0; i < prefix.length; ++i) {\n\t    var v = prefix.charCodeAt(i);\n\t    chk = polymodStep(chk) ^ (v & 0x1f);\n\t  }\n\t  return chk\n\t}\n\n\tfunction encode (prefix, words, LIMIT) {\n\t  LIMIT = LIMIT || 90;\n\t  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n\t  prefix = prefix.toLowerCase();\n\n\t  // determine chk mod\n\t  var chk = prefixChk(prefix);\n\t  if (typeof chk === 'string') throw new Error(chk)\n\n\t  var result = prefix + '1';\n\t  for (var i = 0; i < words.length; ++i) {\n\t    var x = words[i];\n\t    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n\t    chk = polymodStep(chk) ^ x;\n\t    result += ALPHABET.charAt(x);\n\t  }\n\n\t  for (i = 0; i < 6; ++i) {\n\t    chk = polymodStep(chk);\n\t  }\n\t  chk ^= 1;\n\n\t  for (i = 0; i < 6; ++i) {\n\t    var v = (chk >> ((5 - i) * 5)) & 0x1f;\n\t    result += ALPHABET.charAt(v);\n\t  }\n\n\t  return result\n\t}\n\n\tfunction __decode (str, LIMIT) {\n\t  LIMIT = LIMIT || 90;\n\t  if (str.length < 8) return str + ' too short'\n\t  if (str.length > LIMIT) return 'Exceeds length limit'\n\n\t  // don't allow mixed case\n\t  var lowered = str.toLowerCase();\n\t  var uppered = str.toUpperCase();\n\t  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n\t  str = lowered;\n\n\t  var split = str.lastIndexOf('1');\n\t  if (split === -1) return 'No separator character for ' + str\n\t  if (split === 0) return 'Missing prefix for ' + str\n\n\t  var prefix = str.slice(0, split);\n\t  var wordChars = str.slice(split + 1);\n\t  if (wordChars.length < 6) return 'Data too short'\n\n\t  var chk = prefixChk(prefix);\n\t  if (typeof chk === 'string') return chk\n\n\t  var words = [];\n\t  for (var i = 0; i < wordChars.length; ++i) {\n\t    var c = wordChars.charAt(i);\n\t    var v = ALPHABET_MAP[c];\n\t    if (v === undefined) return 'Unknown character ' + c\n\t    chk = polymodStep(chk) ^ v;\n\n\t    // not in the checksum?\n\t    if (i + 6 >= wordChars.length) continue\n\t    words.push(v);\n\t  }\n\n\t  if (chk !== 1) return 'Invalid checksum for ' + str\n\t  return { prefix: prefix, words: words }\n\t}\n\n\tfunction decodeUnsafe () {\n\t  var res = __decode.apply(null, arguments);\n\t  if (typeof res === 'object') return res\n\t}\n\n\tfunction decode (str) {\n\t  var res = __decode.apply(null, arguments);\n\t  if (typeof res === 'object') return res\n\n\t  throw new Error(res)\n\t}\n\n\tfunction convert (data, inBits, outBits, pad) {\n\t  var value = 0;\n\t  var bits = 0;\n\t  var maxV = (1 << outBits) - 1;\n\n\t  var result = [];\n\t  for (var i = 0; i < data.length; ++i) {\n\t    value = (value << inBits) | data[i];\n\t    bits += inBits;\n\n\t    while (bits >= outBits) {\n\t      bits -= outBits;\n\t      result.push((value >> bits) & maxV);\n\t    }\n\t  }\n\n\t  if (pad) {\n\t    if (bits > 0) {\n\t      result.push((value << (outBits - bits)) & maxV);\n\t    }\n\t  } else {\n\t    if (bits >= inBits) return 'Excess padding'\n\t    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n\t  }\n\n\t  return result\n\t}\n\n\tfunction toWordsUnsafe (bytes) {\n\t  var res = convert(bytes, 8, 5, true);\n\t  if (Array.isArray(res)) return res\n\t}\n\n\tfunction toWords (bytes) {\n\t  var res = convert(bytes, 8, 5, true);\n\t  if (Array.isArray(res)) return res\n\n\t  throw new Error(res)\n\t}\n\n\tfunction fromWordsUnsafe (words) {\n\t  var res = convert(words, 5, 8, false);\n\t  if (Array.isArray(res)) return res\n\t}\n\n\tfunction fromWords (words) {\n\t  var res = convert(words, 5, 8, false);\n\t  if (Array.isArray(res)) return res\n\n\t  throw new Error(res)\n\t}\n\n\tvar bech32 = {\n\t  decodeUnsafe: decodeUnsafe,\n\t  decode: decode,\n\t  encode: encode,\n\t  toWordsUnsafe: toWordsUnsafe,\n\t  toWords: toWords,\n\t  fromWordsUnsafe: fromWordsUnsafe,\n\t  fromWords: fromWords\n\t};\n\n\tvar _version$I = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"providers/5.5.0\";\n\n\t});\n\n\tvar _version$J = /*@__PURE__*/getDefaultExportFromCjs(_version$I);\n\n\tvar formatter = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.showThrottleMessage = exports.isCommunityResource = exports.isCommunityResourcable = exports.Formatter = void 0;\n\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\tvar Formatter = /** @class */ (function () {\n\t    function Formatter() {\n\t        var _newTarget = this.constructor;\n\t        logger.checkNew(_newTarget, Formatter);\n\t        this.formats = this.getDefaultFormats();\n\t    }\n\t    Formatter.prototype.getDefaultFormats = function () {\n\t        var _this = this;\n\t        var formats = ({});\n\t        var address = this.address.bind(this);\n\t        var bigNumber = this.bigNumber.bind(this);\n\t        var blockTag = this.blockTag.bind(this);\n\t        var data = this.data.bind(this);\n\t        var hash = this.hash.bind(this);\n\t        var hex = this.hex.bind(this);\n\t        var number = this.number.bind(this);\n\t        var type = this.type.bind(this);\n\t        var strictData = function (v) { return _this.data(v, true); };\n\t        formats.transaction = {\n\t            hash: hash,\n\t            type: type,\n\t            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\t            blockHash: Formatter.allowNull(hash, null),\n\t            blockNumber: Formatter.allowNull(number, null),\n\t            transactionIndex: Formatter.allowNull(number, null),\n\t            confirmations: Formatter.allowNull(number, null),\n\t            from: address,\n\t            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n\t            // must be set\n\t            gasPrice: Formatter.allowNull(bigNumber),\n\t            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n\t            maxFeePerGas: Formatter.allowNull(bigNumber),\n\t            gasLimit: bigNumber,\n\t            to: Formatter.allowNull(address, null),\n\t            value: bigNumber,\n\t            nonce: number,\n\t            data: data,\n\t            r: Formatter.allowNull(this.uint256),\n\t            s: Formatter.allowNull(this.uint256),\n\t            v: Formatter.allowNull(number),\n\t            creates: Formatter.allowNull(address, null),\n\t            raw: Formatter.allowNull(data),\n\t        };\n\t        formats.transactionRequest = {\n\t            from: Formatter.allowNull(address),\n\t            nonce: Formatter.allowNull(number),\n\t            gasLimit: Formatter.allowNull(bigNumber),\n\t            gasPrice: Formatter.allowNull(bigNumber),\n\t            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n\t            maxFeePerGas: Formatter.allowNull(bigNumber),\n\t            to: Formatter.allowNull(address),\n\t            value: Formatter.allowNull(bigNumber),\n\t            data: Formatter.allowNull(strictData),\n\t            type: Formatter.allowNull(number),\n\t            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\t        };\n\t        formats.receiptLog = {\n\t            transactionIndex: number,\n\t            blockNumber: number,\n\t            transactionHash: hash,\n\t            address: address,\n\t            topics: Formatter.arrayOf(hash),\n\t            data: data,\n\t            logIndex: number,\n\t            blockHash: hash,\n\t        };\n\t        formats.receipt = {\n\t            to: Formatter.allowNull(this.address, null),\n\t            from: Formatter.allowNull(this.address, null),\n\t            contractAddress: Formatter.allowNull(address, null),\n\t            transactionIndex: number,\n\t            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n\t            root: Formatter.allowNull(hex),\n\t            gasUsed: bigNumber,\n\t            logsBloom: Formatter.allowNull(data),\n\t            blockHash: hash,\n\t            transactionHash: hash,\n\t            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n\t            blockNumber: number,\n\t            confirmations: Formatter.allowNull(number, null),\n\t            cumulativeGasUsed: bigNumber,\n\t            effectiveGasPrice: Formatter.allowNull(bigNumber),\n\t            status: Formatter.allowNull(number),\n\t            type: type\n\t        };\n\t        formats.block = {\n\t            hash: hash,\n\t            parentHash: hash,\n\t            number: number,\n\t            timestamp: number,\n\t            nonce: Formatter.allowNull(hex),\n\t            difficulty: this.difficulty.bind(this),\n\t            gasLimit: bigNumber,\n\t            gasUsed: bigNumber,\n\t            miner: address,\n\t            extraData: data,\n\t            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\t            baseFeePerGas: Formatter.allowNull(bigNumber)\n\t        };\n\t        formats.blockWithTransactions = (0, lib$3.shallowCopy)(formats.block);\n\t        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\t        formats.filter = {\n\t            fromBlock: Formatter.allowNull(blockTag, undefined),\n\t            toBlock: Formatter.allowNull(blockTag, undefined),\n\t            blockHash: Formatter.allowNull(hash, undefined),\n\t            address: Formatter.allowNull(address, undefined),\n\t            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n\t        };\n\t        formats.filterLog = {\n\t            blockNumber: Formatter.allowNull(number),\n\t            blockHash: Formatter.allowNull(hash),\n\t            transactionIndex: number,\n\t            removed: Formatter.allowNull(this.boolean.bind(this)),\n\t            address: address,\n\t            data: Formatter.allowFalsish(data, \"0x\"),\n\t            topics: Formatter.arrayOf(hash),\n\t            transactionHash: hash,\n\t            logIndex: number,\n\t        };\n\t        return formats;\n\t    };\n\t    Formatter.prototype.accessList = function (accessList) {\n\t        return (0, lib$e.accessListify)(accessList || []);\n\t    };\n\t    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n\t    // Strict! Used on input.\n\t    Formatter.prototype.number = function (number) {\n\t        if (number === \"0x\") {\n\t            return 0;\n\t        }\n\t        return lib$2.BigNumber.from(number).toNumber();\n\t    };\n\t    Formatter.prototype.type = function (number) {\n\t        if (number === \"0x\" || number == null) {\n\t            return 0;\n\t        }\n\t        return lib$2.BigNumber.from(number).toNumber();\n\t    };\n\t    // Strict! Used on input.\n\t    Formatter.prototype.bigNumber = function (value) {\n\t        return lib$2.BigNumber.from(value);\n\t    };\n\t    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\t    Formatter.prototype.boolean = function (value) {\n\t        if (typeof (value) === \"boolean\") {\n\t            return value;\n\t        }\n\t        if (typeof (value) === \"string\") {\n\t            value = value.toLowerCase();\n\t            if (value === \"true\") {\n\t                return true;\n\t            }\n\t            if (value === \"false\") {\n\t                return false;\n\t            }\n\t        }\n\t        throw new Error(\"invalid boolean - \" + value);\n\t    };\n\t    Formatter.prototype.hex = function (value, strict) {\n\t        if (typeof (value) === \"string\") {\n\t            if (!strict && value.substring(0, 2) !== \"0x\") {\n\t                value = \"0x\" + value;\n\t            }\n\t            if ((0, lib$1.isHexString)(value)) {\n\t                return value.toLowerCase();\n\t            }\n\t        }\n\t        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n\t    };\n\t    Formatter.prototype.data = function (value, strict) {\n\t        var result = this.hex(value, strict);\n\t        if ((result.length % 2) !== 0) {\n\t            throw new Error(\"invalid data; odd-length - \" + value);\n\t        }\n\t        return result;\n\t    };\n\t    // Requires an address\n\t    // Strict! Used on input.\n\t    Formatter.prototype.address = function (value) {\n\t        return (0, lib$6.getAddress)(value);\n\t    };\n\t    Formatter.prototype.callAddress = function (value) {\n\t        if (!(0, lib$1.isHexString)(value, 32)) {\n\t            return null;\n\t        }\n\t        var address = (0, lib$6.getAddress)((0, lib$1.hexDataSlice)(value, 12));\n\t        return (address === lib$7.AddressZero) ? null : address;\n\t    };\n\t    Formatter.prototype.contractAddress = function (value) {\n\t        return (0, lib$6.getContractAddress)(value);\n\t    };\n\t    // Strict! Used on input.\n\t    Formatter.prototype.blockTag = function (blockTag) {\n\t        if (blockTag == null) {\n\t            return \"latest\";\n\t        }\n\t        if (blockTag === \"earliest\") {\n\t            return \"0x0\";\n\t        }\n\t        if (blockTag === \"latest\" || blockTag === \"pending\") {\n\t            return blockTag;\n\t        }\n\t        if (typeof (blockTag) === \"number\" || (0, lib$1.isHexString)(blockTag)) {\n\t            return (0, lib$1.hexValue)(blockTag);\n\t        }\n\t        throw new Error(\"invalid blockTag\");\n\t    };\n\t    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\t    Formatter.prototype.hash = function (value, strict) {\n\t        var result = this.hex(value, strict);\n\t        if ((0, lib$1.hexDataLength)(result) !== 32) {\n\t            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n\t        }\n\t        return result;\n\t    };\n\t    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\t    Formatter.prototype.difficulty = function (value) {\n\t        if (value == null) {\n\t            return null;\n\t        }\n\t        var v = lib$2.BigNumber.from(value);\n\t        try {\n\t            return v.toNumber();\n\t        }\n\t        catch (error) { }\n\t        return null;\n\t    };\n\t    Formatter.prototype.uint256 = function (value) {\n\t        if (!(0, lib$1.isHexString)(value)) {\n\t            throw new Error(\"invalid uint256\");\n\t        }\n\t        return (0, lib$1.hexZeroPad)(value, 32);\n\t    };\n\t    Formatter.prototype._block = function (value, format) {\n\t        if (value.author != null && value.miner == null) {\n\t            value.miner = value.author;\n\t        }\n\t        // The difficulty may need to come from _difficulty in recursed blocks\n\t        var difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n\t        var result = Formatter.check(format, value);\n\t        result._difficulty = ((difficulty == null) ? null : lib$2.BigNumber.from(difficulty));\n\t        return result;\n\t    };\n\t    Formatter.prototype.block = function (value) {\n\t        return this._block(value, this.formats.block);\n\t    };\n\t    Formatter.prototype.blockWithTransactions = function (value) {\n\t        return this._block(value, this.formats.blockWithTransactions);\n\t    };\n\t    // Strict! Used on input.\n\t    Formatter.prototype.transactionRequest = function (value) {\n\t        return Formatter.check(this.formats.transactionRequest, value);\n\t    };\n\t    Formatter.prototype.transactionResponse = function (transaction) {\n\t        // Rename gas to gasLimit\n\t        if (transaction.gas != null && transaction.gasLimit == null) {\n\t            transaction.gasLimit = transaction.gas;\n\t        }\n\t        // Some clients (TestRPC) do strange things like return 0x0 for the\n\t        // 0 address; correct this to be a real address\n\t        if (transaction.to && lib$2.BigNumber.from(transaction.to).isZero()) {\n\t            transaction.to = \"0x0000000000000000000000000000000000000000\";\n\t        }\n\t        // Rename input to data\n\t        if (transaction.input != null && transaction.data == null) {\n\t            transaction.data = transaction.input;\n\t        }\n\t        // If to and creates are empty, populate the creates from the transaction\n\t        if (transaction.to == null && transaction.creates == null) {\n\t            transaction.creates = this.contractAddress(transaction);\n\t        }\n\t        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n\t            transaction.accessList = [];\n\t        }\n\t        var result = Formatter.check(this.formats.transaction, transaction);\n\t        if (transaction.chainId != null) {\n\t            var chainId = transaction.chainId;\n\t            if ((0, lib$1.isHexString)(chainId)) {\n\t                chainId = lib$2.BigNumber.from(chainId).toNumber();\n\t            }\n\t            result.chainId = chainId;\n\t        }\n\t        else {\n\t            var chainId = transaction.networkId;\n\t            // geth-etc returns chainId\n\t            if (chainId == null && result.v == null) {\n\t                chainId = transaction.chainId;\n\t            }\n\t            if ((0, lib$1.isHexString)(chainId)) {\n\t                chainId = lib$2.BigNumber.from(chainId).toNumber();\n\t            }\n\t            if (typeof (chainId) !== \"number\" && result.v != null) {\n\t                chainId = (result.v - 35) / 2;\n\t                if (chainId < 0) {\n\t                    chainId = 0;\n\t                }\n\t                chainId = parseInt(chainId);\n\t            }\n\t            if (typeof (chainId) !== \"number\") {\n\t                chainId = 0;\n\t            }\n\t            result.chainId = chainId;\n\t        }\n\t        // 0x0000... should actually be null\n\t        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n\t            result.blockHash = null;\n\t        }\n\t        return result;\n\t    };\n\t    Formatter.prototype.transaction = function (value) {\n\t        return (0, lib$e.parse)(value);\n\t    };\n\t    Formatter.prototype.receiptLog = function (value) {\n\t        return Formatter.check(this.formats.receiptLog, value);\n\t    };\n\t    Formatter.prototype.receipt = function (value) {\n\t        var result = Formatter.check(this.formats.receipt, value);\n\t        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n\t        if (result.root != null) {\n\t            if (result.root.length <= 4) {\n\t                // Could be 0x00, 0x0, 0x01 or 0x1\n\t                var value_1 = lib$2.BigNumber.from(result.root).toNumber();\n\t                if (value_1 === 0 || value_1 === 1) {\n\t                    // Make sure if both are specified, they match\n\t                    if (result.status != null && (result.status !== value_1)) {\n\t                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n\t                    }\n\t                    result.status = value_1;\n\t                    delete result.root;\n\t                }\n\t                else {\n\t                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n\t                }\n\t            }\n\t            else if (result.root.length !== 66) {\n\t                // Must be a valid bytes32\n\t                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n\t            }\n\t        }\n\t        if (result.status != null) {\n\t            result.byzantium = true;\n\t        }\n\t        return result;\n\t    };\n\t    Formatter.prototype.topics = function (value) {\n\t        var _this = this;\n\t        if (Array.isArray(value)) {\n\t            return value.map(function (v) { return _this.topics(v); });\n\t        }\n\t        else if (value != null) {\n\t            return this.hash(value, true);\n\t        }\n\t        return null;\n\t    };\n\t    Formatter.prototype.filter = function (value) {\n\t        return Formatter.check(this.formats.filter, value);\n\t    };\n\t    Formatter.prototype.filterLog = function (value) {\n\t        return Formatter.check(this.formats.filterLog, value);\n\t    };\n\t    Formatter.check = function (format, object) {\n\t        var result = {};\n\t        for (var key in format) {\n\t            try {\n\t                var value = format[key](object[key]);\n\t                if (value !== undefined) {\n\t                    result[key] = value;\n\t                }\n\t            }\n\t            catch (error) {\n\t                error.checkKey = key;\n\t                error.checkValue = object[key];\n\t                throw error;\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // if value is null-ish, nullValue is returned\n\t    Formatter.allowNull = function (format, nullValue) {\n\t        return (function (value) {\n\t            if (value == null) {\n\t                return nullValue;\n\t            }\n\t            return format(value);\n\t        });\n\t    };\n\t    // If value is false-ish, replaceValue is returned\n\t    Formatter.allowFalsish = function (format, replaceValue) {\n\t        return (function (value) {\n\t            if (!value) {\n\t                return replaceValue;\n\t            }\n\t            return format(value);\n\t        });\n\t    };\n\t    // Requires an Array satisfying check\n\t    Formatter.arrayOf = function (format) {\n\t        return (function (array) {\n\t            if (!Array.isArray(array)) {\n\t                throw new Error(\"not an array\");\n\t            }\n\t            var result = [];\n\t            array.forEach(function (value) {\n\t                result.push(format(value));\n\t            });\n\t            return result;\n\t        });\n\t    };\n\t    return Formatter;\n\t}());\n\texports.Formatter = Formatter;\n\tfunction isCommunityResourcable(value) {\n\t    return (value && typeof (value.isCommunityResource) === \"function\");\n\t}\n\texports.isCommunityResourcable = isCommunityResourcable;\n\tfunction isCommunityResource(value) {\n\t    return (isCommunityResourcable(value) && value.isCommunityResource());\n\t}\n\texports.isCommunityResource = isCommunityResource;\n\t// Show the throttle message only once\n\tvar throttleMessage = false;\n\tfunction showThrottleMessage() {\n\t    if (throttleMessage) {\n\t        return;\n\t    }\n\t    throttleMessage = true;\n\t    console.log(\"========= NOTICE =========\");\n\t    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n\t    console.log(\"\");\n\t    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n\t    console.log(\"community resource for low-traffic projects and early prototyping.\");\n\t    console.log(\"\");\n\t    console.log(\"While your application will continue to function, we highly recommended\");\n\t    console.log(\"signing up for your own API keys to improve performance, increase your\");\n\t    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n\t    console.log(\"\");\n\t    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n\t    console.log(\"==========================\");\n\t}\n\texports.showThrottleMessage = showThrottleMessage;\n\n\t});\n\n\tvar formatter$1 = /*@__PURE__*/getDefaultExportFromCjs(formatter);\n\n\tvar baseProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tvar __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {\n\t    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.BaseProvider = exports.Resolver = exports.Event = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\tvar bech32_1 = __importDefault(bech32);\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\n\t//////////////////////////////\n\t// Event Serializeing\n\tfunction checkTopic(topic) {\n\t    if (topic == null) {\n\t        return \"null\";\n\t    }\n\t    if ((0, lib$1.hexDataLength)(topic) !== 32) {\n\t        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n\t    }\n\t    return topic.toLowerCase();\n\t}\n\tfunction serializeTopics(topics) {\n\t    // Remove trailing null AND-topics; they are redundant\n\t    topics = topics.slice();\n\t    while (topics.length > 0 && topics[topics.length - 1] == null) {\n\t        topics.pop();\n\t    }\n\t    return topics.map(function (topic) {\n\t        if (Array.isArray(topic)) {\n\t            // Only track unique OR-topics\n\t            var unique_1 = {};\n\t            topic.forEach(function (topic) {\n\t                unique_1[checkTopic(topic)] = true;\n\t            });\n\t            // The order of OR-topics does not matter\n\t            var sorted = Object.keys(unique_1);\n\t            sorted.sort();\n\t            return sorted.join(\"|\");\n\t        }\n\t        else {\n\t            return checkTopic(topic);\n\t        }\n\t    }).join(\"&\");\n\t}\n\tfunction deserializeTopics(data) {\n\t    if (data === \"\") {\n\t        return [];\n\t    }\n\t    return data.split(/&/g).map(function (topic) {\n\t        if (topic === \"\") {\n\t            return [];\n\t        }\n\t        var comps = topic.split(\"|\").map(function (topic) {\n\t            return ((topic === \"null\") ? null : topic);\n\t        });\n\t        return ((comps.length === 1) ? comps[0] : comps);\n\t    });\n\t}\n\tfunction getEventTag(eventName) {\n\t    if (typeof (eventName) === \"string\") {\n\t        eventName = eventName.toLowerCase();\n\t        if ((0, lib$1.hexDataLength)(eventName) === 32) {\n\t            return \"tx:\" + eventName;\n\t        }\n\t        if (eventName.indexOf(\":\") === -1) {\n\t            return eventName;\n\t        }\n\t    }\n\t    else if (Array.isArray(eventName)) {\n\t        return \"filter:*:\" + serializeTopics(eventName);\n\t    }\n\t    else if (lib$b.ForkEvent.isForkEvent(eventName)) {\n\t        logger.warn(\"not implemented\");\n\t        throw new Error(\"not implemented\");\n\t    }\n\t    else if (eventName && typeof (eventName) === \"object\") {\n\t        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n\t    }\n\t    throw new Error(\"invalid event - \" + eventName);\n\t}\n\t//////////////////////////////\n\t// Helper Object\n\tfunction getTime() {\n\t    return (new Date()).getTime();\n\t}\n\tfunction stall(duration) {\n\t    return new Promise(function (resolve) {\n\t        setTimeout(resolve, duration);\n\t    });\n\t}\n\t//////////////////////////////\n\t// Provider Object\n\t/**\n\t *  EventType\n\t *   - \"block\"\n\t *   - \"poll\"\n\t *   - \"didPoll\"\n\t *   - \"pending\"\n\t *   - \"error\"\n\t *   - \"network\"\n\t *   - filter\n\t *   - topics array\n\t *   - transaction hash\n\t */\n\tvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\n\tvar Event = /** @class */ (function () {\n\t    function Event(tag, listener, once) {\n\t        (0, lib$3.defineReadOnly)(this, \"tag\", tag);\n\t        (0, lib$3.defineReadOnly)(this, \"listener\", listener);\n\t        (0, lib$3.defineReadOnly)(this, \"once\", once);\n\t    }\n\t    Object.defineProperty(Event.prototype, \"event\", {\n\t        get: function () {\n\t            switch (this.type) {\n\t                case \"tx\":\n\t                    return this.hash;\n\t                case \"filter\":\n\t                    return this.filter;\n\t            }\n\t            return this.tag;\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Event.prototype, \"type\", {\n\t        get: function () {\n\t            return this.tag.split(\":\")[0];\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Event.prototype, \"hash\", {\n\t        get: function () {\n\t            var comps = this.tag.split(\":\");\n\t            if (comps[0] !== \"tx\") {\n\t                return null;\n\t            }\n\t            return comps[1];\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(Event.prototype, \"filter\", {\n\t        get: function () {\n\t            var comps = this.tag.split(\":\");\n\t            if (comps[0] !== \"filter\") {\n\t                return null;\n\t            }\n\t            var address = comps[1];\n\t            var topics = deserializeTopics(comps[2]);\n\t            var filter = {};\n\t            if (topics.length > 0) {\n\t                filter.topics = topics;\n\t            }\n\t            if (address && address !== \"*\") {\n\t                filter.address = address;\n\t            }\n\t            return filter;\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Event.prototype.pollable = function () {\n\t        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n\t    };\n\t    return Event;\n\t}());\n\texports.Event = Event;\n\t;\n\t// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\tvar coinInfos = {\n\t    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n\t    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n\t    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n\t    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n\t    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n\t    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n\t};\n\tfunction bytes32ify(value) {\n\t    return (0, lib$1.hexZeroPad)(lib$2.BigNumber.from(value).toHexString(), 32);\n\t}\n\t// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\tfunction base58Encode(data) {\n\t    return lib$g.Base58.encode((0, lib$1.concat)([data, (0, lib$1.hexDataSlice)((0, lib$h.sha256)((0, lib$h.sha256)(data)), 0, 4)]));\n\t}\n\tvar matchers = [\n\t    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n\t    new RegExp(\"^(data):(.*)$\", \"i\"),\n\t    new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\"),\n\t    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n\t];\n\tfunction _parseString(result) {\n\t    try {\n\t        return (0, lib$8.toUtf8String)(_parseBytes(result));\n\t    }\n\t    catch (error) { }\n\t    return null;\n\t}\n\tfunction _parseBytes(result) {\n\t    if (result === \"0x\") {\n\t        return null;\n\t    }\n\t    var offset = lib$2.BigNumber.from((0, lib$1.hexDataSlice)(result, 0, 32)).toNumber();\n\t    var length = lib$2.BigNumber.from((0, lib$1.hexDataSlice)(result, offset, offset + 32)).toNumber();\n\t    return (0, lib$1.hexDataSlice)(result, offset + 32, offset + 32 + length);\n\t}\n\tvar Resolver = /** @class */ (function () {\n\t    // The resolvedAddress is only for creating a ReverseLookup resolver\n\t    function Resolver(provider, address, name, resolvedAddress) {\n\t        (0, lib$3.defineReadOnly)(this, \"provider\", provider);\n\t        (0, lib$3.defineReadOnly)(this, \"name\", name);\n\t        (0, lib$3.defineReadOnly)(this, \"address\", provider.formatter.address(address));\n\t        (0, lib$3.defineReadOnly)(this, \"_resolvedAddress\", resolvedAddress);\n\t    }\n\t    Resolver.prototype._fetchBytes = function (selector, parameters) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var tx, _a, error_1;\n\t            return __generator(this, function (_b) {\n\t                switch (_b.label) {\n\t                    case 0:\n\t                        tx = {\n\t                            to: this.address,\n\t                            data: (0, lib$1.hexConcat)([selector, (0, lib$9.namehash)(this.name), (parameters || \"0x\")])\n\t                        };\n\t                        _b.label = 1;\n\t                    case 1:\n\t                        _b.trys.push([1, 3, , 4]);\n\t                        _a = _parseBytes;\n\t                        return [4 /*yield*/, this.provider.call(tx)];\n\t                    case 2: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];\n\t                    case 3:\n\t                        error_1 = _b.sent();\n\t                        if (error_1.code === lib.Logger.errors.CALL_EXCEPTION) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [2 /*return*/, null];\n\t                    case 4: return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Resolver.prototype._getAddress = function (coinType, hexBytes) {\n\t        var coinInfo = coinInfos[String(coinType)];\n\t        if (coinInfo == null) {\n\t            logger.throwError(\"unsupported coin type: \" + coinType, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"getAddress(\" + coinType + \")\"\n\t            });\n\t        }\n\t        if (coinInfo.ilk === \"eth\") {\n\t            return this.provider.formatter.address(hexBytes);\n\t        }\n\t        var bytes = (0, lib$1.arrayify)(hexBytes);\n\t        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\t        if (coinInfo.p2pkh != null) {\n\t            var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\t            if (p2pkh) {\n\t                var length_1 = parseInt(p2pkh[1], 16);\n\t                if (p2pkh[2].length === length_1 * 2 && length_1 >= 1 && length_1 <= 75) {\n\t                    return base58Encode((0, lib$1.concat)([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n\t                }\n\t            }\n\t        }\n\t        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\t        if (coinInfo.p2sh != null) {\n\t            var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\t            if (p2sh) {\n\t                var length_2 = parseInt(p2sh[1], 16);\n\t                if (p2sh[2].length === length_2 * 2 && length_2 >= 1 && length_2 <= 75) {\n\t                    return base58Encode((0, lib$1.concat)([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n\t                }\n\t            }\n\t        }\n\t        // Bech32\n\t        if (coinInfo.prefix != null) {\n\t            var length_3 = bytes[1];\n\t            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\t            var version_1 = bytes[0];\n\t            if (version_1 === 0x00) {\n\t                if (length_3 !== 20 && length_3 !== 32) {\n\t                    version_1 = -1;\n\t                }\n\t            }\n\t            else {\n\t                version_1 = -1;\n\t            }\n\t            if (version_1 >= 0 && bytes.length === 2 + length_3 && length_3 >= 1 && length_3 <= 75) {\n\t                var words = bech32_1.default.toWords(bytes.slice(2));\n\t                words.unshift(version_1);\n\t                return bech32_1.default.encode(coinInfo.prefix, words);\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    Resolver.prototype.getAddress = function (coinType) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var transaction, hexBytes_1, error_2, hexBytes, address;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (coinType == null) {\n\t                            coinType = 60;\n\t                        }\n\t                        if (!(coinType === 60)) return [3 /*break*/, 4];\n\t                        _a.label = 1;\n\t                    case 1:\n\t                        _a.trys.push([1, 3, , 4]);\n\t                        transaction = {\n\t                            to: this.address,\n\t                            data: (\"0x3b3b57de\" + (0, lib$9.namehash)(this.name).substring(2))\n\t                        };\n\t                        return [4 /*yield*/, this.provider.call(transaction)];\n\t                    case 2:\n\t                        hexBytes_1 = _a.sent();\n\t                        // No address\n\t                        if (hexBytes_1 === \"0x\" || hexBytes_1 === lib$7.HashZero) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [2 /*return*/, this.provider.formatter.callAddress(hexBytes_1)];\n\t                    case 3:\n\t                        error_2 = _a.sent();\n\t                        if (error_2.code === lib.Logger.errors.CALL_EXCEPTION) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        throw error_2;\n\t                    case 4: return [4 /*yield*/, this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType))];\n\t                    case 5:\n\t                        hexBytes = _a.sent();\n\t                        // No address\n\t                        if (hexBytes == null || hexBytes === \"0x\") {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        address = this._getAddress(coinType, hexBytes);\n\t                        if (address == null) {\n\t                            logger.throwError(\"invalid or unsupported coin data\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                operation: \"getAddress(\" + coinType + \")\",\n\t                                coinType: coinType,\n\t                                data: hexBytes\n\t                            });\n\t                        }\n\t                        return [2 /*return*/, address];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Resolver.prototype.getAvatar = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var linkage, avatar, i, match, _a, selector, owner, _b, comps, addr, tokenId, tokenOwner, _c, _d, balance, _e, _f, tx, metadataUrl, _g, metadata, error_3;\n\t            return __generator(this, function (_h) {\n\t                switch (_h.label) {\n\t                    case 0:\n\t                        linkage = [];\n\t                        _h.label = 1;\n\t                    case 1:\n\t                        _h.trys.push([1, 19, , 20]);\n\t                        return [4 /*yield*/, this.getText(\"avatar\")];\n\t                    case 2:\n\t                        avatar = _h.sent();\n\t                        if (avatar == null) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        i = 0;\n\t                        _h.label = 3;\n\t                    case 3:\n\t                        if (!(i < matchers.length)) return [3 /*break*/, 18];\n\t                        match = avatar.match(matchers[i]);\n\t                        if (match == null) {\n\t                            return [3 /*break*/, 17];\n\t                        }\n\t                        _a = match[1];\n\t                        switch (_a) {\n\t                            case \"https\": return [3 /*break*/, 4];\n\t                            case \"data\": return [3 /*break*/, 5];\n\t                            case \"ipfs\": return [3 /*break*/, 6];\n\t                            case \"erc721\": return [3 /*break*/, 7];\n\t                            case \"erc1155\": return [3 /*break*/, 7];\n\t                        }\n\t                        return [3 /*break*/, 17];\n\t                    case 4:\n\t                        linkage.push({ type: \"url\", content: avatar });\n\t                        return [2 /*return*/, { linkage: linkage, url: avatar }];\n\t                    case 5:\n\t                        linkage.push({ type: \"data\", content: avatar });\n\t                        return [2 /*return*/, { linkage: linkage, url: avatar }];\n\t                    case 6:\n\t                        linkage.push({ type: \"ipfs\", content: avatar });\n\t                        return [2 /*return*/, { linkage: linkage, url: \"https://gateway.ipfs.io/ipfs/\" + avatar.substring(7) }];\n\t                    case 7:\n\t                        selector = (match[1] === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n\t                        linkage.push({ type: match[1], content: avatar });\n\t                        _b = this._resolvedAddress;\n\t                        if (_b) return [3 /*break*/, 9];\n\t                        return [4 /*yield*/, this.getAddress()];\n\t                    case 8:\n\t                        _b = (_h.sent());\n\t                        _h.label = 9;\n\t                    case 9:\n\t                        owner = (_b);\n\t                        comps = (match[2] || \"\").split(\"/\");\n\t                        if (comps.length !== 2) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [4 /*yield*/, this.provider.formatter.address(comps[0])];\n\t                    case 10:\n\t                        addr = _h.sent();\n\t                        tokenId = (0, lib$1.hexZeroPad)(lib$2.BigNumber.from(comps[1]).toHexString(), 32);\n\t                        if (!(match[1] === \"erc721\")) return [3 /*break*/, 12];\n\t                        _d = (_c = this.provider.formatter).callAddress;\n\t                        return [4 /*yield*/, this.provider.call({\n\t                                to: addr, data: (0, lib$1.hexConcat)([\"0x6352211e\", tokenId])\n\t                            })];\n\t                    case 11:\n\t                        tokenOwner = _d.apply(_c, [_h.sent()]);\n\t                        if (owner !== tokenOwner) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        linkage.push({ type: \"owner\", content: tokenOwner });\n\t                        return [3 /*break*/, 14];\n\t                    case 12:\n\t                        if (!(match[1] === \"erc1155\")) return [3 /*break*/, 14];\n\t                        _f = (_e = lib$2.BigNumber).from;\n\t                        return [4 /*yield*/, this.provider.call({\n\t                                to: addr, data: (0, lib$1.hexConcat)([\"0x00fdd58e\", (0, lib$1.hexZeroPad)(owner, 32), tokenId])\n\t                            })];\n\t                    case 13:\n\t                        balance = _f.apply(_e, [_h.sent()]);\n\t                        if (balance.isZero()) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        linkage.push({ type: \"balance\", content: balance.toString() });\n\t                        _h.label = 14;\n\t                    case 14:\n\t                        tx = {\n\t                            to: this.provider.formatter.address(comps[0]),\n\t                            data: (0, lib$1.hexConcat)([selector, tokenId])\n\t                        };\n\t                        _g = _parseString;\n\t                        return [4 /*yield*/, this.provider.call(tx)];\n\t                    case 15:\n\t                        metadataUrl = _g.apply(void 0, [_h.sent()]);\n\t                        if (metadataUrl == null) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\t                        // ERC-1155 allows a generic {id} in the URL\n\t                        if (match[1] === \"erc1155\") {\n\t                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n\t                        }\n\t                        return [4 /*yield*/, (0, lib$q.fetchJson)(metadataUrl)];\n\t                    case 16:\n\t                        metadata = _h.sent();\n\t                        // Pull the image URL out\n\t                        if (!metadata || typeof (metadata.image) !== \"string\" || !metadata.image.match(/^https:\\/\\//i)) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\t                        linkage.push({ type: \"url\", content: metadata.image });\n\t                        return [2 /*return*/, { linkage: linkage, url: metadata.image }];\n\t                    case 17:\n\t                        i++;\n\t                        return [3 /*break*/, 3];\n\t                    case 18: return [3 /*break*/, 20];\n\t                    case 19:\n\t                        error_3 = _h.sent();\n\t                        return [3 /*break*/, 20];\n\t                    case 20: return [2 /*return*/, null];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Resolver.prototype.getContentHash = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var hexBytes, ipfs, length_4, swarm;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this._fetchBytes(\"0xbc1c58d1\")];\n\t                    case 1:\n\t                        hexBytes = _a.sent();\n\t                        // No contenthash\n\t                        if (hexBytes == null || hexBytes === \"0x\") {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\t                        if (ipfs) {\n\t                            length_4 = parseInt(ipfs[3], 16);\n\t                            if (ipfs[4].length === length_4 * 2) {\n\t                                return [2 /*return*/, \"ipfs:/\\/\" + lib$g.Base58.encode(\"0x\" + ipfs[1])];\n\t                            }\n\t                        }\n\t                        swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\t                        if (swarm) {\n\t                            if (swarm[1].length === (32 * 2)) {\n\t                                return [2 /*return*/, \"bzz:/\\/\" + swarm[1]];\n\t                            }\n\t                        }\n\t                        return [2 /*return*/, logger.throwError(\"invalid or unsupported content hash data\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                operation: \"getContentHash()\",\n\t                                data: hexBytes\n\t                            })];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Resolver.prototype.getText = function (key) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var keyBytes, hexBytes;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        keyBytes = (0, lib$8.toUtf8Bytes)(key);\n\t                        // The nodehash consumes the first slot, so the string pointer targets\n\t                        // offset 64, with the length at offset 64 and data starting at offset 96\n\t                        keyBytes = (0, lib$1.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n\t                        // Pad to word-size (32 bytes)\n\t                        if ((keyBytes.length % 32) !== 0) {\n\t                            keyBytes = (0, lib$1.concat)([keyBytes, (0, lib$1.hexZeroPad)(\"0x\", 32 - (key.length % 32))]);\n\t                        }\n\t                        return [4 /*yield*/, this._fetchBytes(\"0x59d1d43c\", (0, lib$1.hexlify)(keyBytes))];\n\t                    case 1:\n\t                        hexBytes = _a.sent();\n\t                        if (hexBytes == null || hexBytes === \"0x\") {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [2 /*return*/, (0, lib$8.toUtf8String)(hexBytes)];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    return Resolver;\n\t}());\n\texports.Resolver = Resolver;\n\tvar defaultFormatter = null;\n\tvar nextPollId = 1;\n\tvar BaseProvider = /** @class */ (function (_super) {\n\t    __extends(BaseProvider, _super);\n\t    /**\n\t     *  ready\n\t     *\n\t     *  A Promise<Network> that resolves only once the provider is ready.\n\t     *\n\t     *  Sub-classes that call the super with a network without a chainId\n\t     *  MUST set this. Standard named networks have a known chainId.\n\t     *\n\t     */\n\t    function BaseProvider(network) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, lib$b.Provider);\n\t        _this = _super.call(this) || this;\n\t        // Events being listened to\n\t        _this._events = [];\n\t        _this._emitted = { block: -2 };\n\t        _this.formatter = _newTarget.getFormatter();\n\t        // If network is any, this Provider allows the underlying\n\t        // network to change dynamically, and we auto-detect the\n\t        // current network\n\t        (0, lib$3.defineReadOnly)(_this, \"anyNetwork\", (network === \"any\"));\n\t        if (_this.anyNetwork) {\n\t            network = _this.detectNetwork();\n\t        }\n\t        if (network instanceof Promise) {\n\t            _this._networkPromise = network;\n\t            // Squash any \"unhandled promise\" errors; that do not need to be handled\n\t            network.catch(function (error) { });\n\t            // Trigger initial network setting (async)\n\t            _this._ready().catch(function (error) { });\n\t        }\n\t        else {\n\t            var knownNetwork = (0, lib$3.getStatic)(_newTarget, \"getNetwork\")(network);\n\t            if (knownNetwork) {\n\t                (0, lib$3.defineReadOnly)(_this, \"_network\", knownNetwork);\n\t                _this.emit(\"network\", knownNetwork, null);\n\t            }\n\t            else {\n\t                logger.throwArgumentError(\"invalid network\", \"network\", network);\n\t            }\n\t        }\n\t        _this._maxInternalBlockNumber = -1024;\n\t        _this._lastBlockNumber = -2;\n\t        _this._pollingInterval = 4000;\n\t        _this._fastQueryDate = 0;\n\t        return _this;\n\t    }\n\t    BaseProvider.prototype._ready = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var network, error_4;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (!(this._network == null)) return [3 /*break*/, 7];\n\t                        network = null;\n\t                        if (!this._networkPromise) return [3 /*break*/, 4];\n\t                        _a.label = 1;\n\t                    case 1:\n\t                        _a.trys.push([1, 3, , 4]);\n\t                        return [4 /*yield*/, this._networkPromise];\n\t                    case 2:\n\t                        network = _a.sent();\n\t                        return [3 /*break*/, 4];\n\t                    case 3:\n\t                        error_4 = _a.sent();\n\t                        return [3 /*break*/, 4];\n\t                    case 4:\n\t                        if (!(network == null)) return [3 /*break*/, 6];\n\t                        return [4 /*yield*/, this.detectNetwork()];\n\t                    case 5:\n\t                        network = _a.sent();\n\t                        _a.label = 6;\n\t                    case 6:\n\t                        // This should never happen; every Provider sub-class should have\n\t                        // suggested a network by here (or have thrown).\n\t                        if (!network) {\n\t                            logger.throwError(\"no network detected\", lib.Logger.errors.UNKNOWN_ERROR, {});\n\t                        }\n\t                        // Possible this call stacked so do not call defineReadOnly again\n\t                        if (this._network == null) {\n\t                            if (this.anyNetwork) {\n\t                                this._network = network;\n\t                            }\n\t                            else {\n\t                                (0, lib$3.defineReadOnly)(this, \"_network\", network);\n\t                            }\n\t                            this.emit(\"network\", network, null);\n\t                        }\n\t                        _a.label = 7;\n\t                    case 7: return [2 /*return*/, this._network];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Object.defineProperty(BaseProvider.prototype, \"ready\", {\n\t        // This will always return the most recently established network.\n\t        // For \"any\", this can change (a \"network\" event is emitted before\n\t        // any change is reflected); otherwise this cannot change\n\t        get: function () {\n\t            var _this = this;\n\t            return (0, lib$q.poll)(function () {\n\t                return _this._ready().then(function (network) {\n\t                    return network;\n\t                }, function (error) {\n\t                    // If the network isn't running yet, we will wait\n\t                    if (error.code === lib.Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n\t                        return undefined;\n\t                    }\n\t                    throw error;\n\t                });\n\t            });\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    // @TODO: Remove this and just create a singleton formatter\n\t    BaseProvider.getFormatter = function () {\n\t        if (defaultFormatter == null) {\n\t            defaultFormatter = new formatter.Formatter();\n\t        }\n\t        return defaultFormatter;\n\t    };\n\t    // @TODO: Remove this and just use getNetwork\n\t    BaseProvider.getNetwork = function (network) {\n\t        return (0, lib$o.getNetwork)((network == null) ? \"homestead\" : network);\n\t    };\n\t    // Fetches the blockNumber, but will reuse any result that is less\n\t    // than maxAge old or has been requested since the last request\n\t    BaseProvider.prototype._getInternalBlockNumber = function (maxAge) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var internalBlockNumber, result, error_5, reqTime, checkInternalBlockNumber;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this._ready()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        if (!(maxAge > 0)) return [3 /*break*/, 7];\n\t                        _a.label = 2;\n\t                    case 2:\n\t                        if (!this._internalBlockNumber) return [3 /*break*/, 7];\n\t                        internalBlockNumber = this._internalBlockNumber;\n\t                        _a.label = 3;\n\t                    case 3:\n\t                        _a.trys.push([3, 5, , 6]);\n\t                        return [4 /*yield*/, internalBlockNumber];\n\t                    case 4:\n\t                        result = _a.sent();\n\t                        if ((getTime() - result.respTime) <= maxAge) {\n\t                            return [2 /*return*/, result.blockNumber];\n\t                        }\n\t                        // Too old; fetch a new value\n\t                        return [3 /*break*/, 7];\n\t                    case 5:\n\t                        error_5 = _a.sent();\n\t                        // The fetch rejected; if we are the first to get the\n\t                        // rejection, drop through so we replace it with a new\n\t                        // fetch; all others blocked will then get that fetch\n\t                        // which won't match the one they \"remembered\" and loop\n\t                        if (this._internalBlockNumber === internalBlockNumber) {\n\t                            return [3 /*break*/, 7];\n\t                        }\n\t                        return [3 /*break*/, 6];\n\t                    case 6: return [3 /*break*/, 2];\n\t                    case 7:\n\t                        reqTime = getTime();\n\t                        checkInternalBlockNumber = (0, lib$3.resolveProperties)({\n\t                            blockNumber: this.perform(\"getBlockNumber\", {}),\n\t                            networkError: this.getNetwork().then(function (network) { return (null); }, function (error) { return (error); })\n\t                        }).then(function (_a) {\n\t                            var blockNumber = _a.blockNumber, networkError = _a.networkError;\n\t                            if (networkError) {\n\t                                // Unremember this bad internal block number\n\t                                if (_this._internalBlockNumber === checkInternalBlockNumber) {\n\t                                    _this._internalBlockNumber = null;\n\t                                }\n\t                                throw networkError;\n\t                            }\n\t                            var respTime = getTime();\n\t                            blockNumber = lib$2.BigNumber.from(blockNumber).toNumber();\n\t                            if (blockNumber < _this._maxInternalBlockNumber) {\n\t                                blockNumber = _this._maxInternalBlockNumber;\n\t                            }\n\t                            _this._maxInternalBlockNumber = blockNumber;\n\t                            _this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\t                            return { blockNumber: blockNumber, reqTime: reqTime, respTime: respTime };\n\t                        });\n\t                        this._internalBlockNumber = checkInternalBlockNumber;\n\t                        // Swallow unhandled exceptions; if needed they are handled else where\n\t                        checkInternalBlockNumber.catch(function (error) {\n\t                            // Don't null the dead (rejected) fetch, if it has already been updated\n\t                            if (_this._internalBlockNumber === checkInternalBlockNumber) {\n\t                                _this._internalBlockNumber = null;\n\t                            }\n\t                        });\n\t                        return [4 /*yield*/, checkInternalBlockNumber];\n\t                    case 8: return [2 /*return*/, (_a.sent()).blockNumber];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.poll = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var pollId, runners, blockNumber, error_6, i;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        pollId = nextPollId++;\n\t                        runners = [];\n\t                        blockNumber = null;\n\t                        _a.label = 1;\n\t                    case 1:\n\t                        _a.trys.push([1, 3, , 4]);\n\t                        return [4 /*yield*/, this._getInternalBlockNumber(100 + this.pollingInterval / 2)];\n\t                    case 2:\n\t                        blockNumber = _a.sent();\n\t                        return [3 /*break*/, 4];\n\t                    case 3:\n\t                        error_6 = _a.sent();\n\t                        this.emit(\"error\", error_6);\n\t                        return [2 /*return*/];\n\t                    case 4:\n\t                        this._setFastBlockNumber(blockNumber);\n\t                        // Emit a poll event after we have the latest (fast) block number\n\t                        this.emit(\"poll\", pollId, blockNumber);\n\t                        // If the block has not changed, meh.\n\t                        if (blockNumber === this._lastBlockNumber) {\n\t                            this.emit(\"didPoll\", pollId);\n\t                            return [2 /*return*/];\n\t                        }\n\t                        // First polling cycle, trigger a \"block\" events\n\t                        if (this._emitted.block === -2) {\n\t                            this._emitted.block = blockNumber - 1;\n\t                        }\n\t                        if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n\t                            logger.warn(\"network block skew detected; skipping block events (emitted=\" + this._emitted.block + \" blockNumber\" + blockNumber + \")\");\n\t                            this.emit(\"error\", logger.makeError(\"network block skew detected\", lib.Logger.errors.NETWORK_ERROR, {\n\t                                blockNumber: blockNumber,\n\t                                event: \"blockSkew\",\n\t                                previousBlockNumber: this._emitted.block\n\t                            }));\n\t                            this.emit(\"block\", blockNumber);\n\t                        }\n\t                        else {\n\t                            // Notify all listener for each block that has passed\n\t                            for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n\t                                this.emit(\"block\", i);\n\t                            }\n\t                        }\n\t                        // The emitted block was updated, check for obsolete events\n\t                        if (this._emitted.block !== blockNumber) {\n\t                            this._emitted.block = blockNumber;\n\t                            Object.keys(this._emitted).forEach(function (key) {\n\t                                // The block event does not expire\n\t                                if (key === \"block\") {\n\t                                    return;\n\t                                }\n\t                                // The block we were at when we emitted this event\n\t                                var eventBlockNumber = _this._emitted[key];\n\t                                // We cannot garbage collect pending transactions or blocks here\n\t                                // They should be garbage collected by the Provider when setting\n\t                                // \"pending\" events\n\t                                if (eventBlockNumber === \"pending\") {\n\t                                    return;\n\t                                }\n\t                                // Evict any transaction hashes or block hashes over 12 blocks\n\t                                // old, since they should not return null anyways\n\t                                if (blockNumber - eventBlockNumber > 12) {\n\t                                    delete _this._emitted[key];\n\t                                }\n\t                            });\n\t                        }\n\t                        // First polling cycle\n\t                        if (this._lastBlockNumber === -2) {\n\t                            this._lastBlockNumber = blockNumber - 1;\n\t                        }\n\t                        // Find all transaction hashes we are waiting on\n\t                        this._events.forEach(function (event) {\n\t                            switch (event.type) {\n\t                                case \"tx\": {\n\t                                    var hash_2 = event.hash;\n\t                                    var runner = _this.getTransactionReceipt(hash_2).then(function (receipt) {\n\t                                        if (!receipt || receipt.blockNumber == null) {\n\t                                            return null;\n\t                                        }\n\t                                        _this._emitted[\"t:\" + hash_2] = receipt.blockNumber;\n\t                                        _this.emit(hash_2, receipt);\n\t                                        return null;\n\t                                    }).catch(function (error) { _this.emit(\"error\", error); });\n\t                                    runners.push(runner);\n\t                                    break;\n\t                                }\n\t                                case \"filter\": {\n\t                                    var filter_1 = event.filter;\n\t                                    filter_1.fromBlock = _this._lastBlockNumber + 1;\n\t                                    filter_1.toBlock = blockNumber;\n\t                                    var runner = _this.getLogs(filter_1).then(function (logs) {\n\t                                        if (logs.length === 0) {\n\t                                            return;\n\t                                        }\n\t                                        logs.forEach(function (log) {\n\t                                            _this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n\t                                            _this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\t                                            _this.emit(filter_1, log);\n\t                                        });\n\t                                    }).catch(function (error) { _this.emit(\"error\", error); });\n\t                                    runners.push(runner);\n\t                                    break;\n\t                                }\n\t                            }\n\t                        });\n\t                        this._lastBlockNumber = blockNumber;\n\t                        // Once all events for this loop have been processed, emit \"didPoll\"\n\t                        Promise.all(runners).then(function () {\n\t                            _this.emit(\"didPoll\", pollId);\n\t                        }).catch(function (error) { _this.emit(\"error\", error); });\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    // Deprecated; do not use this\n\t    BaseProvider.prototype.resetEventsBlock = function (blockNumber) {\n\t        this._lastBlockNumber = blockNumber - 1;\n\t        if (this.polling) {\n\t            this.poll();\n\t        }\n\t    };\n\t    Object.defineProperty(BaseProvider.prototype, \"network\", {\n\t        get: function () {\n\t            return this._network;\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    // This method should query the network if the underlying network\n\t    // can change, such as when connected to a JSON-RPC backend\n\t    BaseProvider.prototype.detectNetwork = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                return [2 /*return*/, logger.throwError(\"provider does not support network detection\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                        operation: \"provider.detectNetwork\"\n\t                    })];\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getNetwork = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var network, currentNetwork, error;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this._ready()];\n\t                    case 1:\n\t                        network = _a.sent();\n\t                        return [4 /*yield*/, this.detectNetwork()];\n\t                    case 2:\n\t                        currentNetwork = _a.sent();\n\t                        if (!(network.chainId !== currentNetwork.chainId)) return [3 /*break*/, 5];\n\t                        if (!this.anyNetwork) return [3 /*break*/, 4];\n\t                        this._network = currentNetwork;\n\t                        // Reset all internal block number guards and caches\n\t                        this._lastBlockNumber = -2;\n\t                        this._fastBlockNumber = null;\n\t                        this._fastBlockNumberPromise = null;\n\t                        this._fastQueryDate = 0;\n\t                        this._emitted.block = -2;\n\t                        this._maxInternalBlockNumber = -1024;\n\t                        this._internalBlockNumber = null;\n\t                        // The \"network\" event MUST happen before this method resolves\n\t                        // so any events have a chance to unregister, so we stall an\n\t                        // additional event loop before returning from /this/ call\n\t                        this.emit(\"network\", currentNetwork, network);\n\t                        return [4 /*yield*/, stall(0)];\n\t                    case 3:\n\t                        _a.sent();\n\t                        return [2 /*return*/, this._network];\n\t                    case 4:\n\t                        error = logger.makeError(\"underlying network changed\", lib.Logger.errors.NETWORK_ERROR, {\n\t                            event: \"changed\",\n\t                            network: network,\n\t                            detectedNetwork: currentNetwork\n\t                        });\n\t                        this.emit(\"error\", error);\n\t                        throw error;\n\t                    case 5: return [2 /*return*/, network];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    Object.defineProperty(BaseProvider.prototype, \"blockNumber\", {\n\t        get: function () {\n\t            var _this = this;\n\t            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n\t                _this._setFastBlockNumber(blockNumber);\n\t            }, function (error) { });\n\t            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(BaseProvider.prototype, \"polling\", {\n\t        get: function () {\n\t            return (this._poller != null);\n\t        },\n\t        set: function (value) {\n\t            var _this = this;\n\t            if (value && !this._poller) {\n\t                this._poller = setInterval(function () { _this.poll(); }, this.pollingInterval);\n\t                if (!this._bootstrapPoll) {\n\t                    this._bootstrapPoll = setTimeout(function () {\n\t                        _this.poll();\n\t                        // We block additional polls until the polling interval\n\t                        // is done, to prevent overwhelming the poll function\n\t                        _this._bootstrapPoll = setTimeout(function () {\n\t                            // If polling was disabled, something may require a poke\n\t                            // since starting the bootstrap poll and it was disabled\n\t                            if (!_this._poller) {\n\t                                _this.poll();\n\t                            }\n\t                            // Clear out the bootstrap so we can do another\n\t                            _this._bootstrapPoll = null;\n\t                        }, _this.pollingInterval);\n\t                    }, 0);\n\t                }\n\t            }\n\t            else if (!value && this._poller) {\n\t                clearInterval(this._poller);\n\t                this._poller = null;\n\t            }\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(BaseProvider.prototype, \"pollingInterval\", {\n\t        get: function () {\n\t            return this._pollingInterval;\n\t        },\n\t        set: function (value) {\n\t            var _this = this;\n\t            if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n\t                throw new Error(\"invalid polling interval\");\n\t            }\n\t            this._pollingInterval = value;\n\t            if (this._poller) {\n\t                clearInterval(this._poller);\n\t                this._poller = setInterval(function () { _this.poll(); }, this._pollingInterval);\n\t            }\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    BaseProvider.prototype._getFastBlockNumber = function () {\n\t        var _this = this;\n\t        var now = getTime();\n\t        // Stale block number, request a newer value\n\t        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n\t            this._fastQueryDate = now;\n\t            this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n\t                if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {\n\t                    _this._fastBlockNumber = blockNumber;\n\t                }\n\t                return _this._fastBlockNumber;\n\t            });\n\t        }\n\t        return this._fastBlockNumberPromise;\n\t    };\n\t    BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {\n\t        // Older block, maybe a stale request\n\t        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n\t            return;\n\t        }\n\t        // Update the time we updated the blocknumber\n\t        this._fastQueryDate = getTime();\n\t        // Newer block number, use  it\n\t        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n\t            this._fastBlockNumber = blockNumber;\n\t            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n\t        }\n\t    };\n\t    BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations, timeout) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                return [2 /*return*/, this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null)];\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype._waitForTransaction = function (transactionHash, confirmations, timeout, replaceable) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var receipt;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getTransactionReceipt(transactionHash)];\n\t                    case 1:\n\t                        receipt = _a.sent();\n\t                        // Receipt is already good\n\t                        if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n\t                            return [2 /*return*/, receipt];\n\t                        }\n\t                        // Poll until the receipt is good...\n\t                        return [2 /*return*/, new Promise(function (resolve, reject) {\n\t                                var cancelFuncs = [];\n\t                                var done = false;\n\t                                var alreadyDone = function () {\n\t                                    if (done) {\n\t                                        return true;\n\t                                    }\n\t                                    done = true;\n\t                                    cancelFuncs.forEach(function (func) { func(); });\n\t                                    return false;\n\t                                };\n\t                                var minedHandler = function (receipt) {\n\t                                    if (receipt.confirmations < confirmations) {\n\t                                        return;\n\t                                    }\n\t                                    if (alreadyDone()) {\n\t                                        return;\n\t                                    }\n\t                                    resolve(receipt);\n\t                                };\n\t                                _this.on(transactionHash, minedHandler);\n\t                                cancelFuncs.push(function () { _this.removeListener(transactionHash, minedHandler); });\n\t                                if (replaceable) {\n\t                                    var lastBlockNumber_1 = replaceable.startBlock;\n\t                                    var scannedBlock_1 = null;\n\t                                    var replaceHandler_1 = function (blockNumber) { return __awaiter(_this, void 0, void 0, function () {\n\t                                        var _this = this;\n\t                                        return __generator(this, function (_a) {\n\t                                            switch (_a.label) {\n\t                                                case 0:\n\t                                                    if (done) {\n\t                                                        return [2 /*return*/];\n\t                                                    }\n\t                                                    // Wait 1 second; this is only used in the case of a fault, so\n\t                                                    // we will trade off a little bit of latency for more consistent\n\t                                                    // results and fewer JSON-RPC calls\n\t                                                    return [4 /*yield*/, stall(1000)];\n\t                                                case 1:\n\t                                                    // Wait 1 second; this is only used in the case of a fault, so\n\t                                                    // we will trade off a little bit of latency for more consistent\n\t                                                    // results and fewer JSON-RPC calls\n\t                                                    _a.sent();\n\t                                                    this.getTransactionCount(replaceable.from).then(function (nonce) { return __awaiter(_this, void 0, void 0, function () {\n\t                                                        var mined, block, ti, tx, receipt_1, reason;\n\t                                                        return __generator(this, function (_a) {\n\t                                                            switch (_a.label) {\n\t                                                                case 0:\n\t                                                                    if (done) {\n\t                                                                        return [2 /*return*/];\n\t                                                                    }\n\t                                                                    if (!(nonce <= replaceable.nonce)) return [3 /*break*/, 1];\n\t                                                                    lastBlockNumber_1 = blockNumber;\n\t                                                                    return [3 /*break*/, 9];\n\t                                                                case 1: return [4 /*yield*/, this.getTransaction(transactionHash)];\n\t                                                                case 2:\n\t                                                                    mined = _a.sent();\n\t                                                                    if (mined && mined.blockNumber != null) {\n\t                                                                        return [2 /*return*/];\n\t                                                                    }\n\t                                                                    // First time scanning. We start a little earlier for some\n\t                                                                    // wiggle room here to handle the eventually consistent nature\n\t                                                                    // of blockchain (e.g. the getTransactionCount was for a\n\t                                                                    // different block)\n\t                                                                    if (scannedBlock_1 == null) {\n\t                                                                        scannedBlock_1 = lastBlockNumber_1 - 3;\n\t                                                                        if (scannedBlock_1 < replaceable.startBlock) {\n\t                                                                            scannedBlock_1 = replaceable.startBlock;\n\t                                                                        }\n\t                                                                    }\n\t                                                                    _a.label = 3;\n\t                                                                case 3:\n\t                                                                    if (!(scannedBlock_1 <= blockNumber)) return [3 /*break*/, 9];\n\t                                                                    if (done) {\n\t                                                                        return [2 /*return*/];\n\t                                                                    }\n\t                                                                    return [4 /*yield*/, this.getBlockWithTransactions(scannedBlock_1)];\n\t                                                                case 4:\n\t                                                                    block = _a.sent();\n\t                                                                    ti = 0;\n\t                                                                    _a.label = 5;\n\t                                                                case 5:\n\t                                                                    if (!(ti < block.transactions.length)) return [3 /*break*/, 8];\n\t                                                                    tx = block.transactions[ti];\n\t                                                                    // Successfully mined!\n\t                                                                    if (tx.hash === transactionHash) {\n\t                                                                        return [2 /*return*/];\n\t                                                                    }\n\t                                                                    if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) return [3 /*break*/, 7];\n\t                                                                    if (done) {\n\t                                                                        return [2 /*return*/];\n\t                                                                    }\n\t                                                                    return [4 /*yield*/, this.waitForTransaction(tx.hash, confirmations)];\n\t                                                                case 6:\n\t                                                                    receipt_1 = _a.sent();\n\t                                                                    // Already resolved or rejected (prolly a timeout)\n\t                                                                    if (alreadyDone()) {\n\t                                                                        return [2 /*return*/];\n\t                                                                    }\n\t                                                                    reason = \"replaced\";\n\t                                                                    if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n\t                                                                        reason = \"repriced\";\n\t                                                                    }\n\t                                                                    else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n\t                                                                        reason = \"cancelled\";\n\t                                                                    }\n\t                                                                    // Explain why we were replaced\n\t                                                                    reject(logger.makeError(\"transaction was replaced\", lib.Logger.errors.TRANSACTION_REPLACED, {\n\t                                                                        cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n\t                                                                        reason: reason,\n\t                                                                        replacement: this._wrapTransaction(tx),\n\t                                                                        hash: transactionHash,\n\t                                                                        receipt: receipt_1\n\t                                                                    }));\n\t                                                                    return [2 /*return*/];\n\t                                                                case 7:\n\t                                                                    ti++;\n\t                                                                    return [3 /*break*/, 5];\n\t                                                                case 8:\n\t                                                                    scannedBlock_1++;\n\t                                                                    return [3 /*break*/, 3];\n\t                                                                case 9:\n\t                                                                    if (done) {\n\t                                                                        return [2 /*return*/];\n\t                                                                    }\n\t                                                                    this.once(\"block\", replaceHandler_1);\n\t                                                                    return [2 /*return*/];\n\t                                                            }\n\t                                                        });\n\t                                                    }); }, function (error) {\n\t                                                        if (done) {\n\t                                                            return;\n\t                                                        }\n\t                                                        _this.once(\"block\", replaceHandler_1);\n\t                                                    });\n\t                                                    return [2 /*return*/];\n\t                                            }\n\t                                        });\n\t                                    }); };\n\t                                    if (done) {\n\t                                        return;\n\t                                    }\n\t                                    _this.once(\"block\", replaceHandler_1);\n\t                                    cancelFuncs.push(function () {\n\t                                        _this.removeListener(\"block\", replaceHandler_1);\n\t                                    });\n\t                                }\n\t                                if (typeof (timeout) === \"number\" && timeout > 0) {\n\t                                    var timer_1 = setTimeout(function () {\n\t                                        if (alreadyDone()) {\n\t                                            return;\n\t                                        }\n\t                                        reject(logger.makeError(\"timeout exceeded\", lib.Logger.errors.TIMEOUT, { timeout: timeout }));\n\t                                    }, timeout);\n\t                                    if (timer_1.unref) {\n\t                                        timer_1.unref();\n\t                                    }\n\t                                    cancelFuncs.push(function () { clearTimeout(timer_1); });\n\t                                }\n\t                            })];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getBlockNumber = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                return [2 /*return*/, this._getInternalBlockNumber(0)];\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getGasPrice = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var result;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, this.perform(\"getGasPrice\", {})];\n\t                    case 2:\n\t                        result = _a.sent();\n\t                        try {\n\t                            return [2 /*return*/, lib$2.BigNumber.from(result)];\n\t                        }\n\t                        catch (error) {\n\t                            return [2 /*return*/, logger.throwError(\"bad result from backend\", lib.Logger.errors.SERVER_ERROR, {\n\t                                    method: \"getGasPrice\",\n\t                                    result: result,\n\t                                    error: error\n\t                                })];\n\t                        }\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params, result;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)({\n\t                                address: this._getAddress(addressOrName),\n\t                                blockTag: this._getBlockTag(blockTag)\n\t                            })];\n\t                    case 2:\n\t                        params = _a.sent();\n\t                        return [4 /*yield*/, this.perform(\"getBalance\", params)];\n\t                    case 3:\n\t                        result = _a.sent();\n\t                        try {\n\t                            return [2 /*return*/, lib$2.BigNumber.from(result)];\n\t                        }\n\t                        catch (error) {\n\t                            return [2 /*return*/, logger.throwError(\"bad result from backend\", lib.Logger.errors.SERVER_ERROR, {\n\t                                    method: \"getBalance\",\n\t                                    params: params,\n\t                                    result: result,\n\t                                    error: error\n\t                                })];\n\t                        }\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params, result;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)({\n\t                                address: this._getAddress(addressOrName),\n\t                                blockTag: this._getBlockTag(blockTag)\n\t                            })];\n\t                    case 2:\n\t                        params = _a.sent();\n\t                        return [4 /*yield*/, this.perform(\"getTransactionCount\", params)];\n\t                    case 3:\n\t                        result = _a.sent();\n\t                        try {\n\t                            return [2 /*return*/, lib$2.BigNumber.from(result).toNumber()];\n\t                        }\n\t                        catch (error) {\n\t                            return [2 /*return*/, logger.throwError(\"bad result from backend\", lib.Logger.errors.SERVER_ERROR, {\n\t                                    method: \"getTransactionCount\",\n\t                                    params: params,\n\t                                    result: result,\n\t                                    error: error\n\t                                })];\n\t                        }\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getCode = function (addressOrName, blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params, result;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)({\n\t                                address: this._getAddress(addressOrName),\n\t                                blockTag: this._getBlockTag(blockTag)\n\t                            })];\n\t                    case 2:\n\t                        params = _a.sent();\n\t                        return [4 /*yield*/, this.perform(\"getCode\", params)];\n\t                    case 3:\n\t                        result = _a.sent();\n\t                        try {\n\t                            return [2 /*return*/, (0, lib$1.hexlify)(result)];\n\t                        }\n\t                        catch (error) {\n\t                            return [2 /*return*/, logger.throwError(\"bad result from backend\", lib.Logger.errors.SERVER_ERROR, {\n\t                                    method: \"getCode\",\n\t                                    params: params,\n\t                                    result: result,\n\t                                    error: error\n\t                                })];\n\t                        }\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params, result;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)({\n\t                                address: this._getAddress(addressOrName),\n\t                                blockTag: this._getBlockTag(blockTag),\n\t                                position: Promise.resolve(position).then(function (p) { return (0, lib$1.hexValue)(p); })\n\t                            })];\n\t                    case 2:\n\t                        params = _a.sent();\n\t                        return [4 /*yield*/, this.perform(\"getStorageAt\", params)];\n\t                    case 3:\n\t                        result = _a.sent();\n\t                        try {\n\t                            return [2 /*return*/, (0, lib$1.hexlify)(result)];\n\t                        }\n\t                        catch (error) {\n\t                            return [2 /*return*/, logger.throwError(\"bad result from backend\", lib.Logger.errors.SERVER_ERROR, {\n\t                                    method: \"getStorageAt\",\n\t                                    params: params,\n\t                                    result: result,\n\t                                    error: error\n\t                                })];\n\t                        }\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    // This should be called by any subclass wrapping a TransactionResponse\n\t    BaseProvider.prototype._wrapTransaction = function (tx, hash, startBlock) {\n\t        var _this = this;\n\t        if (hash != null && (0, lib$1.hexDataLength)(hash) !== 32) {\n\t            throw new Error(\"invalid response - sendTransaction\");\n\t        }\n\t        var result = tx;\n\t        // Check the hash we expect is the same as the hash the server reported\n\t        if (hash != null && tx.hash !== hash) {\n\t            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", lib.Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n\t        }\n\t        result.wait = function (confirms, timeout) { return __awaiter(_this, void 0, void 0, function () {\n\t            var replacement, receipt;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (confirms == null) {\n\t                            confirms = 1;\n\t                        }\n\t                        if (timeout == null) {\n\t                            timeout = 0;\n\t                        }\n\t                        replacement = undefined;\n\t                        if (confirms !== 0 && startBlock != null) {\n\t                            replacement = {\n\t                                data: tx.data,\n\t                                from: tx.from,\n\t                                nonce: tx.nonce,\n\t                                to: tx.to,\n\t                                value: tx.value,\n\t                                startBlock: startBlock\n\t                            };\n\t                        }\n\t                        return [4 /*yield*/, this._waitForTransaction(tx.hash, confirms, timeout, replacement)];\n\t                    case 1:\n\t                        receipt = _a.sent();\n\t                        if (receipt == null && confirms === 0) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        // No longer pending, allow the polling loop to garbage collect this\n\t                        this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\t                        if (receipt.status === 0) {\n\t                            logger.throwError(\"transaction failed\", lib.Logger.errors.CALL_EXCEPTION, {\n\t                                transactionHash: tx.hash,\n\t                                transaction: tx,\n\t                                receipt: receipt\n\t                            });\n\t                        }\n\t                        return [2 /*return*/, receipt];\n\t                }\n\t            });\n\t        }); };\n\t        return result;\n\t    };\n\t    BaseProvider.prototype.sendTransaction = function (signedTransaction) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var hexTx, tx, blockNumber, hash, error_7;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, Promise.resolve(signedTransaction).then(function (t) { return (0, lib$1.hexlify)(t); })];\n\t                    case 2:\n\t                        hexTx = _a.sent();\n\t                        tx = this.formatter.transaction(signedTransaction);\n\t                        if (tx.confirmations == null) {\n\t                            tx.confirmations = 0;\n\t                        }\n\t                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\t                    case 3:\n\t                        blockNumber = _a.sent();\n\t                        _a.label = 4;\n\t                    case 4:\n\t                        _a.trys.push([4, 6, , 7]);\n\t                        return [4 /*yield*/, this.perform(\"sendTransaction\", { signedTransaction: hexTx })];\n\t                    case 5:\n\t                        hash = _a.sent();\n\t                        return [2 /*return*/, this._wrapTransaction(tx, hash, blockNumber)];\n\t                    case 6:\n\t                        error_7 = _a.sent();\n\t                        error_7.transaction = tx;\n\t                        error_7.transactionHash = tx.hash;\n\t                        throw error_7;\n\t                    case 7: return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype._getTransactionRequest = function (transaction) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var values, tx, _a, _b;\n\t            var _this = this;\n\t            return __generator(this, function (_c) {\n\t                switch (_c.label) {\n\t                    case 0: return [4 /*yield*/, transaction];\n\t                    case 1:\n\t                        values = _c.sent();\n\t                        tx = {};\n\t                        [\"from\", \"to\"].forEach(function (key) {\n\t                            if (values[key] == null) {\n\t                                return;\n\t                            }\n\t                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? _this._getAddress(v) : null); });\n\t                        });\n\t                        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(function (key) {\n\t                            if (values[key] == null) {\n\t                                return;\n\t                            }\n\t                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? lib$2.BigNumber.from(v) : null); });\n\t                        });\n\t                        [\"type\"].forEach(function (key) {\n\t                            if (values[key] == null) {\n\t                                return;\n\t                            }\n\t                            tx[key] = Promise.resolve(values[key]).then(function (v) { return ((v != null) ? v : null); });\n\t                        });\n\t                        if (values.accessList) {\n\t                            tx.accessList = this.formatter.accessList(values.accessList);\n\t                        }\n\t                        [\"data\"].forEach(function (key) {\n\t                            if (values[key] == null) {\n\t                                return;\n\t                            }\n\t                            tx[key] = Promise.resolve(values[key]).then(function (v) { return (v ? (0, lib$1.hexlify)(v) : null); });\n\t                        });\n\t                        _b = (_a = this.formatter).transactionRequest;\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)(tx)];\n\t                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype._getFilter = function (filter) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var result, _a, _b;\n\t            var _this = this;\n\t            return __generator(this, function (_c) {\n\t                switch (_c.label) {\n\t                    case 0: return [4 /*yield*/, filter];\n\t                    case 1:\n\t                        filter = _c.sent();\n\t                        result = {};\n\t                        if (filter.address != null) {\n\t                            result.address = this._getAddress(filter.address);\n\t                        }\n\t                        [\"blockHash\", \"topics\"].forEach(function (key) {\n\t                            if (filter[key] == null) {\n\t                                return;\n\t                            }\n\t                            result[key] = filter[key];\n\t                        });\n\t                        [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n\t                            if (filter[key] == null) {\n\t                                return;\n\t                            }\n\t                            result[key] = _this._getBlockTag(filter[key]);\n\t                        });\n\t                        _b = (_a = this.formatter).filter;\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)(result)];\n\t                    case 2: return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.call = function (transaction, blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params, result;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)({\n\t                                transaction: this._getTransactionRequest(transaction),\n\t                                blockTag: this._getBlockTag(blockTag)\n\t                            })];\n\t                    case 2:\n\t                        params = _a.sent();\n\t                        return [4 /*yield*/, this.perform(\"call\", params)];\n\t                    case 3:\n\t                        result = _a.sent();\n\t                        try {\n\t                            return [2 /*return*/, (0, lib$1.hexlify)(result)];\n\t                        }\n\t                        catch (error) {\n\t                            return [2 /*return*/, logger.throwError(\"bad result from backend\", lib.Logger.errors.SERVER_ERROR, {\n\t                                    method: \"call\",\n\t                                    params: params,\n\t                                    result: result,\n\t                                    error: error\n\t                                })];\n\t                        }\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.estimateGas = function (transaction) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params, result;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)({\n\t                                transaction: this._getTransactionRequest(transaction)\n\t                            })];\n\t                    case 2:\n\t                        params = _a.sent();\n\t                        return [4 /*yield*/, this.perform(\"estimateGas\", params)];\n\t                    case 3:\n\t                        result = _a.sent();\n\t                        try {\n\t                            return [2 /*return*/, lib$2.BigNumber.from(result)];\n\t                        }\n\t                        catch (error) {\n\t                            return [2 /*return*/, logger.throwError(\"bad result from backend\", lib.Logger.errors.SERVER_ERROR, {\n\t                                    method: \"estimateGas\",\n\t                                    params: params,\n\t                                    result: result,\n\t                                    error: error\n\t                                })];\n\t                        }\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype._getAddress = function (addressOrName) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var address;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, addressOrName];\n\t                    case 1:\n\t                        addressOrName = _a.sent();\n\t                        if (typeof (addressOrName) !== \"string\") {\n\t                            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n\t                        }\n\t                        return [4 /*yield*/, this.resolveName(addressOrName)];\n\t                    case 2:\n\t                        address = _a.sent();\n\t                        if (address == null) {\n\t                            logger.throwError(\"ENS name not configured\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                                operation: \"resolveName(\" + JSON.stringify(addressOrName) + \")\"\n\t                            });\n\t                        }\n\t                        return [2 /*return*/, address];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype._getBlock = function (blockHashOrBlockTag, includeTransactions) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var blockNumber, params, _a, error_8;\n\t            var _this = this;\n\t            return __generator(this, function (_b) {\n\t                switch (_b.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _b.sent();\n\t                        return [4 /*yield*/, blockHashOrBlockTag];\n\t                    case 2:\n\t                        blockHashOrBlockTag = _b.sent();\n\t                        blockNumber = -128;\n\t                        params = {\n\t                            includeTransactions: !!includeTransactions\n\t                        };\n\t                        if (!(0, lib$1.isHexString)(blockHashOrBlockTag, 32)) return [3 /*break*/, 3];\n\t                        params.blockHash = blockHashOrBlockTag;\n\t                        return [3 /*break*/, 6];\n\t                    case 3:\n\t                        _b.trys.push([3, 5, , 6]);\n\t                        _a = params;\n\t                        return [4 /*yield*/, this._getBlockTag(blockHashOrBlockTag)];\n\t                    case 4:\n\t                        _a.blockTag = _b.sent();\n\t                        if ((0, lib$1.isHexString)(params.blockTag)) {\n\t                            blockNumber = parseInt(params.blockTag.substring(2), 16);\n\t                        }\n\t                        return [3 /*break*/, 6];\n\t                    case 5:\n\t                        error_8 = _b.sent();\n\t                        logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n\t                        return [3 /*break*/, 6];\n\t                    case 6: return [2 /*return*/, (0, lib$q.poll)(function () { return __awaiter(_this, void 0, void 0, function () {\n\t                            var block, blockNumber_1, i, tx, confirmations, blockWithTxs;\n\t                            var _this = this;\n\t                            return __generator(this, function (_a) {\n\t                                switch (_a.label) {\n\t                                    case 0: return [4 /*yield*/, this.perform(\"getBlock\", params)];\n\t                                    case 1:\n\t                                        block = _a.sent();\n\t                                        // Block was not found\n\t                                        if (block == null) {\n\t                                            // For blockhashes, if we didn't say it existed, that blockhash may\n\t                                            // not exist. If we did see it though, perhaps from a log, we know\n\t                                            // it exists, and this node is just not caught up yet.\n\t                                            if (params.blockHash != null) {\n\t                                                if (this._emitted[\"b:\" + params.blockHash] == null) {\n\t                                                    return [2 /*return*/, null];\n\t                                                }\n\t                                            }\n\t                                            // For block tags, if we are asking for a future block, we return null\n\t                                            if (params.blockTag != null) {\n\t                                                if (blockNumber > this._emitted.block) {\n\t                                                    return [2 /*return*/, null];\n\t                                                }\n\t                                            }\n\t                                            // Retry on the next block\n\t                                            return [2 /*return*/, undefined];\n\t                                        }\n\t                                        if (!includeTransactions) return [3 /*break*/, 8];\n\t                                        blockNumber_1 = null;\n\t                                        i = 0;\n\t                                        _a.label = 2;\n\t                                    case 2:\n\t                                        if (!(i < block.transactions.length)) return [3 /*break*/, 7];\n\t                                        tx = block.transactions[i];\n\t                                        if (!(tx.blockNumber == null)) return [3 /*break*/, 3];\n\t                                        tx.confirmations = 0;\n\t                                        return [3 /*break*/, 6];\n\t                                    case 3:\n\t                                        if (!(tx.confirmations == null)) return [3 /*break*/, 6];\n\t                                        if (!(blockNumber_1 == null)) return [3 /*break*/, 5];\n\t                                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\t                                    case 4:\n\t                                        blockNumber_1 = _a.sent();\n\t                                        _a.label = 5;\n\t                                    case 5:\n\t                                        confirmations = (blockNumber_1 - tx.blockNumber) + 1;\n\t                                        if (confirmations <= 0) {\n\t                                            confirmations = 1;\n\t                                        }\n\t                                        tx.confirmations = confirmations;\n\t                                        _a.label = 6;\n\t                                    case 6:\n\t                                        i++;\n\t                                        return [3 /*break*/, 2];\n\t                                    case 7:\n\t                                        blockWithTxs = this.formatter.blockWithTransactions(block);\n\t                                        blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) { return _this._wrapTransaction(tx); });\n\t                                        return [2 /*return*/, blockWithTxs];\n\t                                    case 8: return [2 /*return*/, this.formatter.block(block)];\n\t                                }\n\t                            });\n\t                        }); }, { oncePoll: this })];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getBlock = function (blockHashOrBlockTag) {\n\t        return (this._getBlock(blockHashOrBlockTag, false));\n\t    };\n\t    BaseProvider.prototype.getBlockWithTransactions = function (blockHashOrBlockTag) {\n\t        return (this._getBlock(blockHashOrBlockTag, true));\n\t    };\n\t    BaseProvider.prototype.getTransaction = function (transactionHash) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, transactionHash];\n\t                    case 2:\n\t                        transactionHash = _a.sent();\n\t                        params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\t                        return [2 /*return*/, (0, lib$q.poll)(function () { return __awaiter(_this, void 0, void 0, function () {\n\t                                var result, tx, blockNumber, confirmations;\n\t                                return __generator(this, function (_a) {\n\t                                    switch (_a.label) {\n\t                                        case 0: return [4 /*yield*/, this.perform(\"getTransaction\", params)];\n\t                                        case 1:\n\t                                            result = _a.sent();\n\t                                            if (result == null) {\n\t                                                if (this._emitted[\"t:\" + transactionHash] == null) {\n\t                                                    return [2 /*return*/, null];\n\t                                                }\n\t                                                return [2 /*return*/, undefined];\n\t                                            }\n\t                                            tx = this.formatter.transactionResponse(result);\n\t                                            if (!(tx.blockNumber == null)) return [3 /*break*/, 2];\n\t                                            tx.confirmations = 0;\n\t                                            return [3 /*break*/, 4];\n\t                                        case 2:\n\t                                            if (!(tx.confirmations == null)) return [3 /*break*/, 4];\n\t                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\t                                        case 3:\n\t                                            blockNumber = _a.sent();\n\t                                            confirmations = (blockNumber - tx.blockNumber) + 1;\n\t                                            if (confirmations <= 0) {\n\t                                                confirmations = 1;\n\t                                            }\n\t                                            tx.confirmations = confirmations;\n\t                                            _a.label = 4;\n\t                                        case 4: return [2 /*return*/, this._wrapTransaction(tx)];\n\t                                    }\n\t                                });\n\t                            }); }, { oncePoll: this })];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, transactionHash];\n\t                    case 2:\n\t                        transactionHash = _a.sent();\n\t                        params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\t                        return [2 /*return*/, (0, lib$q.poll)(function () { return __awaiter(_this, void 0, void 0, function () {\n\t                                var result, receipt, blockNumber, confirmations;\n\t                                return __generator(this, function (_a) {\n\t                                    switch (_a.label) {\n\t                                        case 0: return [4 /*yield*/, this.perform(\"getTransactionReceipt\", params)];\n\t                                        case 1:\n\t                                            result = _a.sent();\n\t                                            if (result == null) {\n\t                                                if (this._emitted[\"t:\" + transactionHash] == null) {\n\t                                                    return [2 /*return*/, null];\n\t                                                }\n\t                                                return [2 /*return*/, undefined];\n\t                                            }\n\t                                            // \"geth-etc\" returns receipts before they are ready\n\t                                            if (result.blockHash == null) {\n\t                                                return [2 /*return*/, undefined];\n\t                                            }\n\t                                            receipt = this.formatter.receipt(result);\n\t                                            if (!(receipt.blockNumber == null)) return [3 /*break*/, 2];\n\t                                            receipt.confirmations = 0;\n\t                                            return [3 /*break*/, 4];\n\t                                        case 2:\n\t                                            if (!(receipt.confirmations == null)) return [3 /*break*/, 4];\n\t                                            return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\t                                        case 3:\n\t                                            blockNumber = _a.sent();\n\t                                            confirmations = (blockNumber - receipt.blockNumber) + 1;\n\t                                            if (confirmations <= 0) {\n\t                                                confirmations = 1;\n\t                                            }\n\t                                            receipt.confirmations = confirmations;\n\t                                            _a.label = 4;\n\t                                        case 4: return [2 /*return*/, receipt];\n\t                                    }\n\t                                });\n\t                            }); }, { oncePoll: this })];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getLogs = function (filter) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params, logs;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [4 /*yield*/, (0, lib$3.resolveProperties)({ filter: this._getFilter(filter) })];\n\t                    case 2:\n\t                        params = _a.sent();\n\t                        return [4 /*yield*/, this.perform(\"getLogs\", params)];\n\t                    case 3:\n\t                        logs = _a.sent();\n\t                        logs.forEach(function (log) {\n\t                            if (log.removed == null) {\n\t                                log.removed = false;\n\t                            }\n\t                        });\n\t                        return [2 /*return*/, formatter.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getEtherPrice = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        _a.sent();\n\t                        return [2 /*return*/, this.perform(\"getEtherPrice\", {})];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype._getBlockTag = function (blockTag) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var blockNumber;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, blockTag];\n\t                    case 1:\n\t                        blockTag = _a.sent();\n\t                        if (!(typeof (blockTag) === \"number\" && blockTag < 0)) return [3 /*break*/, 3];\n\t                        if (blockTag % 1) {\n\t                            logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n\t                        }\n\t                        return [4 /*yield*/, this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\t                    case 2:\n\t                        blockNumber = _a.sent();\n\t                        blockNumber += blockTag;\n\t                        if (blockNumber < 0) {\n\t                            blockNumber = 0;\n\t                        }\n\t                        return [2 /*return*/, this.formatter.blockTag(blockNumber)];\n\t                    case 3: return [2 /*return*/, this.formatter.blockTag(blockTag)];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getResolver = function (name) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var address, error_9;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        _a.trys.push([0, 2, , 3]);\n\t                        return [4 /*yield*/, this._getResolver(name)];\n\t                    case 1:\n\t                        address = _a.sent();\n\t                        if (address == null) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [2 /*return*/, new Resolver(this, address, name)];\n\t                    case 2:\n\t                        error_9 = _a.sent();\n\t                        if (error_9.code === lib.Logger.errors.CALL_EXCEPTION) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [2 /*return*/, null];\n\t                    case 3: return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype._getResolver = function (name) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var network, transaction, _a, _b, error_10;\n\t            return __generator(this, function (_c) {\n\t                switch (_c.label) {\n\t                    case 0: return [4 /*yield*/, this.getNetwork()];\n\t                    case 1:\n\t                        network = _c.sent();\n\t                        // No ENS...\n\t                        if (!network.ensAddress) {\n\t                            logger.throwError(\"network does not support ENS\", lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: \"ENS\", network: network.name });\n\t                        }\n\t                        transaction = {\n\t                            to: network.ensAddress,\n\t                            data: (\"0x0178b8bf\" + (0, lib$9.namehash)(name).substring(2))\n\t                        };\n\t                        _c.label = 2;\n\t                    case 2:\n\t                        _c.trys.push([2, 4, , 5]);\n\t                        _b = (_a = this.formatter).callAddress;\n\t                        return [4 /*yield*/, this.call(transaction)];\n\t                    case 3: return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n\t                    case 4:\n\t                        error_10 = _c.sent();\n\t                        if (error_10.code === lib.Logger.errors.CALL_EXCEPTION) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        throw error_10;\n\t                    case 5: return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.resolveName = function (name) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var resolver;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, name];\n\t                    case 1:\n\t                        name = _a.sent();\n\t                        // If it is already an address, nothing to resolve\n\t                        try {\n\t                            return [2 /*return*/, Promise.resolve(this.formatter.address(name))];\n\t                        }\n\t                        catch (error) {\n\t                            // If is is a hexstring, the address is bad (See #694)\n\t                            if ((0, lib$1.isHexString)(name)) {\n\t                                throw error;\n\t                            }\n\t                        }\n\t                        if (typeof (name) !== \"string\") {\n\t                            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n\t                        }\n\t                        return [4 /*yield*/, this.getResolver(name)];\n\t                    case 2:\n\t                        resolver = _a.sent();\n\t                        if (!resolver) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [4 /*yield*/, resolver.getAddress()];\n\t                    case 3: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.lookupAddress = function (address) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var reverseName, resolverAddress, bytes, _a, length, name, addr;\n\t            return __generator(this, function (_b) {\n\t                switch (_b.label) {\n\t                    case 0: return [4 /*yield*/, address];\n\t                    case 1:\n\t                        address = _b.sent();\n\t                        address = this.formatter.address(address);\n\t                        reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\t                        return [4 /*yield*/, this._getResolver(reverseName)];\n\t                    case 2:\n\t                        resolverAddress = _b.sent();\n\t                        if (!resolverAddress) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        _a = lib$1.arrayify;\n\t                        return [4 /*yield*/, this.call({\n\t                                to: resolverAddress,\n\t                                data: (\"0x691f3431\" + (0, lib$9.namehash)(reverseName).substring(2))\n\t                            })];\n\t                    case 3:\n\t                        bytes = _a.apply(void 0, [_b.sent()]);\n\t                        // Strip off the dynamic string pointer (0x20)\n\t                        if (bytes.length < 32 || !lib$2.BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        bytes = bytes.slice(32);\n\t                        // Not a length-prefixed string\n\t                        if (bytes.length < 32) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        length = lib$2.BigNumber.from(bytes.slice(0, 32)).toNumber();\n\t                        bytes = bytes.slice(32);\n\t                        // Length longer than available data\n\t                        if (length > bytes.length) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        name = (0, lib$8.toUtf8String)(bytes.slice(0, length));\n\t                        return [4 /*yield*/, this.resolveName(name)];\n\t                    case 4:\n\t                        addr = _b.sent();\n\t                        if (addr != address) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [2 /*return*/, name];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.getAvatar = function (nameOrAddress) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var resolver, address, reverseName, resolverAddress, avatar;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        resolver = null;\n\t                        if (!(0, lib$1.isHexString)(nameOrAddress)) return [3 /*break*/, 2];\n\t                        address = this.formatter.address(nameOrAddress);\n\t                        reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\t                        return [4 /*yield*/, this._getResolver(reverseName)];\n\t                    case 1:\n\t                        resolverAddress = _a.sent();\n\t                        if (!resolverAddress) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        resolver = new Resolver(this, resolverAddress, \"_\", address);\n\t                        return [3 /*break*/, 4];\n\t                    case 2: return [4 /*yield*/, this.getResolver(nameOrAddress)];\n\t                    case 3:\n\t                        // ENS name; forward lookup\n\t                        resolver = _a.sent();\n\t                        _a.label = 4;\n\t                    case 4: return [4 /*yield*/, resolver.getAvatar()];\n\t                    case 5:\n\t                        avatar = _a.sent();\n\t                        if (avatar == null) {\n\t                            return [2 /*return*/, null];\n\t                        }\n\t                        return [2 /*return*/, avatar.url];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    BaseProvider.prototype.perform = function (method, params) {\n\t        return logger.throwError(method + \" not implemented\", lib.Logger.errors.NOT_IMPLEMENTED, { operation: method });\n\t    };\n\t    BaseProvider.prototype._startEvent = function (event) {\n\t        this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);\n\t    };\n\t    BaseProvider.prototype._stopEvent = function (event) {\n\t        this.polling = (this._events.filter(function (e) { return e.pollable(); }).length > 0);\n\t    };\n\t    BaseProvider.prototype._addEventListener = function (eventName, listener, once) {\n\t        var event = new Event(getEventTag(eventName), listener, once);\n\t        this._events.push(event);\n\t        this._startEvent(event);\n\t        return this;\n\t    };\n\t    BaseProvider.prototype.on = function (eventName, listener) {\n\t        return this._addEventListener(eventName, listener, false);\n\t    };\n\t    BaseProvider.prototype.once = function (eventName, listener) {\n\t        return this._addEventListener(eventName, listener, true);\n\t    };\n\t    BaseProvider.prototype.emit = function (eventName) {\n\t        var _this = this;\n\t        var args = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            args[_i - 1] = arguments[_i];\n\t        }\n\t        var result = false;\n\t        var stopped = [];\n\t        var eventTag = getEventTag(eventName);\n\t        this._events = this._events.filter(function (event) {\n\t            if (event.tag !== eventTag) {\n\t                return true;\n\t            }\n\t            setTimeout(function () {\n\t                event.listener.apply(_this, args);\n\t            }, 0);\n\t            result = true;\n\t            if (event.once) {\n\t                stopped.push(event);\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t        stopped.forEach(function (event) { _this._stopEvent(event); });\n\t        return result;\n\t    };\n\t    BaseProvider.prototype.listenerCount = function (eventName) {\n\t        if (!eventName) {\n\t            return this._events.length;\n\t        }\n\t        var eventTag = getEventTag(eventName);\n\t        return this._events.filter(function (event) {\n\t            return (event.tag === eventTag);\n\t        }).length;\n\t    };\n\t    BaseProvider.prototype.listeners = function (eventName) {\n\t        if (eventName == null) {\n\t            return this._events.map(function (event) { return event.listener; });\n\t        }\n\t        var eventTag = getEventTag(eventName);\n\t        return this._events\n\t            .filter(function (event) { return (event.tag === eventTag); })\n\t            .map(function (event) { return event.listener; });\n\t    };\n\t    BaseProvider.prototype.off = function (eventName, listener) {\n\t        var _this = this;\n\t        if (listener == null) {\n\t            return this.removeAllListeners(eventName);\n\t        }\n\t        var stopped = [];\n\t        var found = false;\n\t        var eventTag = getEventTag(eventName);\n\t        this._events = this._events.filter(function (event) {\n\t            if (event.tag !== eventTag || event.listener != listener) {\n\t                return true;\n\t            }\n\t            if (found) {\n\t                return true;\n\t            }\n\t            found = true;\n\t            stopped.push(event);\n\t            return false;\n\t        });\n\t        stopped.forEach(function (event) { _this._stopEvent(event); });\n\t        return this;\n\t    };\n\t    BaseProvider.prototype.removeAllListeners = function (eventName) {\n\t        var _this = this;\n\t        var stopped = [];\n\t        if (eventName == null) {\n\t            stopped = this._events;\n\t            this._events = [];\n\t        }\n\t        else {\n\t            var eventTag_1 = getEventTag(eventName);\n\t            this._events = this._events.filter(function (event) {\n\t                if (event.tag !== eventTag_1) {\n\t                    return true;\n\t                }\n\t                stopped.push(event);\n\t                return false;\n\t            });\n\t        }\n\t        stopped.forEach(function (event) { _this._stopEvent(event); });\n\t        return this;\n\t    };\n\t    return BaseProvider;\n\t}(lib$b.Provider));\n\texports.BaseProvider = BaseProvider;\n\n\t});\n\n\tvar baseProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(baseProvider);\n\n\tvar jsonRpcProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.JsonRpcProvider = exports.JsonRpcSigner = void 0;\n\n\n\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\n\tvar errorGas = [\"call\", \"estimateGas\"];\n\tfunction checkError(method, error, params) {\n\t    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n\t    // incompatibility; maybe for v6 consider forwarding reverts as errors\n\t    if (method === \"call\" && error.code === lib.Logger.errors.SERVER_ERROR) {\n\t        var e = error.error;\n\t        if (e && e.message.match(\"reverted\") && (0, lib$1.isHexString)(e.data)) {\n\t            return e.data;\n\t        }\n\t        logger.throwError(\"missing revert data in call exception\", lib.Logger.errors.CALL_EXCEPTION, {\n\t            error: error,\n\t            data: \"0x\"\n\t        });\n\t    }\n\t    var message = error.message;\n\t    if (error.code === lib.Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n\t        message = error.error.message;\n\t    }\n\t    else if (typeof (error.body) === \"string\") {\n\t        message = error.body;\n\t    }\n\t    else if (typeof (error.responseText) === \"string\") {\n\t        message = error.responseText;\n\t    }\n\t    message = (message || \"\").toLowerCase();\n\t    var transaction = params.transaction || params.signedTransaction;\n\t    // \"insufficient funds for gas * price + value + cost(data)\"\n\t    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n\t        logger.throwError(\"insufficient funds for intrinsic transaction cost\", lib.Logger.errors.INSUFFICIENT_FUNDS, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    // \"nonce too low\"\n\t    if (message.match(/nonce too low/)) {\n\t        logger.throwError(\"nonce has already been used\", lib.Logger.errors.NONCE_EXPIRED, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    // \"replacement transaction underpriced\"\n\t    if (message.match(/replacement transaction underpriced/)) {\n\t        logger.throwError(\"replacement fee too low\", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    // \"replacement transaction underpriced\"\n\t    if (message.match(/only replay-protected/)) {\n\t        logger.throwError(\"legacy pre-eip-155 transactions not supported\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n\t        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    throw error;\n\t}\n\tfunction timer(timeout) {\n\t    return new Promise(function (resolve) {\n\t        setTimeout(resolve, timeout);\n\t    });\n\t}\n\tfunction getResult(payload) {\n\t    if (payload.error) {\n\t        // @TODO: not any\n\t        var error = new Error(payload.error.message);\n\t        error.code = payload.error.code;\n\t        error.data = payload.error.data;\n\t        throw error;\n\t    }\n\t    return payload.result;\n\t}\n\tfunction getLowerCase(value) {\n\t    if (value) {\n\t        return value.toLowerCase();\n\t    }\n\t    return value;\n\t}\n\tvar _constructorGuard = {};\n\tvar JsonRpcSigner = /** @class */ (function (_super) {\n\t    __extends(JsonRpcSigner, _super);\n\t    function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, JsonRpcSigner);\n\t        _this = _super.call(this) || this;\n\t        if (constructorGuard !== _constructorGuard) {\n\t            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n\t        }\n\t        (0, lib$3.defineReadOnly)(_this, \"provider\", provider);\n\t        if (addressOrIndex == null) {\n\t            addressOrIndex = 0;\n\t        }\n\t        if (typeof (addressOrIndex) === \"string\") {\n\t            (0, lib$3.defineReadOnly)(_this, \"_address\", _this.provider.formatter.address(addressOrIndex));\n\t            (0, lib$3.defineReadOnly)(_this, \"_index\", null);\n\t        }\n\t        else if (typeof (addressOrIndex) === \"number\") {\n\t            (0, lib$3.defineReadOnly)(_this, \"_index\", addressOrIndex);\n\t            (0, lib$3.defineReadOnly)(_this, \"_address\", null);\n\t        }\n\t        else {\n\t            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n\t        }\n\t        return _this;\n\t    }\n\t    JsonRpcSigner.prototype.connect = function (provider) {\n\t        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t            operation: \"connect\"\n\t        });\n\t    };\n\t    JsonRpcSigner.prototype.connectUnchecked = function () {\n\t        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n\t    };\n\t    JsonRpcSigner.prototype.getAddress = function () {\n\t        var _this = this;\n\t        if (this._address) {\n\t            return Promise.resolve(this._address);\n\t        }\n\t        return this.provider.send(\"eth_accounts\", []).then(function (accounts) {\n\t            if (accounts.length <= _this._index) {\n\t                logger.throwError(\"unknown account #\" + _this._index, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                    operation: \"getAddress\"\n\t                });\n\t            }\n\t            return _this.provider.formatter.address(accounts[_this._index]);\n\t        });\n\t    };\n\t    JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {\n\t        var _this = this;\n\t        transaction = (0, lib$3.shallowCopy)(transaction);\n\t        var fromAddress = this.getAddress().then(function (address) {\n\t            if (address) {\n\t                address = address.toLowerCase();\n\t            }\n\t            return address;\n\t        });\n\t        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n\t        // wishes to use this, it is easy to specify explicitly, otherwise\n\t        // we look it up for them.\n\t        if (transaction.gasLimit == null) {\n\t            var estimate = (0, lib$3.shallowCopy)(transaction);\n\t            estimate.from = fromAddress;\n\t            transaction.gasLimit = this.provider.estimateGas(estimate);\n\t        }\n\t        if (transaction.to != null) {\n\t            transaction.to = Promise.resolve(transaction.to).then(function (to) { return __awaiter(_this, void 0, void 0, function () {\n\t                var address;\n\t                return __generator(this, function (_a) {\n\t                    switch (_a.label) {\n\t                        case 0:\n\t                            if (to == null) {\n\t                                return [2 /*return*/, null];\n\t                            }\n\t                            return [4 /*yield*/, this.provider.resolveName(to)];\n\t                        case 1:\n\t                            address = _a.sent();\n\t                            if (address == null) {\n\t                                logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n\t                            }\n\t                            return [2 /*return*/, address];\n\t                    }\n\t                });\n\t            }); });\n\t        }\n\t        return (0, lib$3.resolveProperties)({\n\t            tx: (0, lib$3.resolveProperties)(transaction),\n\t            sender: fromAddress\n\t        }).then(function (_a) {\n\t            var tx = _a.tx, sender = _a.sender;\n\t            if (tx.from != null) {\n\t                if (tx.from.toLowerCase() !== sender) {\n\t                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n\t                }\n\t            }\n\t            else {\n\t                tx.from = sender;\n\t            }\n\t            var hexTx = _this.provider.constructor.hexlifyTransaction(tx, { from: true });\n\t            return _this.provider.send(\"eth_sendTransaction\", [hexTx]).then(function (hash) {\n\t                return hash;\n\t            }, function (error) {\n\t                return checkError(\"sendTransaction\", error, hexTx);\n\t            });\n\t        });\n\t    };\n\t    JsonRpcSigner.prototype.signTransaction = function (transaction) {\n\t        return logger.throwError(\"signing transactions is unsupported\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t            operation: \"signTransaction\"\n\t        });\n\t    };\n\t    JsonRpcSigner.prototype.sendTransaction = function (transaction) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var blockNumber, hash, error_1;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)];\n\t                    case 1:\n\t                        blockNumber = _a.sent();\n\t                        return [4 /*yield*/, this.sendUncheckedTransaction(transaction)];\n\t                    case 2:\n\t                        hash = _a.sent();\n\t                        _a.label = 3;\n\t                    case 3:\n\t                        _a.trys.push([3, 5, , 6]);\n\t                        return [4 /*yield*/, (0, lib$q.poll)(function () { return __awaiter(_this, void 0, void 0, function () {\n\t                                var tx;\n\t                                return __generator(this, function (_a) {\n\t                                    switch (_a.label) {\n\t                                        case 0: return [4 /*yield*/, this.provider.getTransaction(hash)];\n\t                                        case 1:\n\t                                            tx = _a.sent();\n\t                                            if (tx === null) {\n\t                                                return [2 /*return*/, undefined];\n\t                                            }\n\t                                            return [2 /*return*/, this.provider._wrapTransaction(tx, hash, blockNumber)];\n\t                                    }\n\t                                });\n\t                            }); }, { oncePoll: this.provider })];\n\t                    case 4: \n\t                    // Unfortunately, JSON-RPC only provides and opaque transaction hash\n\t                    // for a response, and we need the actual transaction, so we poll\n\t                    // for it; it should show up very quickly\n\t                    return [2 /*return*/, _a.sent()];\n\t                    case 5:\n\t                        error_1 = _a.sent();\n\t                        error_1.transactionHash = hash;\n\t                        throw error_1;\n\t                    case 6: return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    JsonRpcSigner.prototype.signMessage = function (message) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var data, address;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        data = ((typeof (message) === \"string\") ? (0, lib$8.toUtf8Bytes)(message) : message);\n\t                        return [4 /*yield*/, this.getAddress()];\n\t                    case 1:\n\t                        address = _a.sent();\n\t                        return [4 /*yield*/, this.provider.send(\"personal_sign\", [(0, lib$1.hexlify)(data), address.toLowerCase()])];\n\t                    case 2: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    JsonRpcSigner.prototype._legacySignMessage = function (message) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var data, address;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        data = ((typeof (message) === \"string\") ? (0, lib$8.toUtf8Bytes)(message) : message);\n\t                        return [4 /*yield*/, this.getAddress()];\n\t                    case 1:\n\t                        address = _a.sent();\n\t                        return [4 /*yield*/, this.provider.send(\"eth_sign\", [address.toLowerCase(), (0, lib$1.hexlify)(data)])];\n\t                    case 2: \n\t                    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n\t                    return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    JsonRpcSigner.prototype._signTypedData = function (domain, types, value) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var populated, address;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, lib$9._TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n\t                            return _this.provider.resolveName(name);\n\t                        })];\n\t                    case 1:\n\t                        populated = _a.sent();\n\t                        return [4 /*yield*/, this.getAddress()];\n\t                    case 2:\n\t                        address = _a.sent();\n\t                        return [4 /*yield*/, this.provider.send(\"eth_signTypedData_v4\", [\n\t                                address.toLowerCase(),\n\t                                JSON.stringify(lib$9._TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n\t                            ])];\n\t                    case 3: return [2 /*return*/, _a.sent()];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    JsonRpcSigner.prototype.unlock = function (password) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var provider, address;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        provider = this.provider;\n\t                        return [4 /*yield*/, this.getAddress()];\n\t                    case 1:\n\t                        address = _a.sent();\n\t                        return [2 /*return*/, provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null])];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    return JsonRpcSigner;\n\t}(lib$c.Signer));\n\texports.JsonRpcSigner = JsonRpcSigner;\n\tvar UncheckedJsonRpcSigner = /** @class */ (function (_super) {\n\t    __extends(UncheckedJsonRpcSigner, _super);\n\t    function UncheckedJsonRpcSigner() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    UncheckedJsonRpcSigner.prototype.sendTransaction = function (transaction) {\n\t        var _this = this;\n\t        return this.sendUncheckedTransaction(transaction).then(function (hash) {\n\t            return {\n\t                hash: hash,\n\t                nonce: null,\n\t                gasLimit: null,\n\t                gasPrice: null,\n\t                data: null,\n\t                value: null,\n\t                chainId: null,\n\t                confirmations: 0,\n\t                from: null,\n\t                wait: function (confirmations) { return _this.provider.waitForTransaction(hash, confirmations); }\n\t            };\n\t        });\n\t    };\n\t    return UncheckedJsonRpcSigner;\n\t}(JsonRpcSigner));\n\tvar allowedTransactionKeys = {\n\t    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n\t    type: true, accessList: true,\n\t    maxFeePerGas: true, maxPriorityFeePerGas: true\n\t};\n\tvar JsonRpcProvider = /** @class */ (function (_super) {\n\t    __extends(JsonRpcProvider, _super);\n\t    function JsonRpcProvider(url, network) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, JsonRpcProvider);\n\t        var networkOrReady = network;\n\t        // The network is unknown, query the JSON-RPC for it\n\t        if (networkOrReady == null) {\n\t            networkOrReady = new Promise(function (resolve, reject) {\n\t                setTimeout(function () {\n\t                    _this.detectNetwork().then(function (network) {\n\t                        resolve(network);\n\t                    }, function (error) {\n\t                        reject(error);\n\t                    });\n\t                }, 0);\n\t            });\n\t        }\n\t        _this = _super.call(this, networkOrReady) || this;\n\t        // Default URL\n\t        if (!url) {\n\t            url = (0, lib$3.getStatic)(_this.constructor, \"defaultUrl\")();\n\t        }\n\t        if (typeof (url) === \"string\") {\n\t            (0, lib$3.defineReadOnly)(_this, \"connection\", Object.freeze({\n\t                url: url\n\t            }));\n\t        }\n\t        else {\n\t            (0, lib$3.defineReadOnly)(_this, \"connection\", Object.freeze((0, lib$3.shallowCopy)(url)));\n\t        }\n\t        _this._nextId = 42;\n\t        return _this;\n\t    }\n\t    Object.defineProperty(JsonRpcProvider.prototype, \"_cache\", {\n\t        get: function () {\n\t            if (this._eventLoopCache == null) {\n\t                this._eventLoopCache = {};\n\t            }\n\t            return this._eventLoopCache;\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    JsonRpcProvider.defaultUrl = function () {\n\t        return \"http:/\\/localhost:8545\";\n\t    };\n\t    JsonRpcProvider.prototype.detectNetwork = function () {\n\t        var _this = this;\n\t        if (!this._cache[\"detectNetwork\"]) {\n\t            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\t            // Clear this cache at the beginning of the next event loop\n\t            setTimeout(function () {\n\t                _this._cache[\"detectNetwork\"] = null;\n\t            }, 0);\n\t        }\n\t        return this._cache[\"detectNetwork\"];\n\t    };\n\t    JsonRpcProvider.prototype._uncachedDetectNetwork = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var chainId, error_2, error_3, getNetwork;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, timer(0)];\n\t                    case 1:\n\t                        _a.sent();\n\t                        chainId = null;\n\t                        _a.label = 2;\n\t                    case 2:\n\t                        _a.trys.push([2, 4, , 9]);\n\t                        return [4 /*yield*/, this.send(\"eth_chainId\", [])];\n\t                    case 3:\n\t                        chainId = _a.sent();\n\t                        return [3 /*break*/, 9];\n\t                    case 4:\n\t                        error_2 = _a.sent();\n\t                        _a.label = 5;\n\t                    case 5:\n\t                        _a.trys.push([5, 7, , 8]);\n\t                        return [4 /*yield*/, this.send(\"net_version\", [])];\n\t                    case 6:\n\t                        chainId = _a.sent();\n\t                        return [3 /*break*/, 8];\n\t                    case 7:\n\t                        error_3 = _a.sent();\n\t                        return [3 /*break*/, 8];\n\t                    case 8: return [3 /*break*/, 9];\n\t                    case 9:\n\t                        if (chainId != null) {\n\t                            getNetwork = (0, lib$3.getStatic)(this.constructor, \"getNetwork\");\n\t                            try {\n\t                                return [2 /*return*/, getNetwork(lib$2.BigNumber.from(chainId).toNumber())];\n\t                            }\n\t                            catch (error) {\n\t                                return [2 /*return*/, logger.throwError(\"could not detect network\", lib.Logger.errors.NETWORK_ERROR, {\n\t                                        chainId: chainId,\n\t                                        event: \"invalidNetwork\",\n\t                                        serverError: error\n\t                                    })];\n\t                            }\n\t                        }\n\t                        return [2 /*return*/, logger.throwError(\"could not detect network\", lib.Logger.errors.NETWORK_ERROR, {\n\t                                event: \"noNetwork\"\n\t                            })];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {\n\t        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n\t    };\n\t    JsonRpcProvider.prototype.getUncheckedSigner = function (addressOrIndex) {\n\t        return this.getSigner(addressOrIndex).connectUnchecked();\n\t    };\n\t    JsonRpcProvider.prototype.listAccounts = function () {\n\t        var _this = this;\n\t        return this.send(\"eth_accounts\", []).then(function (accounts) {\n\t            return accounts.map(function (a) { return _this.formatter.address(a); });\n\t        });\n\t    };\n\t    JsonRpcProvider.prototype.send = function (method, params) {\n\t        var _this = this;\n\t        var request = {\n\t            method: method,\n\t            params: params,\n\t            id: (this._nextId++),\n\t            jsonrpc: \"2.0\"\n\t        };\n\t        this.emit(\"debug\", {\n\t            action: \"request\",\n\t            request: (0, lib$3.deepCopy)(request),\n\t            provider: this\n\t        });\n\t        // We can expand this in the future to any call, but for now these\n\t        // are the biggest wins and do not require any serializing parameters.\n\t        var cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n\t        if (cache && this._cache[method]) {\n\t            return this._cache[method];\n\t        }\n\t        var result = (0, lib$q.fetchJson)(this.connection, JSON.stringify(request), getResult).then(function (result) {\n\t            _this.emit(\"debug\", {\n\t                action: \"response\",\n\t                request: request,\n\t                response: result,\n\t                provider: _this\n\t            });\n\t            return result;\n\t        }, function (error) {\n\t            _this.emit(\"debug\", {\n\t                action: \"response\",\n\t                error: error,\n\t                request: request,\n\t                provider: _this\n\t            });\n\t            throw error;\n\t        });\n\t        // Cache the fetch, but clear it on the next event loop\n\t        if (cache) {\n\t            this._cache[method] = result;\n\t            setTimeout(function () {\n\t                _this._cache[method] = null;\n\t            }, 0);\n\t        }\n\t        return result;\n\t    };\n\t    JsonRpcProvider.prototype.prepareRequest = function (method, params) {\n\t        switch (method) {\n\t            case \"getBlockNumber\":\n\t                return [\"eth_blockNumber\", []];\n\t            case \"getGasPrice\":\n\t                return [\"eth_gasPrice\", []];\n\t            case \"getBalance\":\n\t                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\t            case \"getTransactionCount\":\n\t                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\t            case \"getCode\":\n\t                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\t            case \"getStorageAt\":\n\t                return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n\t            case \"sendTransaction\":\n\t                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\t            case \"getBlock\":\n\t                if (params.blockTag) {\n\t                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n\t                }\n\t                else if (params.blockHash) {\n\t                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n\t                }\n\t                return null;\n\t            case \"getTransaction\":\n\t                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\t            case \"getTransactionReceipt\":\n\t                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\t            case \"call\": {\n\t                var hexlifyTransaction = (0, lib$3.getStatic)(this.constructor, \"hexlifyTransaction\");\n\t                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n\t            }\n\t            case \"estimateGas\": {\n\t                var hexlifyTransaction = (0, lib$3.getStatic)(this.constructor, \"hexlifyTransaction\");\n\t                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n\t            }\n\t            case \"getLogs\":\n\t                if (params.filter && params.filter.address != null) {\n\t                    params.filter.address = getLowerCase(params.filter.address);\n\t                }\n\t                return [\"eth_getLogs\", [params.filter]];\n\t            default:\n\t                break;\n\t        }\n\t        return null;\n\t    };\n\t    JsonRpcProvider.prototype.perform = function (method, params) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var tx, feeData, args, error_4;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (!(method === \"call\" || method === \"estimateGas\")) return [3 /*break*/, 2];\n\t                        tx = params.transaction;\n\t                        if (!(tx && tx.type != null && lib$2.BigNumber.from(tx.type).isZero())) return [3 /*break*/, 2];\n\t                        if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) return [3 /*break*/, 2];\n\t                        return [4 /*yield*/, this.getFeeData()];\n\t                    case 1:\n\t                        feeData = _a.sent();\n\t                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n\t                            // Network doesn't know about EIP-1559 (and hence type)\n\t                            params = (0, lib$3.shallowCopy)(params);\n\t                            params.transaction = (0, lib$3.shallowCopy)(tx);\n\t                            delete params.transaction.type;\n\t                        }\n\t                        _a.label = 2;\n\t                    case 2:\n\t                        args = this.prepareRequest(method, params);\n\t                        if (args == null) {\n\t                            logger.throwError(method + \" not implemented\", lib.Logger.errors.NOT_IMPLEMENTED, { operation: method });\n\t                        }\n\t                        _a.label = 3;\n\t                    case 3:\n\t                        _a.trys.push([3, 5, , 6]);\n\t                        return [4 /*yield*/, this.send(args[0], args[1])];\n\t                    case 4: return [2 /*return*/, _a.sent()];\n\t                    case 5:\n\t                        error_4 = _a.sent();\n\t                        return [2 /*return*/, checkError(method, error_4, params)];\n\t                    case 6: return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    JsonRpcProvider.prototype._startEvent = function (event) {\n\t        if (event.tag === \"pending\") {\n\t            this._startPending();\n\t        }\n\t        _super.prototype._startEvent.call(this, event);\n\t    };\n\t    JsonRpcProvider.prototype._startPending = function () {\n\t        if (this._pendingFilter != null) {\n\t            return;\n\t        }\n\t        var self = this;\n\t        var pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n\t        this._pendingFilter = pendingFilter;\n\t        pendingFilter.then(function (filterId) {\n\t            function poll() {\n\t                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n\t                    if (self._pendingFilter != pendingFilter) {\n\t                        return null;\n\t                    }\n\t                    var seq = Promise.resolve();\n\t                    hashes.forEach(function (hash) {\n\t                        // @TODO: This should be garbage collected at some point... How? When?\n\t                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n\t                        seq = seq.then(function () {\n\t                            return self.getTransaction(hash).then(function (tx) {\n\t                                self.emit(\"pending\", tx);\n\t                                return null;\n\t                            });\n\t                        });\n\t                    });\n\t                    return seq.then(function () {\n\t                        return timer(1000);\n\t                    });\n\t                }).then(function () {\n\t                    if (self._pendingFilter != pendingFilter) {\n\t                        self.send(\"eth_uninstallFilter\", [filterId]);\n\t                        return;\n\t                    }\n\t                    setTimeout(function () { poll(); }, 0);\n\t                    return null;\n\t                }).catch(function (error) { });\n\t            }\n\t            poll();\n\t            return filterId;\n\t        }).catch(function (error) { });\n\t    };\n\t    JsonRpcProvider.prototype._stopEvent = function (event) {\n\t        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n\t            this._pendingFilter = null;\n\t        }\n\t        _super.prototype._stopEvent.call(this, event);\n\t    };\n\t    // Convert an ethers.js transaction into a JSON-RPC transaction\n\t    //  - gasLimit => gas\n\t    //  - All values hexlified\n\t    //  - All numeric values zero-striped\n\t    //  - All addresses are lowercased\n\t    // NOTE: This allows a TransactionRequest, but all values should be resolved\n\t    //       before this is called\n\t    // @TODO: This will likely be removed in future versions and prepareRequest\n\t    //        will be the preferred method for this.\n\t    JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {\n\t        // Check only allowed properties are given\n\t        var allowed = (0, lib$3.shallowCopy)(allowedTransactionKeys);\n\t        if (allowExtra) {\n\t            for (var key in allowExtra) {\n\t                if (allowExtra[key]) {\n\t                    allowed[key] = true;\n\t                }\n\t            }\n\t        }\n\t        (0, lib$3.checkProperties)(transaction, allowed);\n\t        var result = {};\n\t        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n\t        [\"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n\t            if (transaction[key] == null) {\n\t                return;\n\t            }\n\t            var value = (0, lib$1.hexValue)(transaction[key]);\n\t            if (key === \"gasLimit\") {\n\t                key = \"gas\";\n\t            }\n\t            result[key] = value;\n\t        });\n\t        [\"from\", \"to\", \"data\"].forEach(function (key) {\n\t            if (transaction[key] == null) {\n\t                return;\n\t            }\n\t            result[key] = (0, lib$1.hexlify)(transaction[key]);\n\t        });\n\t        if (transaction.accessList) {\n\t            result[\"accessList\"] = (0, lib$e.accessListify)(transaction.accessList);\n\t        }\n\t        return result;\n\t    };\n\t    return JsonRpcProvider;\n\t}(baseProvider.BaseProvider));\n\texports.JsonRpcProvider = JsonRpcProvider;\n\n\t});\n\n\tvar jsonRpcProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(jsonRpcProvider);\n\n\tvar browserWs = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.WebSocket = void 0;\n\n\n\tvar WS = null;\n\texports.WebSocket = WS;\n\ttry {\n\t    exports.WebSocket = WS = WebSocket;\n\t    if (WS == null) {\n\t        throw new Error(\"inject please\");\n\t    }\n\t}\n\tcatch (error) {\n\t    var logger_2 = new lib.Logger(_version$I.version);\n\t    exports.WebSocket = WS = function () {\n\t        logger_2.throwError(\"WebSockets not supported in this environment\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t            operation: \"new WebSocket()\"\n\t        });\n\t    };\n\t}\n\n\t});\n\n\tvar browserWs$1 = /*@__PURE__*/getDefaultExportFromCjs(browserWs);\n\n\tvar websocketProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.WebSocketProvider = void 0;\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\t/**\n\t *  Notes:\n\t *\n\t *  This provider differs a bit from the polling providers. One main\n\t *  difference is how it handles consistency. The polling providers\n\t *  will stall responses to ensure a consistent state, while this\n\t *  WebSocket provider assumes the connected backend will manage this.\n\t *\n\t *  For example, if a polling provider emits an event which indicates\n\t *  the event occurred in blockhash XXX, a call to fetch that block by\n\t *  its hash XXX, if not present will retry until it is present. This\n\t *  can occur when querying a pool of nodes that are mildly out of sync\n\t *  with each other.\n\t */\n\tvar NextId = 1;\n\t// For more info about the Real-time Event API see:\n\t//   https://geth.ethereum.org/docs/rpc/pubsub\n\tvar WebSocketProvider = /** @class */ (function (_super) {\n\t    __extends(WebSocketProvider, _super);\n\t    function WebSocketProvider(url, network) {\n\t        var _this = this;\n\t        // This will be added in the future; please open an issue to expedite\n\t        if (network === \"any\") {\n\t            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"network:any\"\n\t            });\n\t        }\n\t        _this = _super.call(this, url, network) || this;\n\t        _this._pollingInterval = -1;\n\t        _this._wsReady = false;\n\t        (0, lib$3.defineReadOnly)(_this, \"_websocket\", new browserWs.WebSocket(_this.connection.url));\n\t        (0, lib$3.defineReadOnly)(_this, \"_requests\", {});\n\t        (0, lib$3.defineReadOnly)(_this, \"_subs\", {});\n\t        (0, lib$3.defineReadOnly)(_this, \"_subIds\", {});\n\t        (0, lib$3.defineReadOnly)(_this, \"_detectNetwork\", _super.prototype.detectNetwork.call(_this));\n\t        // Stall sending requests until the socket is open...\n\t        _this._websocket.onopen = function () {\n\t            _this._wsReady = true;\n\t            Object.keys(_this._requests).forEach(function (id) {\n\t                _this._websocket.send(_this._requests[id].payload);\n\t            });\n\t        };\n\t        _this._websocket.onmessage = function (messageEvent) {\n\t            var data = messageEvent.data;\n\t            var result = JSON.parse(data);\n\t            if (result.id != null) {\n\t                var id = String(result.id);\n\t                var request = _this._requests[id];\n\t                delete _this._requests[id];\n\t                if (result.result !== undefined) {\n\t                    request.callback(null, result.result);\n\t                    _this.emit(\"debug\", {\n\t                        action: \"response\",\n\t                        request: JSON.parse(request.payload),\n\t                        response: result.result,\n\t                        provider: _this\n\t                    });\n\t                }\n\t                else {\n\t                    var error = null;\n\t                    if (result.error) {\n\t                        error = new Error(result.error.message || \"unknown error\");\n\t                        (0, lib$3.defineReadOnly)(error, \"code\", result.error.code || null);\n\t                        (0, lib$3.defineReadOnly)(error, \"response\", data);\n\t                    }\n\t                    else {\n\t                        error = new Error(\"unknown error\");\n\t                    }\n\t                    request.callback(error, undefined);\n\t                    _this.emit(\"debug\", {\n\t                        action: \"response\",\n\t                        error: error,\n\t                        request: JSON.parse(request.payload),\n\t                        provider: _this\n\t                    });\n\t                }\n\t            }\n\t            else if (result.method === \"eth_subscription\") {\n\t                // Subscription...\n\t                var sub = _this._subs[result.params.subscription];\n\t                if (sub) {\n\t                    //this.emit.apply(this,                  );\n\t                    sub.processFunc(result.params.result);\n\t                }\n\t            }\n\t            else {\n\t                console.warn(\"this should not happen\");\n\t            }\n\t        };\n\t        // This Provider does not actually poll, but we want to trigger\n\t        // poll events for things that depend on them (like stalling for\n\t        // block and transaction lookups)\n\t        var fauxPoll = setInterval(function () {\n\t            _this.emit(\"poll\");\n\t        }, 1000);\n\t        if (fauxPoll.unref) {\n\t            fauxPoll.unref();\n\t        }\n\t        return _this;\n\t    }\n\t    WebSocketProvider.prototype.detectNetwork = function () {\n\t        return this._detectNetwork;\n\t    };\n\t    Object.defineProperty(WebSocketProvider.prototype, \"pollingInterval\", {\n\t        get: function () {\n\t            return 0;\n\t        },\n\t        set: function (value) {\n\t            logger.throwError(\"cannot set polling interval on WebSocketProvider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"setPollingInterval\"\n\t            });\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    WebSocketProvider.prototype.resetEventsBlock = function (blockNumber) {\n\t        logger.throwError(\"cannot reset events block on WebSocketProvider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t            operation: \"resetEventBlock\"\n\t        });\n\t    };\n\t    WebSocketProvider.prototype.poll = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                return [2 /*return*/, null];\n\t            });\n\t        });\n\t    };\n\t    Object.defineProperty(WebSocketProvider.prototype, \"polling\", {\n\t        set: function (value) {\n\t            if (!value) {\n\t                return;\n\t            }\n\t            logger.throwError(\"cannot set polling on WebSocketProvider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"setPolling\"\n\t            });\n\t        },\n\t        enumerable: false,\n\t        configurable: true\n\t    });\n\t    WebSocketProvider.prototype.send = function (method, params) {\n\t        var _this = this;\n\t        var rid = NextId++;\n\t        return new Promise(function (resolve, reject) {\n\t            function callback(error, result) {\n\t                if (error) {\n\t                    return reject(error);\n\t                }\n\t                return resolve(result);\n\t            }\n\t            var payload = JSON.stringify({\n\t                method: method,\n\t                params: params,\n\t                id: rid,\n\t                jsonrpc: \"2.0\"\n\t            });\n\t            _this.emit(\"debug\", {\n\t                action: \"request\",\n\t                request: JSON.parse(payload),\n\t                provider: _this\n\t            });\n\t            _this._requests[String(rid)] = { callback: callback, payload: payload };\n\t            if (_this._wsReady) {\n\t                _this._websocket.send(payload);\n\t            }\n\t        });\n\t    };\n\t    WebSocketProvider.defaultUrl = function () {\n\t        return \"ws:/\\/localhost:8546\";\n\t    };\n\t    WebSocketProvider.prototype._subscribe = function (tag, param, processFunc) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var subIdPromise, subId;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        subIdPromise = this._subIds[tag];\n\t                        if (subIdPromise == null) {\n\t                            subIdPromise = Promise.all(param).then(function (param) {\n\t                                return _this.send(\"eth_subscribe\", param);\n\t                            });\n\t                            this._subIds[tag] = subIdPromise;\n\t                        }\n\t                        return [4 /*yield*/, subIdPromise];\n\t                    case 1:\n\t                        subId = _a.sent();\n\t                        this._subs[subId] = { tag: tag, processFunc: processFunc };\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    WebSocketProvider.prototype._startEvent = function (event) {\n\t        var _this = this;\n\t        switch (event.type) {\n\t            case \"block\":\n\t                this._subscribe(\"block\", [\"newHeads\"], function (result) {\n\t                    var blockNumber = lib$2.BigNumber.from(result.number).toNumber();\n\t                    _this._emitted.block = blockNumber;\n\t                    _this.emit(\"block\", blockNumber);\n\t                });\n\t                break;\n\t            case \"pending\":\n\t                this._subscribe(\"pending\", [\"newPendingTransactions\"], function (result) {\n\t                    _this.emit(\"pending\", result);\n\t                });\n\t                break;\n\t            case \"filter\":\n\t                this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], function (result) {\n\t                    if (result.removed == null) {\n\t                        result.removed = false;\n\t                    }\n\t                    _this.emit(event.filter, _this.formatter.filterLog(result));\n\t                });\n\t                break;\n\t            case \"tx\": {\n\t                var emitReceipt_1 = function (event) {\n\t                    var hash = event.hash;\n\t                    _this.getTransactionReceipt(hash).then(function (receipt) {\n\t                        if (!receipt) {\n\t                            return;\n\t                        }\n\t                        _this.emit(hash, receipt);\n\t                    });\n\t                };\n\t                // In case it is already mined\n\t                emitReceipt_1(event);\n\t                // To keep things simple, we start up a single newHeads subscription\n\t                // to keep an eye out for transactions we are watching for.\n\t                // Starting a subscription for an event (i.e. \"tx\") that is already\n\t                // running is (basically) a nop.\n\t                this._subscribe(\"tx\", [\"newHeads\"], function (result) {\n\t                    _this._events.filter(function (e) { return (e.type === \"tx\"); }).forEach(emitReceipt_1);\n\t                });\n\t                break;\n\t            }\n\t            // Nothing is needed\n\t            case \"debug\":\n\t            case \"poll\":\n\t            case \"willPoll\":\n\t            case \"didPoll\":\n\t            case \"error\":\n\t                break;\n\t            default:\n\t                console.log(\"unhandled:\", event);\n\t                break;\n\t        }\n\t    };\n\t    WebSocketProvider.prototype._stopEvent = function (event) {\n\t        var _this = this;\n\t        var tag = event.tag;\n\t        if (event.type === \"tx\") {\n\t            // There are remaining transaction event listeners\n\t            if (this._events.filter(function (e) { return (e.type === \"tx\"); }).length) {\n\t                return;\n\t            }\n\t            tag = \"tx\";\n\t        }\n\t        else if (this.listenerCount(event.event)) {\n\t            // There are remaining event listeners\n\t            return;\n\t        }\n\t        var subId = this._subIds[tag];\n\t        if (!subId) {\n\t            return;\n\t        }\n\t        delete this._subIds[tag];\n\t        subId.then(function (subId) {\n\t            if (!_this._subs[subId]) {\n\t                return;\n\t            }\n\t            delete _this._subs[subId];\n\t            _this.send(\"eth_unsubscribe\", [subId]);\n\t        });\n\t    };\n\t    WebSocketProvider.prototype.destroy = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (!(this._websocket.readyState === browserWs.WebSocket.CONNECTING)) return [3 /*break*/, 2];\n\t                        return [4 /*yield*/, (new Promise(function (resolve) {\n\t                                _this._websocket.onopen = function () {\n\t                                    resolve(true);\n\t                                };\n\t                                _this._websocket.onerror = function () {\n\t                                    resolve(false);\n\t                                };\n\t                            }))];\n\t                    case 1:\n\t                        _a.sent();\n\t                        _a.label = 2;\n\t                    case 2:\n\t                        // Hangup\n\t                        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n\t                        this._websocket.close(1000);\n\t                        return [2 /*return*/];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    return WebSocketProvider;\n\t}(jsonRpcProvider.JsonRpcProvider));\n\texports.WebSocketProvider = WebSocketProvider;\n\n\t});\n\n\tvar websocketProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(websocketProvider);\n\n\tvar urlJsonRpcProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.UrlJsonRpcProvider = exports.StaticJsonRpcProvider = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\n\t// A StaticJsonRpcProvider is useful when you *know* for certain that\n\t// the backend will never change, as it never calls eth_chainId to\n\t// verify its backend. However, if the backend does change, the effects\n\t// are undefined and may include:\n\t// - inconsistent results\n\t// - locking up the UI\n\t// - block skew warnings\n\t// - wrong results\n\t// If the network is not explicit (i.e. auto-detection is expected), the\n\t// node MUST be running and available to respond to requests BEFORE this\n\t// is instantiated.\n\tvar StaticJsonRpcProvider = /** @class */ (function (_super) {\n\t    __extends(StaticJsonRpcProvider, _super);\n\t    function StaticJsonRpcProvider() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    StaticJsonRpcProvider.prototype.detectNetwork = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var network;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        network = this.network;\n\t                        if (!(network == null)) return [3 /*break*/, 2];\n\t                        return [4 /*yield*/, _super.prototype.detectNetwork.call(this)];\n\t                    case 1:\n\t                        network = _a.sent();\n\t                        if (!network) {\n\t                            logger.throwError(\"no network detected\", lib.Logger.errors.UNKNOWN_ERROR, {});\n\t                        }\n\t                        // If still not set, set it\n\t                        if (this._network == null) {\n\t                            // A static network does not support \"any\"\n\t                            (0, lib$3.defineReadOnly)(this, \"_network\", network);\n\t                            this.emit(\"network\", network, null);\n\t                        }\n\t                        _a.label = 2;\n\t                    case 2: return [2 /*return*/, network];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    return StaticJsonRpcProvider;\n\t}(jsonRpcProvider.JsonRpcProvider));\n\texports.StaticJsonRpcProvider = StaticJsonRpcProvider;\n\tvar UrlJsonRpcProvider = /** @class */ (function (_super) {\n\t    __extends(UrlJsonRpcProvider, _super);\n\t    function UrlJsonRpcProvider(network, apiKey) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkAbstract(_newTarget, UrlJsonRpcProvider);\n\t        // Normalize the Network and API Key\n\t        network = (0, lib$3.getStatic)(_newTarget, \"getNetwork\")(network);\n\t        apiKey = (0, lib$3.getStatic)(_newTarget, \"getApiKey\")(apiKey);\n\t        var connection = (0, lib$3.getStatic)(_newTarget, \"getUrl\")(network, apiKey);\n\t        _this = _super.call(this, connection, network) || this;\n\t        if (typeof (apiKey) === \"string\") {\n\t            (0, lib$3.defineReadOnly)(_this, \"apiKey\", apiKey);\n\t        }\n\t        else if (apiKey != null) {\n\t            Object.keys(apiKey).forEach(function (key) {\n\t                (0, lib$3.defineReadOnly)(_this, key, apiKey[key]);\n\t            });\n\t        }\n\t        return _this;\n\t    }\n\t    UrlJsonRpcProvider.prototype._startPending = function () {\n\t        logger.warn(\"WARNING: API provider does not support pending filters\");\n\t    };\n\t    UrlJsonRpcProvider.prototype.isCommunityResource = function () {\n\t        return false;\n\t    };\n\t    UrlJsonRpcProvider.prototype.getSigner = function (address) {\n\t        return logger.throwError(\"API provider does not support signing\", lib.Logger.errors.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });\n\t    };\n\t    UrlJsonRpcProvider.prototype.listAccounts = function () {\n\t        return Promise.resolve([]);\n\t    };\n\t    // Return a defaultApiKey if null, otherwise validate the API key\n\t    UrlJsonRpcProvider.getApiKey = function (apiKey) {\n\t        return apiKey;\n\t    };\n\t    // Returns the url or connection for the given network and API key. The\n\t    // API key will have been sanitized by the getApiKey first, so any validation\n\t    // or transformations can be done there.\n\t    UrlJsonRpcProvider.getUrl = function (network, apiKey) {\n\t        return logger.throwError(\"not implemented; sub-classes must override getUrl\", lib.Logger.errors.NOT_IMPLEMENTED, {\n\t            operation: \"getUrl\"\n\t        });\n\t    };\n\t    return UrlJsonRpcProvider;\n\t}(StaticJsonRpcProvider));\n\texports.UrlJsonRpcProvider = UrlJsonRpcProvider;\n\n\t});\n\n\tvar urlJsonRpcProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(urlJsonRpcProvider);\n\n\tvar alchemyProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.AlchemyProvider = exports.AlchemyWebSocketProvider = void 0;\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\n\t// This key was provided to ethers.js by Alchemy to be used by the\n\t// default provider, but it is recommended that for your own\n\t// production environments, that you acquire your own API key at:\n\t//   https://dashboard.alchemyapi.io\n\tvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\n\tvar AlchemyWebSocketProvider = /** @class */ (function (_super) {\n\t    __extends(AlchemyWebSocketProvider, _super);\n\t    function AlchemyWebSocketProvider(network, apiKey) {\n\t        var _this = this;\n\t        var provider = new AlchemyProvider(network, apiKey);\n\t        var url = provider.connection.url.replace(/^http/i, \"ws\")\n\t            .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\t        _this = _super.call(this, url, provider.network) || this;\n\t        (0, lib$3.defineReadOnly)(_this, \"apiKey\", provider.apiKey);\n\t        return _this;\n\t    }\n\t    AlchemyWebSocketProvider.prototype.isCommunityResource = function () {\n\t        return (this.apiKey === defaultApiKey);\n\t    };\n\t    return AlchemyWebSocketProvider;\n\t}(websocketProvider.WebSocketProvider));\n\texports.AlchemyWebSocketProvider = AlchemyWebSocketProvider;\n\tvar AlchemyProvider = /** @class */ (function (_super) {\n\t    __extends(AlchemyProvider, _super);\n\t    function AlchemyProvider() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    AlchemyProvider.getWebSocketProvider = function (network, apiKey) {\n\t        return new AlchemyWebSocketProvider(network, apiKey);\n\t    };\n\t    AlchemyProvider.getApiKey = function (apiKey) {\n\t        if (apiKey == null) {\n\t            return defaultApiKey;\n\t        }\n\t        if (apiKey && typeof (apiKey) !== \"string\") {\n\t            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n\t        }\n\t        return apiKey;\n\t    };\n\t    AlchemyProvider.getUrl = function (network, apiKey) {\n\t        var host = null;\n\t        switch (network.name) {\n\t            case \"homestead\":\n\t                host = \"eth-mainnet.alchemyapi.io/v2/\";\n\t                break;\n\t            case \"ropsten\":\n\t                host = \"eth-ropsten.alchemyapi.io/v2/\";\n\t                break;\n\t            case \"rinkeby\":\n\t                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n\t                break;\n\t            case \"goerli\":\n\t                host = \"eth-goerli.alchemyapi.io/v2/\";\n\t                break;\n\t            case \"kovan\":\n\t                host = \"eth-kovan.alchemyapi.io/v2/\";\n\t                break;\n\t            case \"matic\":\n\t                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n\t                break;\n\t            case \"maticmum\":\n\t                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n\t                break;\n\t            default:\n\t                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n\t        }\n\t        return {\n\t            allowGzip: true,\n\t            url: (\"https:/\" + \"/\" + host + apiKey),\n\t            throttleCallback: function (attempt, url) {\n\t                if (apiKey === defaultApiKey) {\n\t                    (0, formatter.showThrottleMessage)();\n\t                }\n\t                return Promise.resolve(true);\n\t            }\n\t        };\n\t    };\n\t    AlchemyProvider.prototype.isCommunityResource = function () {\n\t        return (this.apiKey === defaultApiKey);\n\t    };\n\t    return AlchemyProvider;\n\t}(urlJsonRpcProvider.UrlJsonRpcProvider));\n\texports.AlchemyProvider = AlchemyProvider;\n\n\t});\n\n\tvar alchemyProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(alchemyProvider);\n\n\tvar cloudflareProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.CloudflareProvider = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\tvar CloudflareProvider = /** @class */ (function (_super) {\n\t    __extends(CloudflareProvider, _super);\n\t    function CloudflareProvider() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    CloudflareProvider.getApiKey = function (apiKey) {\n\t        if (apiKey != null) {\n\t            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n\t        }\n\t        return null;\n\t    };\n\t    CloudflareProvider.getUrl = function (network, apiKey) {\n\t        var host = null;\n\t        switch (network.name) {\n\t            case \"homestead\":\n\t                host = \"https://cloudflare-eth.com/\";\n\t                break;\n\t            default:\n\t                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n\t        }\n\t        return host;\n\t    };\n\t    CloudflareProvider.prototype.perform = function (method, params) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var block;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (!(method === \"getBlockNumber\")) return [3 /*break*/, 2];\n\t                        return [4 /*yield*/, _super.prototype.perform.call(this, \"getBlock\", { blockTag: \"latest\" })];\n\t                    case 1:\n\t                        block = _a.sent();\n\t                        return [2 /*return*/, block.number];\n\t                    case 2: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    return CloudflareProvider;\n\t}(urlJsonRpcProvider.UrlJsonRpcProvider));\n\texports.CloudflareProvider = CloudflareProvider;\n\n\t});\n\n\tvar cloudflareProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(cloudflareProvider);\n\n\tvar etherscanProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.EtherscanProvider = void 0;\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\n\t// The transaction has already been sanitized by the calls in Provider\n\tfunction getTransactionPostData(transaction) {\n\t    var result = {};\n\t    for (var key in transaction) {\n\t        if (transaction[key] == null) {\n\t            continue;\n\t        }\n\t        var value = transaction[key];\n\t        if (key === \"type\" && value === 0) {\n\t            continue;\n\t        }\n\t        // Quantity-types require no leading zero, unless 0\n\t        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\n\t            value = (0, lib$1.hexValue)((0, lib$1.hexlify)(value));\n\t        }\n\t        else if (key === \"accessList\") {\n\t            value = \"[\" + (0, lib$e.accessListify)(value).map(function (set) {\n\t                return \"{address:\\\"\" + set.address + \"\\\",storageKeys:[\\\"\" + set.storageKeys.join('\",\"') + \"\\\"]}\";\n\t            }).join(\",\") + \"]\";\n\t        }\n\t        else {\n\t            value = (0, lib$1.hexlify)(value);\n\t        }\n\t        result[key] = value;\n\t    }\n\t    return result;\n\t}\n\tfunction getResult(result) {\n\t    // getLogs, getHistory have weird success responses\n\t    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n\t        return result.result;\n\t    }\n\t    if (result.status != 1 || result.message != \"OK\") {\n\t        var error = new Error(\"invalid response\");\n\t        error.result = JSON.stringify(result);\n\t        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n\t            error.throttleRetry = true;\n\t        }\n\t        throw error;\n\t    }\n\t    return result.result;\n\t}\n\tfunction getJsonResult(result) {\n\t    // This response indicates we are being throttled\n\t    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n\t        var error = new Error(\"throttled response\");\n\t        error.result = JSON.stringify(result);\n\t        error.throttleRetry = true;\n\t        throw error;\n\t    }\n\t    if (result.jsonrpc != \"2.0\") {\n\t        // @TODO: not any\n\t        var error = new Error(\"invalid response\");\n\t        error.result = JSON.stringify(result);\n\t        throw error;\n\t    }\n\t    if (result.error) {\n\t        // @TODO: not any\n\t        var error = new Error(result.error.message || \"unknown error\");\n\t        if (result.error.code) {\n\t            error.code = result.error.code;\n\t        }\n\t        if (result.error.data) {\n\t            error.data = result.error.data;\n\t        }\n\t        throw error;\n\t    }\n\t    return result.result;\n\t}\n\t// The blockTag was normalized as a string by the Provider pre-perform operations\n\tfunction checkLogTag(blockTag) {\n\t    if (blockTag === \"pending\") {\n\t        throw new Error(\"pending not supported\");\n\t    }\n\t    if (blockTag === \"latest\") {\n\t        return blockTag;\n\t    }\n\t    return parseInt(blockTag.substring(2), 16);\n\t}\n\tvar defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\tfunction checkError(method, error, transaction) {\n\t    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n\t    // incompatibility; maybe for v6 consider forwarding reverts as errors\n\t    if (method === \"call\" && error.code === lib.Logger.errors.SERVER_ERROR) {\n\t        var e = error.error;\n\t        // Etherscan keeps changing their string\n\t        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n\t            // Etherscan prefixes the data like \"Reverted 0x1234\"\n\t            var data = e.data;\n\t            if (data) {\n\t                data = \"0x\" + data.replace(/^.*0x/i, \"\");\n\t            }\n\t            if ((0, lib$1.isHexString)(data)) {\n\t                return data;\n\t            }\n\t            logger.throwError(\"missing revert data in call exception\", lib.Logger.errors.CALL_EXCEPTION, {\n\t                error: error,\n\t                data: \"0x\"\n\t            });\n\t        }\n\t    }\n\t    // Get the message from any nested error structure\n\t    var message = error.message;\n\t    if (error.code === lib.Logger.errors.SERVER_ERROR) {\n\t        if (error.error && typeof (error.error.message) === \"string\") {\n\t            message = error.error.message;\n\t        }\n\t        else if (typeof (error.body) === \"string\") {\n\t            message = error.body;\n\t        }\n\t        else if (typeof (error.responseText) === \"string\") {\n\t            message = error.responseText;\n\t        }\n\t    }\n\t    message = (message || \"\").toLowerCase();\n\t    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n\t    if (message.match(/insufficient funds/)) {\n\t        logger.throwError(\"insufficient funds for intrinsic transaction cost\", lib.Logger.errors.INSUFFICIENT_FUNDS, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    // \"Transaction with the same hash was already imported.\"\n\t    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n\t        logger.throwError(\"nonce has already been used\", lib.Logger.errors.NONCE_EXPIRED, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n\t    if (message.match(/another transaction with same nonce/)) {\n\t        logger.throwError(\"replacement fee too low\", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    if (message.match(/execution failed due to an exception|execution reverted/)) {\n\t        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n\t            error: error,\n\t            method: method,\n\t            transaction: transaction\n\t        });\n\t    }\n\t    throw error;\n\t}\n\tvar EtherscanProvider = /** @class */ (function (_super) {\n\t    __extends(EtherscanProvider, _super);\n\t    function EtherscanProvider(network, apiKey) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, EtherscanProvider);\n\t        _this = _super.call(this, network) || this;\n\t        (0, lib$3.defineReadOnly)(_this, \"baseUrl\", _this.getBaseUrl());\n\t        (0, lib$3.defineReadOnly)(_this, \"apiKey\", apiKey || defaultApiKey);\n\t        return _this;\n\t    }\n\t    EtherscanProvider.prototype.getBaseUrl = function () {\n\t        switch (this.network ? this.network.name : \"invalid\") {\n\t            case \"homestead\":\n\t                return \"https:/\\/api.etherscan.io\";\n\t            case \"ropsten\":\n\t                return \"https:/\\/api-ropsten.etherscan.io\";\n\t            case \"rinkeby\":\n\t                return \"https:/\\/api-rinkeby.etherscan.io\";\n\t            case \"kovan\":\n\t                return \"https:/\\/api-kovan.etherscan.io\";\n\t            case \"goerli\":\n\t                return \"https:/\\/api-goerli.etherscan.io\";\n\t            default:\n\t        }\n\t        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n\t    };\n\t    EtherscanProvider.prototype.getUrl = function (module, params) {\n\t        var query = Object.keys(params).reduce(function (accum, key) {\n\t            var value = params[key];\n\t            if (value != null) {\n\t                accum += \"&\" + key + \"=\" + value;\n\t            }\n\t            return accum;\n\t        }, \"\");\n\t        var apiKey = ((this.apiKey) ? \"&apikey=\" + this.apiKey : \"\");\n\t        return this.baseUrl + \"/api?module=\" + module + query + apiKey;\n\t    };\n\t    EtherscanProvider.prototype.getPostUrl = function () {\n\t        return this.baseUrl + \"/api\";\n\t    };\n\t    EtherscanProvider.prototype.getPostData = function (module, params) {\n\t        params.module = module;\n\t        params.apikey = this.apiKey;\n\t        return params;\n\t    };\n\t    EtherscanProvider.prototype.fetch = function (module, params, post) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var url, payload, procFunc, connection, payloadStr, result;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        url = (post ? this.getPostUrl() : this.getUrl(module, params));\n\t                        payload = (post ? this.getPostData(module, params) : null);\n\t                        procFunc = (module === \"proxy\") ? getJsonResult : getResult;\n\t                        this.emit(\"debug\", {\n\t                            action: \"request\",\n\t                            request: url,\n\t                            provider: this\n\t                        });\n\t                        connection = {\n\t                            url: url,\n\t                            throttleSlotInterval: 1000,\n\t                            throttleCallback: function (attempt, url) {\n\t                                if (_this.isCommunityResource()) {\n\t                                    (0, formatter.showThrottleMessage)();\n\t                                }\n\t                                return Promise.resolve(true);\n\t                            }\n\t                        };\n\t                        payloadStr = null;\n\t                        if (payload) {\n\t                            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n\t                            payloadStr = Object.keys(payload).map(function (key) {\n\t                                return key + \"=\" + payload[key];\n\t                            }).join(\"&\");\n\t                        }\n\t                        return [4 /*yield*/, (0, lib$q.fetchJson)(connection, payloadStr, procFunc || getJsonResult)];\n\t                    case 1:\n\t                        result = _a.sent();\n\t                        this.emit(\"debug\", {\n\t                            action: \"response\",\n\t                            request: url,\n\t                            response: (0, lib$3.deepCopy)(result),\n\t                            provider: this\n\t                        });\n\t                        return [2 /*return*/, result];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    EtherscanProvider.prototype.detectNetwork = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            return __generator(this, function (_a) {\n\t                return [2 /*return*/, this.network];\n\t            });\n\t        });\n\t    };\n\t    EtherscanProvider.prototype.perform = function (method, params) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var _a, postData, error_1, postData, error_2, args, topic0, logs, blocks, i, log, block, _b;\n\t            return __generator(this, function (_c) {\n\t                switch (_c.label) {\n\t                    case 0:\n\t                        _a = method;\n\t                        switch (_a) {\n\t                            case \"getBlockNumber\": return [3 /*break*/, 1];\n\t                            case \"getGasPrice\": return [3 /*break*/, 2];\n\t                            case \"getBalance\": return [3 /*break*/, 3];\n\t                            case \"getTransactionCount\": return [3 /*break*/, 4];\n\t                            case \"getCode\": return [3 /*break*/, 5];\n\t                            case \"getStorageAt\": return [3 /*break*/, 6];\n\t                            case \"sendTransaction\": return [3 /*break*/, 7];\n\t                            case \"getBlock\": return [3 /*break*/, 8];\n\t                            case \"getTransaction\": return [3 /*break*/, 9];\n\t                            case \"getTransactionReceipt\": return [3 /*break*/, 10];\n\t                            case \"call\": return [3 /*break*/, 11];\n\t                            case \"estimateGas\": return [3 /*break*/, 15];\n\t                            case \"getLogs\": return [3 /*break*/, 19];\n\t                            case \"getEtherPrice\": return [3 /*break*/, 26];\n\t                        }\n\t                        return [3 /*break*/, 28];\n\t                    case 1: return [2 /*return*/, this.fetch(\"proxy\", { action: \"eth_blockNumber\" })];\n\t                    case 2: return [2 /*return*/, this.fetch(\"proxy\", { action: \"eth_gasPrice\" })];\n\t                    case 3: \n\t                    // Returns base-10 result\n\t                    return [2 /*return*/, this.fetch(\"account\", {\n\t                            action: \"balance\",\n\t                            address: params.address,\n\t                            tag: params.blockTag\n\t                        })];\n\t                    case 4: return [2 /*return*/, this.fetch(\"proxy\", {\n\t                            action: \"eth_getTransactionCount\",\n\t                            address: params.address,\n\t                            tag: params.blockTag\n\t                        })];\n\t                    case 5: return [2 /*return*/, this.fetch(\"proxy\", {\n\t                            action: \"eth_getCode\",\n\t                            address: params.address,\n\t                            tag: params.blockTag\n\t                        })];\n\t                    case 6: return [2 /*return*/, this.fetch(\"proxy\", {\n\t                            action: \"eth_getStorageAt\",\n\t                            address: params.address,\n\t                            position: params.position,\n\t                            tag: params.blockTag\n\t                        })];\n\t                    case 7: return [2 /*return*/, this.fetch(\"proxy\", {\n\t                            action: \"eth_sendRawTransaction\",\n\t                            hex: params.signedTransaction\n\t                        }, true).catch(function (error) {\n\t                            return checkError(\"sendTransaction\", error, params.signedTransaction);\n\t                        })];\n\t                    case 8:\n\t                        if (params.blockTag) {\n\t                            return [2 /*return*/, this.fetch(\"proxy\", {\n\t                                    action: \"eth_getBlockByNumber\",\n\t                                    tag: params.blockTag,\n\t                                    boolean: (params.includeTransactions ? \"true\" : \"false\")\n\t                                })];\n\t                        }\n\t                        throw new Error(\"getBlock by blockHash not implemented\");\n\t                    case 9: return [2 /*return*/, this.fetch(\"proxy\", {\n\t                            action: \"eth_getTransactionByHash\",\n\t                            txhash: params.transactionHash\n\t                        })];\n\t                    case 10: return [2 /*return*/, this.fetch(\"proxy\", {\n\t                            action: \"eth_getTransactionReceipt\",\n\t                            txhash: params.transactionHash\n\t                        })];\n\t                    case 11:\n\t                        if (params.blockTag !== \"latest\") {\n\t                            throw new Error(\"EtherscanProvider does not support blockTag for call\");\n\t                        }\n\t                        postData = getTransactionPostData(params.transaction);\n\t                        postData.module = \"proxy\";\n\t                        postData.action = \"eth_call\";\n\t                        _c.label = 12;\n\t                    case 12:\n\t                        _c.trys.push([12, 14, , 15]);\n\t                        return [4 /*yield*/, this.fetch(\"proxy\", postData, true)];\n\t                    case 13: return [2 /*return*/, _c.sent()];\n\t                    case 14:\n\t                        error_1 = _c.sent();\n\t                        return [2 /*return*/, checkError(\"call\", error_1, params.transaction)];\n\t                    case 15:\n\t                        postData = getTransactionPostData(params.transaction);\n\t                        postData.module = \"proxy\";\n\t                        postData.action = \"eth_estimateGas\";\n\t                        _c.label = 16;\n\t                    case 16:\n\t                        _c.trys.push([16, 18, , 19]);\n\t                        return [4 /*yield*/, this.fetch(\"proxy\", postData, true)];\n\t                    case 17: return [2 /*return*/, _c.sent()];\n\t                    case 18:\n\t                        error_2 = _c.sent();\n\t                        return [2 /*return*/, checkError(\"estimateGas\", error_2, params.transaction)];\n\t                    case 19:\n\t                        args = { action: \"getLogs\" };\n\t                        if (params.filter.fromBlock) {\n\t                            args.fromBlock = checkLogTag(params.filter.fromBlock);\n\t                        }\n\t                        if (params.filter.toBlock) {\n\t                            args.toBlock = checkLogTag(params.filter.toBlock);\n\t                        }\n\t                        if (params.filter.address) {\n\t                            args.address = params.filter.address;\n\t                        }\n\t                        // @TODO: We can handle slightly more complicated logs using the logs API\n\t                        if (params.filter.topics && params.filter.topics.length > 0) {\n\t                            if (params.filter.topics.length > 1) {\n\t                                logger.throwError(\"unsupported topic count\", lib.Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n\t                            }\n\t                            if (params.filter.topics.length === 1) {\n\t                                topic0 = params.filter.topics[0];\n\t                                if (typeof (topic0) !== \"string\" || topic0.length !== 66) {\n\t                                    logger.throwError(\"unsupported topic format\", lib.Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n\t                                }\n\t                                args.topic0 = topic0;\n\t                            }\n\t                        }\n\t                        return [4 /*yield*/, this.fetch(\"logs\", args)];\n\t                    case 20:\n\t                        logs = _c.sent();\n\t                        blocks = {};\n\t                        i = 0;\n\t                        _c.label = 21;\n\t                    case 21:\n\t                        if (!(i < logs.length)) return [3 /*break*/, 25];\n\t                        log = logs[i];\n\t                        if (log.blockHash != null) {\n\t                            return [3 /*break*/, 24];\n\t                        }\n\t                        if (!(blocks[log.blockNumber] == null)) return [3 /*break*/, 23];\n\t                        return [4 /*yield*/, this.getBlock(log.blockNumber)];\n\t                    case 22:\n\t                        block = _c.sent();\n\t                        if (block) {\n\t                            blocks[log.blockNumber] = block.hash;\n\t                        }\n\t                        _c.label = 23;\n\t                    case 23:\n\t                        log.blockHash = blocks[log.blockNumber];\n\t                        _c.label = 24;\n\t                    case 24:\n\t                        i++;\n\t                        return [3 /*break*/, 21];\n\t                    case 25: return [2 /*return*/, logs];\n\t                    case 26:\n\t                        if (this.network.name !== \"homestead\") {\n\t                            return [2 /*return*/, 0.0];\n\t                        }\n\t                        _b = parseFloat;\n\t                        return [4 /*yield*/, this.fetch(\"stats\", { action: \"ethprice\" })];\n\t                    case 27: return [2 /*return*/, _b.apply(void 0, [(_c.sent()).ethusd])];\n\t                    case 28: return [3 /*break*/, 29];\n\t                    case 29: return [2 /*return*/, _super.prototype.perform.call(this, method, params)];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    // Note: The `page` page parameter only allows pagination within the\n\t    //       10,000 window available without a page and offset parameter\n\t    //       Error: Result window is too large, PageNo x Offset size must\n\t    //              be less than or equal to 10000\n\t    EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var params, result;\n\t            var _a;\n\t            var _this = this;\n\t            return __generator(this, function (_b) {\n\t                switch (_b.label) {\n\t                    case 0:\n\t                        _a = {\n\t                            action: \"txlist\"\n\t                        };\n\t                        return [4 /*yield*/, this.resolveName(addressOrName)];\n\t                    case 1:\n\t                        params = (_a.address = (_b.sent()),\n\t                            _a.startblock = ((startBlock == null) ? 0 : startBlock),\n\t                            _a.endblock = ((endBlock == null) ? 99999999 : endBlock),\n\t                            _a.sort = \"asc\",\n\t                            _a);\n\t                        return [4 /*yield*/, this.fetch(\"account\", params)];\n\t                    case 2:\n\t                        result = _b.sent();\n\t                        return [2 /*return*/, result.map(function (tx) {\n\t                                [\"contractAddress\", \"to\"].forEach(function (key) {\n\t                                    if (tx[key] == \"\") {\n\t                                        delete tx[key];\n\t                                    }\n\t                                });\n\t                                if (tx.creates == null && tx.contractAddress != null) {\n\t                                    tx.creates = tx.contractAddress;\n\t                                }\n\t                                var item = _this.formatter.transactionResponse(tx);\n\t                                if (tx.timeStamp) {\n\t                                    item.timestamp = parseInt(tx.timeStamp);\n\t                                }\n\t                                return item;\n\t                            })];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    EtherscanProvider.prototype.isCommunityResource = function () {\n\t        return (this.apiKey === defaultApiKey);\n\t    };\n\t    return EtherscanProvider;\n\t}(baseProvider.BaseProvider));\n\texports.EtherscanProvider = EtherscanProvider;\n\n\t});\n\n\tvar etherscanProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(etherscanProvider);\n\n\tvar fallbackProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tvar __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {\n\t    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n\t    return new (P || (P = Promise))(function (resolve, reject) {\n\t        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n\t        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n\t        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n\t        step((generator = generator.apply(thisArg, _arguments || [])).next());\n\t    });\n\t};\n\tvar __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {\n\t    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n\t    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n\t    function verb(n) { return function (v) { return step([n, v]); }; }\n\t    function step(op) {\n\t        if (f) throw new TypeError(\"Generator is already executing.\");\n\t        while (_) try {\n\t            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n\t            if (y = 0, t) op = [op[0] & 2, t.value];\n\t            switch (op[0]) {\n\t                case 0: case 1: t = op; break;\n\t                case 4: _.label++; return { value: op[1], done: false };\n\t                case 5: _.label++; y = op[1]; op = [0]; continue;\n\t                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n\t                default:\n\t                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n\t                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n\t                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n\t                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n\t                    if (t[2]) _.ops.pop();\n\t                    _.trys.pop(); continue;\n\t            }\n\t            op = body.call(thisArg, _);\n\t        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n\t        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n\t    }\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.FallbackProvider = void 0;\n\n\n\n\n\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\tfunction now() { return (new Date()).getTime(); }\n\t// Returns to network as long as all agree, or null if any is null.\n\t// Throws an error if any two networks do not match.\n\tfunction checkNetworks(networks) {\n\t    var result = null;\n\t    for (var i = 0; i < networks.length; i++) {\n\t        var network = networks[i];\n\t        // Null! We do not know our network; bail.\n\t        if (network == null) {\n\t            return null;\n\t        }\n\t        if (result) {\n\t            // Make sure the network matches the previous networks\n\t            if (!(result.name === network.name && result.chainId === network.chainId &&\n\t                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\t                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n\t            }\n\t        }\n\t        else {\n\t            result = network;\n\t        }\n\t    }\n\t    return result;\n\t}\n\tfunction median(values, maxDelta) {\n\t    values = values.slice().sort();\n\t    var middle = Math.floor(values.length / 2);\n\t    // Odd length; take the middle\n\t    if (values.length % 2) {\n\t        return values[middle];\n\t    }\n\t    // Even length; take the average of the two middle\n\t    var a = values[middle - 1], b = values[middle];\n\t    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n\t        return null;\n\t    }\n\t    return (a + b) / 2;\n\t}\n\tfunction serialize(value) {\n\t    if (value === null) {\n\t        return \"null\";\n\t    }\n\t    else if (typeof (value) === \"number\" || typeof (value) === \"boolean\") {\n\t        return JSON.stringify(value);\n\t    }\n\t    else if (typeof (value) === \"string\") {\n\t        return value;\n\t    }\n\t    else if (lib$2.BigNumber.isBigNumber(value)) {\n\t        return value.toString();\n\t    }\n\t    else if (Array.isArray(value)) {\n\t        return JSON.stringify(value.map(function (i) { return serialize(i); }));\n\t    }\n\t    else if (typeof (value) === \"object\") {\n\t        var keys = Object.keys(value);\n\t        keys.sort();\n\t        return \"{\" + keys.map(function (key) {\n\t            var v = value[key];\n\t            if (typeof (v) === \"function\") {\n\t                v = \"[function]\";\n\t            }\n\t            else {\n\t                v = serialize(v);\n\t            }\n\t            return JSON.stringify(key) + \":\" + v;\n\t        }).join(\",\") + \"}\";\n\t    }\n\t    throw new Error(\"unknown value type: \" + typeof (value));\n\t}\n\t// Next request ID to use for emitting debug info\n\tvar nextRid = 1;\n\t;\n\tfunction stall(duration) {\n\t    var cancel = null;\n\t    var timer = null;\n\t    var promise = (new Promise(function (resolve) {\n\t        cancel = function () {\n\t            if (timer) {\n\t                clearTimeout(timer);\n\t                timer = null;\n\t            }\n\t            resolve();\n\t        };\n\t        timer = setTimeout(cancel, duration);\n\t    }));\n\t    var wait = function (func) {\n\t        promise = promise.then(func);\n\t        return promise;\n\t    };\n\t    function getPromise() {\n\t        return promise;\n\t    }\n\t    return { cancel: cancel, getPromise: getPromise, wait: wait };\n\t}\n\tvar ForwardErrors = [\n\t    lib.Logger.errors.CALL_EXCEPTION,\n\t    lib.Logger.errors.INSUFFICIENT_FUNDS,\n\t    lib.Logger.errors.NONCE_EXPIRED,\n\t    lib.Logger.errors.REPLACEMENT_UNDERPRICED,\n\t    lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT\n\t];\n\tvar ForwardProperties = [\n\t    \"address\",\n\t    \"args\",\n\t    \"errorArgs\",\n\t    \"errorSignature\",\n\t    \"method\",\n\t    \"transaction\",\n\t];\n\t;\n\tfunction exposeDebugConfig(config, now) {\n\t    var result = {\n\t        weight: config.weight\n\t    };\n\t    Object.defineProperty(result, \"provider\", { get: function () { return config.provider; } });\n\t    if (config.start) {\n\t        result.start = config.start;\n\t    }\n\t    if (now) {\n\t        result.duration = (now - config.start);\n\t    }\n\t    if (config.done) {\n\t        if (config.error) {\n\t            result.error = config.error;\n\t        }\n\t        else {\n\t            result.result = config.result || null;\n\t        }\n\t    }\n\t    return result;\n\t}\n\tfunction normalizedTally(normalize, quorum) {\n\t    return function (configs) {\n\t        // Count the votes for each result\n\t        var tally = {};\n\t        configs.forEach(function (c) {\n\t            var value = normalize(c.result);\n\t            if (!tally[value]) {\n\t                tally[value] = { count: 0, result: c.result };\n\t            }\n\t            tally[value].count++;\n\t        });\n\t        // Check for a quorum on any given result\n\t        var keys = Object.keys(tally);\n\t        for (var i = 0; i < keys.length; i++) {\n\t            var check = tally[keys[i]];\n\t            if (check.count >= quorum) {\n\t                return check.result;\n\t            }\n\t        }\n\t        // No quroum\n\t        return undefined;\n\t    };\n\t}\n\tfunction getProcessFunc(provider, method, params) {\n\t    var normalize = serialize;\n\t    switch (method) {\n\t        case \"getBlockNumber\":\n\t            // Return the median value, unless there is (median + 1) is also\n\t            // present, in which case that is probably true and the median\n\t            // is going to be stale soon. In the event of a malicious node,\n\t            // the lie will be true soon enough.\n\t            return function (configs) {\n\t                var values = configs.map(function (c) { return c.result; });\n\t                // Get the median block number\n\t                var blockNumber = median(configs.map(function (c) { return c.result; }), 2);\n\t                if (blockNumber == null) {\n\t                    return undefined;\n\t                }\n\t                blockNumber = Math.ceil(blockNumber);\n\t                // If the next block height is present, its prolly safe to use\n\t                if (values.indexOf(blockNumber + 1) >= 0) {\n\t                    blockNumber++;\n\t                }\n\t                // Don't ever roll back the blockNumber\n\t                if (blockNumber >= provider._highestBlockNumber) {\n\t                    provider._highestBlockNumber = blockNumber;\n\t                }\n\t                return provider._highestBlockNumber;\n\t            };\n\t        case \"getGasPrice\":\n\t            // Return the middle (round index up) value, similar to median\n\t            // but do not average even entries and choose the higher.\n\t            // Malicious actors must compromise 50% of the nodes to lie.\n\t            return function (configs) {\n\t                var values = configs.map(function (c) { return c.result; });\n\t                values.sort();\n\t                return values[Math.floor(values.length / 2)];\n\t            };\n\t        case \"getEtherPrice\":\n\t            // Returns the median price. Malicious actors must compromise at\n\t            // least 50% of the nodes to lie (in a meaningful way).\n\t            return function (configs) {\n\t                return median(configs.map(function (c) { return c.result; }));\n\t            };\n\t        // No additional normalizing required; serialize is enough\n\t        case \"getBalance\":\n\t        case \"getTransactionCount\":\n\t        case \"getCode\":\n\t        case \"getStorageAt\":\n\t        case \"call\":\n\t        case \"estimateGas\":\n\t        case \"getLogs\":\n\t            break;\n\t        // We drop the confirmations from transactions as it is approximate\n\t        case \"getTransaction\":\n\t        case \"getTransactionReceipt\":\n\t            normalize = function (tx) {\n\t                if (tx == null) {\n\t                    return null;\n\t                }\n\t                tx = (0, lib$3.shallowCopy)(tx);\n\t                tx.confirmations = -1;\n\t                return serialize(tx);\n\t            };\n\t            break;\n\t        // We drop the confirmations from transactions as it is approximate\n\t        case \"getBlock\":\n\t            // We drop the confirmations from transactions as it is approximate\n\t            if (params.includeTransactions) {\n\t                normalize = function (block) {\n\t                    if (block == null) {\n\t                        return null;\n\t                    }\n\t                    block = (0, lib$3.shallowCopy)(block);\n\t                    block.transactions = block.transactions.map(function (tx) {\n\t                        tx = (0, lib$3.shallowCopy)(tx);\n\t                        tx.confirmations = -1;\n\t                        return tx;\n\t                    });\n\t                    return serialize(block);\n\t                };\n\t            }\n\t            else {\n\t                normalize = function (block) {\n\t                    if (block == null) {\n\t                        return null;\n\t                    }\n\t                    return serialize(block);\n\t                };\n\t            }\n\t            break;\n\t        default:\n\t            throw new Error(\"unknown method: \" + method);\n\t    }\n\t    // Return the result if and only if the expected quorum is\n\t    // satisfied and agreed upon for the final result.\n\t    return normalizedTally(normalize, provider.quorum);\n\t}\n\t// If we are doing a blockTag query, we need to make sure the backend is\n\t// caught up to the FallbackProvider, before sending a request to it.\n\tfunction waitForSync(config, blockNumber) {\n\t    return __awaiter(this, void 0, void 0, function () {\n\t        var provider;\n\t        return __generator(this, function (_a) {\n\t            provider = (config.provider);\n\t            if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n\t                return [2 /*return*/, provider];\n\t            }\n\t            return [2 /*return*/, (0, lib$q.poll)(function () {\n\t                    return new Promise(function (resolve, reject) {\n\t                        setTimeout(function () {\n\t                            // We are synced\n\t                            if (provider.blockNumber >= blockNumber) {\n\t                                return resolve(provider);\n\t                            }\n\t                            // We're done; just quit\n\t                            if (config.cancelled) {\n\t                                return resolve(null);\n\t                            }\n\t                            // Try again, next block\n\t                            return resolve(undefined);\n\t                        }, 0);\n\t                    });\n\t                }, { oncePoll: provider })];\n\t        });\n\t    });\n\t}\n\tfunction getRunner(config, currentBlockNumber, method, params) {\n\t    return __awaiter(this, void 0, void 0, function () {\n\t        var provider, _a, filter;\n\t        return __generator(this, function (_b) {\n\t            switch (_b.label) {\n\t                case 0:\n\t                    provider = config.provider;\n\t                    _a = method;\n\t                    switch (_a) {\n\t                        case \"getBlockNumber\": return [3 /*break*/, 1];\n\t                        case \"getGasPrice\": return [3 /*break*/, 1];\n\t                        case \"getEtherPrice\": return [3 /*break*/, 2];\n\t                        case \"getBalance\": return [3 /*break*/, 3];\n\t                        case \"getTransactionCount\": return [3 /*break*/, 3];\n\t                        case \"getCode\": return [3 /*break*/, 3];\n\t                        case \"getStorageAt\": return [3 /*break*/, 6];\n\t                        case \"getBlock\": return [3 /*break*/, 9];\n\t                        case \"call\": return [3 /*break*/, 12];\n\t                        case \"estimateGas\": return [3 /*break*/, 12];\n\t                        case \"getTransaction\": return [3 /*break*/, 15];\n\t                        case \"getTransactionReceipt\": return [3 /*break*/, 15];\n\t                        case \"getLogs\": return [3 /*break*/, 16];\n\t                    }\n\t                    return [3 /*break*/, 19];\n\t                case 1: return [2 /*return*/, provider[method]()];\n\t                case 2:\n\t                    if (provider.getEtherPrice) {\n\t                        return [2 /*return*/, provider.getEtherPrice()];\n\t                    }\n\t                    return [3 /*break*/, 19];\n\t                case 3:\n\t                    if (!(params.blockTag && (0, lib$1.isHexString)(params.blockTag))) return [3 /*break*/, 5];\n\t                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n\t                case 4:\n\t                    provider = _b.sent();\n\t                    _b.label = 5;\n\t                case 5: return [2 /*return*/, provider[method](params.address, params.blockTag || \"latest\")];\n\t                case 6:\n\t                    if (!(params.blockTag && (0, lib$1.isHexString)(params.blockTag))) return [3 /*break*/, 8];\n\t                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n\t                case 7:\n\t                    provider = _b.sent();\n\t                    _b.label = 8;\n\t                case 8: return [2 /*return*/, provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\")];\n\t                case 9:\n\t                    if (!(params.blockTag && (0, lib$1.isHexString)(params.blockTag))) return [3 /*break*/, 11];\n\t                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n\t                case 10:\n\t                    provider = _b.sent();\n\t                    _b.label = 11;\n\t                case 11: return [2 /*return*/, provider[(params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\")](params.blockTag || params.blockHash)];\n\t                case 12:\n\t                    if (!(params.blockTag && (0, lib$1.isHexString)(params.blockTag))) return [3 /*break*/, 14];\n\t                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n\t                case 13:\n\t                    provider = _b.sent();\n\t                    _b.label = 14;\n\t                case 14: return [2 /*return*/, provider[method](params.transaction)];\n\t                case 15: return [2 /*return*/, provider[method](params.transactionHash)];\n\t                case 16:\n\t                    filter = params.filter;\n\t                    if (!((filter.fromBlock && (0, lib$1.isHexString)(filter.fromBlock)) || (filter.toBlock && (0, lib$1.isHexString)(filter.toBlock)))) return [3 /*break*/, 18];\n\t                    return [4 /*yield*/, waitForSync(config, currentBlockNumber)];\n\t                case 17:\n\t                    provider = _b.sent();\n\t                    _b.label = 18;\n\t                case 18: return [2 /*return*/, provider.getLogs(filter)];\n\t                case 19: return [2 /*return*/, logger.throwError(\"unknown method error\", lib.Logger.errors.UNKNOWN_ERROR, {\n\t                        method: method,\n\t                        params: params\n\t                    })];\n\t            }\n\t        });\n\t    });\n\t}\n\tvar FallbackProvider = /** @class */ (function (_super) {\n\t    __extends(FallbackProvider, _super);\n\t    function FallbackProvider(providers, quorum) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, FallbackProvider);\n\t        if (providers.length === 0) {\n\t            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n\t        }\n\t        var providerConfigs = providers.map(function (configOrProvider, index) {\n\t            if (lib$b.Provider.isProvider(configOrProvider)) {\n\t                var stallTimeout = (0, formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;\n\t                var priority = 1;\n\t                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout: stallTimeout, priority: priority });\n\t            }\n\t            var config = (0, lib$3.shallowCopy)(configOrProvider);\n\t            if (config.priority == null) {\n\t                config.priority = 1;\n\t            }\n\t            if (config.stallTimeout == null) {\n\t                config.stallTimeout = (0, formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;\n\t            }\n\t            if (config.weight == null) {\n\t                config.weight = 1;\n\t            }\n\t            var weight = config.weight;\n\t            if (weight % 1 || weight > 512 || weight < 1) {\n\t                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", \"providers[\" + index + \"].weight\", weight);\n\t            }\n\t            return Object.freeze(config);\n\t        });\n\t        var total = providerConfigs.reduce(function (accum, c) { return (accum + c.weight); }, 0);\n\t        if (quorum == null) {\n\t            quorum = total / 2;\n\t        }\n\t        else if (quorum > total) {\n\t            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n\t        }\n\t        // Are all providers' networks are known\n\t        var networkOrReady = checkNetworks(providerConfigs.map(function (c) { return (c.provider).network; }));\n\t        // Not all networks are known; we must stall\n\t        if (networkOrReady == null) {\n\t            networkOrReady = new Promise(function (resolve, reject) {\n\t                setTimeout(function () {\n\t                    _this.detectNetwork().then(resolve, reject);\n\t                }, 0);\n\t            });\n\t        }\n\t        _this = _super.call(this, networkOrReady) || this;\n\t        // Preserve a copy, so we do not get mutated\n\t        (0, lib$3.defineReadOnly)(_this, \"providerConfigs\", Object.freeze(providerConfigs));\n\t        (0, lib$3.defineReadOnly)(_this, \"quorum\", quorum);\n\t        _this._highestBlockNumber = -1;\n\t        return _this;\n\t    }\n\t    FallbackProvider.prototype.detectNetwork = function () {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var networks;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0: return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) { return c.provider.getNetwork(); }))];\n\t                    case 1:\n\t                        networks = _a.sent();\n\t                        return [2 /*return*/, checkNetworks(networks)];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    FallbackProvider.prototype.perform = function (method, params) {\n\t        return __awaiter(this, void 0, void 0, function () {\n\t            var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;\n\t            var _this = this;\n\t            return __generator(this, function (_a) {\n\t                switch (_a.label) {\n\t                    case 0:\n\t                        if (!(method === \"sendTransaction\")) return [3 /*break*/, 2];\n\t                        return [4 /*yield*/, Promise.all(this.providerConfigs.map(function (c) {\n\t                                return c.provider.sendTransaction(params.signedTransaction).then(function (result) {\n\t                                    return result.hash;\n\t                                }, function (error) {\n\t                                    return error;\n\t                                });\n\t                            }))];\n\t                    case 1:\n\t                        results = _a.sent();\n\t                        // Any success is good enough (other errors are likely \"already seen\" errors\n\t                        for (i_1 = 0; i_1 < results.length; i_1++) {\n\t                            result = results[i_1];\n\t                            if (typeof (result) === \"string\") {\n\t                                return [2 /*return*/, result];\n\t                            }\n\t                        }\n\t                        // They were all an error; pick the first error\n\t                        throw results[0];\n\t                    case 2:\n\t                        if (!(this._highestBlockNumber === -1 && method !== \"getBlockNumber\")) return [3 /*break*/, 4];\n\t                        return [4 /*yield*/, this.getBlockNumber()];\n\t                    case 3:\n\t                        _a.sent();\n\t                        _a.label = 4;\n\t                    case 4:\n\t                        processFunc = getProcessFunc(this, method, params);\n\t                        configs = (0, lib$l.shuffled)(this.providerConfigs.map(lib$3.shallowCopy));\n\t                        configs.sort(function (a, b) { return (a.priority - b.priority); });\n\t                        currentBlockNumber = this._highestBlockNumber;\n\t                        i = 0;\n\t                        first = true;\n\t                        _loop_1 = function () {\n\t                            var t0, inflightWeight, _loop_2, waiting, results, result, errors;\n\t                            return __generator(this, function (_b) {\n\t                                switch (_b.label) {\n\t                                    case 0:\n\t                                        t0 = now();\n\t                                        inflightWeight = configs.filter(function (c) { return (c.runner && ((t0 - c.start) < c.stallTimeout)); })\n\t                                            .reduce(function (accum, c) { return (accum + c.weight); }, 0);\n\t                                        _loop_2 = function () {\n\t                                            var config = configs[i++];\n\t                                            var rid = nextRid++;\n\t                                            config.start = now();\n\t                                            config.staller = stall(config.stallTimeout);\n\t                                            config.staller.wait(function () { config.staller = null; });\n\t                                            config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {\n\t                                                config.done = true;\n\t                                                config.result = result;\n\t                                                if (_this.listenerCount(\"debug\")) {\n\t                                                    _this.emit(\"debug\", {\n\t                                                        action: \"request\",\n\t                                                        rid: rid,\n\t                                                        backend: exposeDebugConfig(config, now()),\n\t                                                        request: { method: method, params: (0, lib$3.deepCopy)(params) },\n\t                                                        provider: _this\n\t                                                    });\n\t                                                }\n\t                                            }, function (error) {\n\t                                                config.done = true;\n\t                                                config.error = error;\n\t                                                if (_this.listenerCount(\"debug\")) {\n\t                                                    _this.emit(\"debug\", {\n\t                                                        action: \"request\",\n\t                                                        rid: rid,\n\t                                                        backend: exposeDebugConfig(config, now()),\n\t                                                        request: { method: method, params: (0, lib$3.deepCopy)(params) },\n\t                                                        provider: _this\n\t                                                    });\n\t                                                }\n\t                                            });\n\t                                            if (this_1.listenerCount(\"debug\")) {\n\t                                                this_1.emit(\"debug\", {\n\t                                                    action: \"request\",\n\t                                                    rid: rid,\n\t                                                    backend: exposeDebugConfig(config, null),\n\t                                                    request: { method: method, params: (0, lib$3.deepCopy)(params) },\n\t                                                    provider: this_1\n\t                                                });\n\t                                            }\n\t                                            inflightWeight += config.weight;\n\t                                        };\n\t                                        // Start running enough to meet quorum\n\t                                        while (inflightWeight < this_1.quorum && i < configs.length) {\n\t                                            _loop_2();\n\t                                        }\n\t                                        waiting = [];\n\t                                        configs.forEach(function (c) {\n\t                                            if (c.done || !c.runner) {\n\t                                                return;\n\t                                            }\n\t                                            waiting.push(c.runner);\n\t                                            if (c.staller) {\n\t                                                waiting.push(c.staller.getPromise());\n\t                                            }\n\t                                        });\n\t                                        if (!waiting.length) return [3 /*break*/, 2];\n\t                                        return [4 /*yield*/, Promise.race(waiting)];\n\t                                    case 1:\n\t                                        _b.sent();\n\t                                        _b.label = 2;\n\t                                    case 2:\n\t                                        results = configs.filter(function (c) { return (c.done && c.error == null); });\n\t                                        if (!(results.length >= this_1.quorum)) return [3 /*break*/, 5];\n\t                                        result = processFunc(results);\n\t                                        if (result !== undefined) {\n\t                                            // Shut down any stallers\n\t                                            configs.forEach(function (c) {\n\t                                                if (c.staller) {\n\t                                                    c.staller.cancel();\n\t                                                }\n\t                                                c.cancelled = true;\n\t                                            });\n\t                                            return [2 /*return*/, { value: result }];\n\t                                        }\n\t                                        if (!!first) return [3 /*break*/, 4];\n\t                                        return [4 /*yield*/, stall(100).getPromise()];\n\t                                    case 3:\n\t                                        _b.sent();\n\t                                        _b.label = 4;\n\t                                    case 4:\n\t                                        first = false;\n\t                                        _b.label = 5;\n\t                                    case 5:\n\t                                        errors = configs.reduce(function (accum, c) {\n\t                                            if (!c.done || c.error == null) {\n\t                                                return accum;\n\t                                            }\n\t                                            var code = (c.error).code;\n\t                                            if (ForwardErrors.indexOf(code) >= 0) {\n\t                                                if (!accum[code]) {\n\t                                                    accum[code] = { error: c.error, weight: 0 };\n\t                                                }\n\t                                                accum[code].weight += c.weight;\n\t                                            }\n\t                                            return accum;\n\t                                        }, ({}));\n\t                                        Object.keys(errors).forEach(function (errorCode) {\n\t                                            var tally = errors[errorCode];\n\t                                            if (tally.weight < _this.quorum) {\n\t                                                return;\n\t                                            }\n\t                                            // Shut down any stallers\n\t                                            configs.forEach(function (c) {\n\t                                                if (c.staller) {\n\t                                                    c.staller.cancel();\n\t                                                }\n\t                                                c.cancelled = true;\n\t                                            });\n\t                                            var e = (tally.error);\n\t                                            var props = {};\n\t                                            ForwardProperties.forEach(function (name) {\n\t                                                if (e[name] == null) {\n\t                                                    return;\n\t                                                }\n\t                                                props[name] = e[name];\n\t                                            });\n\t                                            logger.throwError(e.reason || e.message, errorCode, props);\n\t                                        });\n\t                                        // All configs have run to completion; we will never get more data\n\t                                        if (configs.filter(function (c) { return !c.done; }).length === 0) {\n\t                                            return [2 /*return*/, \"break\"];\n\t                                        }\n\t                                        return [2 /*return*/];\n\t                                }\n\t                            });\n\t                        };\n\t                        this_1 = this;\n\t                        _a.label = 5;\n\t                    case 5:\n\t                        if (false) {}\n\t                        return [5 /*yield**/, _loop_1()];\n\t                    case 6:\n\t                        state_1 = _a.sent();\n\t                        if (typeof state_1 === \"object\")\n\t                            return [2 /*return*/, state_1.value];\n\t                        if (state_1 === \"break\")\n\t                            return [3 /*break*/, 7];\n\t                        return [3 /*break*/, 5];\n\t                    case 7:\n\t                        // Shut down any stallers; shouldn't be any\n\t                        configs.forEach(function (c) {\n\t                            if (c.staller) {\n\t                                c.staller.cancel();\n\t                            }\n\t                            c.cancelled = true;\n\t                        });\n\t                        return [2 /*return*/, logger.throwError(\"failed to meet quorum\", lib.Logger.errors.SERVER_ERROR, {\n\t                                method: method,\n\t                                params: params,\n\t                                //results: configs.map((c) => c.result),\n\t                                //errors: configs.map((c) => c.error),\n\t                                results: configs.map(function (c) { return exposeDebugConfig(c); }),\n\t                                provider: this\n\t                            })];\n\t                }\n\t            });\n\t        });\n\t    };\n\t    return FallbackProvider;\n\t}(baseProvider.BaseProvider));\n\texports.FallbackProvider = FallbackProvider;\n\n\t});\n\n\tvar fallbackProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(fallbackProvider);\n\n\tvar browserIpcProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.IpcProvider = void 0;\n\tvar IpcProvider = null;\n\texports.IpcProvider = IpcProvider;\n\n\t});\n\n\tvar browserIpcProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(browserIpcProvider);\n\n\tvar infuraProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;\n\n\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\n\tvar defaultProjectId = \"84842078b09946638c03157f83405213\";\n\tvar InfuraWebSocketProvider = /** @class */ (function (_super) {\n\t    __extends(InfuraWebSocketProvider, _super);\n\t    function InfuraWebSocketProvider(network, apiKey) {\n\t        var _this = this;\n\t        var provider = new InfuraProvider(network, apiKey);\n\t        var connection = provider.connection;\n\t        if (connection.password) {\n\t            logger.throwError(\"INFURA WebSocket project secrets unsupported\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n\t                operation: \"InfuraProvider.getWebSocketProvider()\"\n\t            });\n\t        }\n\t        var url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n\t        _this = _super.call(this, url, network) || this;\n\t        (0, lib$3.defineReadOnly)(_this, \"apiKey\", provider.projectId);\n\t        (0, lib$3.defineReadOnly)(_this, \"projectId\", provider.projectId);\n\t        (0, lib$3.defineReadOnly)(_this, \"projectSecret\", provider.projectSecret);\n\t        return _this;\n\t    }\n\t    InfuraWebSocketProvider.prototype.isCommunityResource = function () {\n\t        return (this.projectId === defaultProjectId);\n\t    };\n\t    return InfuraWebSocketProvider;\n\t}(websocketProvider.WebSocketProvider));\n\texports.InfuraWebSocketProvider = InfuraWebSocketProvider;\n\tvar InfuraProvider = /** @class */ (function (_super) {\n\t    __extends(InfuraProvider, _super);\n\t    function InfuraProvider() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    InfuraProvider.getWebSocketProvider = function (network, apiKey) {\n\t        return new InfuraWebSocketProvider(network, apiKey);\n\t    };\n\t    InfuraProvider.getApiKey = function (apiKey) {\n\t        var apiKeyObj = {\n\t            apiKey: defaultProjectId,\n\t            projectId: defaultProjectId,\n\t            projectSecret: null\n\t        };\n\t        if (apiKey == null) {\n\t            return apiKeyObj;\n\t        }\n\t        if (typeof (apiKey) === \"string\") {\n\t            apiKeyObj.projectId = apiKey;\n\t        }\n\t        else if (apiKey.projectSecret != null) {\n\t            logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n\t            logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\t            apiKeyObj.projectId = apiKey.projectId;\n\t            apiKeyObj.projectSecret = apiKey.projectSecret;\n\t        }\n\t        else if (apiKey.projectId) {\n\t            apiKeyObj.projectId = apiKey.projectId;\n\t        }\n\t        apiKeyObj.apiKey = apiKeyObj.projectId;\n\t        return apiKeyObj;\n\t    };\n\t    InfuraProvider.getUrl = function (network, apiKey) {\n\t        var host = null;\n\t        switch (network ? network.name : \"unknown\") {\n\t            case \"homestead\":\n\t                host = \"mainnet.infura.io\";\n\t                break;\n\t            case \"ropsten\":\n\t                host = \"ropsten.infura.io\";\n\t                break;\n\t            case \"rinkeby\":\n\t                host = \"rinkeby.infura.io\";\n\t                break;\n\t            case \"kovan\":\n\t                host = \"kovan.infura.io\";\n\t                break;\n\t            case \"goerli\":\n\t                host = \"goerli.infura.io\";\n\t                break;\n\t            case \"matic\":\n\t                host = \"polygon-mainnet.infura.io\";\n\t                break;\n\t            case \"maticmum\":\n\t                host = \"polygon-mumbai.infura.io\";\n\t                break;\n\t            default:\n\t                logger.throwError(\"unsupported network\", lib.Logger.errors.INVALID_ARGUMENT, {\n\t                    argument: \"network\",\n\t                    value: network\n\t                });\n\t        }\n\t        var connection = {\n\t            allowGzip: true,\n\t            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n\t            throttleCallback: function (attempt, url) {\n\t                if (apiKey.projectId === defaultProjectId) {\n\t                    (0, formatter.showThrottleMessage)();\n\t                }\n\t                return Promise.resolve(true);\n\t            }\n\t        };\n\t        if (apiKey.projectSecret != null) {\n\t            connection.user = \"\";\n\t            connection.password = apiKey.projectSecret;\n\t        }\n\t        return connection;\n\t    };\n\t    InfuraProvider.prototype.isCommunityResource = function () {\n\t        return (this.projectId === defaultProjectId);\n\t    };\n\t    return InfuraProvider;\n\t}(urlJsonRpcProvider.UrlJsonRpcProvider));\n\texports.InfuraProvider = InfuraProvider;\n\n\t});\n\n\tvar infuraProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(infuraProvider);\n\n\tvar jsonRpcBatchProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.JsonRpcBatchProvider = void 0;\n\n\n\n\t// Experimental\n\tvar JsonRpcBatchProvider = /** @class */ (function (_super) {\n\t    __extends(JsonRpcBatchProvider, _super);\n\t    function JsonRpcBatchProvider() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    JsonRpcBatchProvider.prototype.send = function (method, params) {\n\t        var _this = this;\n\t        var request = {\n\t            method: method,\n\t            params: params,\n\t            id: (this._nextId++),\n\t            jsonrpc: \"2.0\"\n\t        };\n\t        if (this._pendingBatch == null) {\n\t            this._pendingBatch = [];\n\t        }\n\t        var inflightRequest = { request: request, resolve: null, reject: null };\n\t        var promise = new Promise(function (resolve, reject) {\n\t            inflightRequest.resolve = resolve;\n\t            inflightRequest.reject = reject;\n\t        });\n\t        this._pendingBatch.push(inflightRequest);\n\t        if (!this._pendingBatchAggregator) {\n\t            // Schedule batch for next event loop + short duration\n\t            this._pendingBatchAggregator = setTimeout(function () {\n\t                // Get teh current batch and clear it, so new requests\n\t                // go into the next batch\n\t                var batch = _this._pendingBatch;\n\t                _this._pendingBatch = null;\n\t                _this._pendingBatchAggregator = null;\n\t                // Get the request as an array of requests\n\t                var request = batch.map(function (inflight) { return inflight.request; });\n\t                _this.emit(\"debug\", {\n\t                    action: \"requestBatch\",\n\t                    request: (0, lib$3.deepCopy)(request),\n\t                    provider: _this\n\t                });\n\t                return (0, lib$q.fetchJson)(_this.connection, JSON.stringify(request)).then(function (result) {\n\t                    _this.emit(\"debug\", {\n\t                        action: \"response\",\n\t                        request: request,\n\t                        response: result,\n\t                        provider: _this\n\t                    });\n\t                    // For each result, feed it to the correct Promise, depending\n\t                    // on whether it was a success or error\n\t                    batch.forEach(function (inflightRequest, index) {\n\t                        var payload = result[index];\n\t                        if (payload.error) {\n\t                            var error = new Error(payload.error.message);\n\t                            error.code = payload.error.code;\n\t                            error.data = payload.error.data;\n\t                            inflightRequest.reject(error);\n\t                        }\n\t                        else {\n\t                            inflightRequest.resolve(payload.result);\n\t                        }\n\t                    });\n\t                }, function (error) {\n\t                    _this.emit(\"debug\", {\n\t                        action: \"response\",\n\t                        error: error,\n\t                        request: request,\n\t                        provider: _this\n\t                    });\n\t                    batch.forEach(function (inflightRequest) {\n\t                        inflightRequest.reject(error);\n\t                    });\n\t                });\n\t            }, 10);\n\t        }\n\t        return promise;\n\t    };\n\t    return JsonRpcBatchProvider;\n\t}(jsonRpcProvider.JsonRpcProvider));\n\texports.JsonRpcBatchProvider = JsonRpcBatchProvider;\n\n\t});\n\n\tvar jsonRpcBatchProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(jsonRpcBatchProvider);\n\n\tvar nodesmithProvider = createCommonjsModule(function (module, exports) {\n\t/* istanbul ignore file */\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.NodesmithProvider = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\t// Special API key provided by Nodesmith for ethers.js\n\tvar defaultApiKey = \"ETHERS_JS_SHARED\";\n\tvar NodesmithProvider = /** @class */ (function (_super) {\n\t    __extends(NodesmithProvider, _super);\n\t    function NodesmithProvider() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    NodesmithProvider.getApiKey = function (apiKey) {\n\t        if (apiKey && typeof (apiKey) !== \"string\") {\n\t            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n\t        }\n\t        return apiKey || defaultApiKey;\n\t    };\n\t    NodesmithProvider.getUrl = function (network, apiKey) {\n\t        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\t        var host = null;\n\t        switch (network.name) {\n\t            case \"homestead\":\n\t                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n\t                break;\n\t            case \"ropsten\":\n\t                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n\t                break;\n\t            case \"rinkeby\":\n\t                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n\t                break;\n\t            case \"goerli\":\n\t                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n\t                break;\n\t            case \"kovan\":\n\t                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n\t                break;\n\t            default:\n\t                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n\t        }\n\t        return (host + \"?apiKey=\" + apiKey);\n\t    };\n\t    return NodesmithProvider;\n\t}(urlJsonRpcProvider.UrlJsonRpcProvider));\n\texports.NodesmithProvider = NodesmithProvider;\n\n\t});\n\n\tvar nodesmithProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(nodesmithProvider);\n\n\tvar pocketProvider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.PocketProvider = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\n\t// These are load-balancer-based application IDs\n\tvar defaultApplicationIds = {\n\t    homestead: \"6004bcd10040261633ade990\",\n\t    ropsten: \"6004bd4d0040261633ade991\",\n\t    rinkeby: \"6004bda20040261633ade994\",\n\t    goerli: \"6004bd860040261633ade992\",\n\t};\n\tvar PocketProvider = /** @class */ (function (_super) {\n\t    __extends(PocketProvider, _super);\n\t    function PocketProvider(network, apiKey) {\n\t        // We need a bit of creativity in the constructor because\n\t        // Pocket uses different default API keys based on the network\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        if (apiKey == null) {\n\t            var n = (0, lib$3.getStatic)(_newTarget, \"getNetwork\")(network);\n\t            if (n) {\n\t                var applicationId = defaultApplicationIds[n.name];\n\t                if (applicationId) {\n\t                    apiKey = {\n\t                        applicationId: applicationId,\n\t                        loadBalancer: true\n\t                    };\n\t                }\n\t            }\n\t            // If there was any issue above, we don't know this network\n\t            if (apiKey == null) {\n\t                logger.throwError(\"unsupported network\", lib.Logger.errors.INVALID_ARGUMENT, {\n\t                    argument: \"network\",\n\t                    value: network\n\t                });\n\t            }\n\t        }\n\t        _this = _super.call(this, network, apiKey) || this;\n\t        return _this;\n\t    }\n\t    PocketProvider.getApiKey = function (apiKey) {\n\t        // Most API Providers allow null to get the default configuration, but\n\t        // Pocket requires the network to decide the default provider, so we\n\t        // rely on hijacking the constructor to add a sensible default for us\n\t        if (apiKey == null) {\n\t            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n\t        }\n\t        var apiKeyObj = {\n\t            applicationId: null,\n\t            loadBalancer: false,\n\t            applicationSecretKey: null\n\t        };\n\t        // Parse applicationId and applicationSecretKey\n\t        if (typeof (apiKey) === \"string\") {\n\t            apiKeyObj.applicationId = apiKey;\n\t        }\n\t        else if (apiKey.applicationSecretKey != null) {\n\t            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n\t            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\t            apiKeyObj.applicationId = apiKey.applicationId;\n\t            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n\t            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\t        }\n\t        else if (apiKey.applicationId) {\n\t            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\t            apiKeyObj.applicationId = apiKey.applicationId;\n\t            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\t        }\n\t        else {\n\t            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n\t        }\n\t        return apiKeyObj;\n\t    };\n\t    PocketProvider.getUrl = function (network, apiKey) {\n\t        var host = null;\n\t        switch (network ? network.name : \"unknown\") {\n\t            case \"homestead\":\n\t                host = \"eth-mainnet.gateway.pokt.network\";\n\t                break;\n\t            case \"ropsten\":\n\t                host = \"eth-ropsten.gateway.pokt.network\";\n\t                break;\n\t            case \"rinkeby\":\n\t                host = \"eth-rinkeby.gateway.pokt.network\";\n\t                break;\n\t            case \"goerli\":\n\t                host = \"eth-goerli.gateway.pokt.network\";\n\t                break;\n\t            default:\n\t                logger.throwError(\"unsupported network\", lib.Logger.errors.INVALID_ARGUMENT, {\n\t                    argument: \"network\",\n\t                    value: network\n\t                });\n\t        }\n\t        var url = null;\n\t        if (apiKey.loadBalancer) {\n\t            url = \"https://\" + host + \"/v1/lb/\" + apiKey.applicationId;\n\t        }\n\t        else {\n\t            url = \"https://\" + host + \"/v1/\" + apiKey.applicationId;\n\t        }\n\t        var connection = { url: url };\n\t        // Initialize empty headers\n\t        connection.headers = {};\n\t        // Apply application secret key\n\t        if (apiKey.applicationSecretKey != null) {\n\t            connection.user = \"\";\n\t            connection.password = apiKey.applicationSecretKey;\n\t        }\n\t        return connection;\n\t    };\n\t    PocketProvider.prototype.isCommunityResource = function () {\n\t        return (this.applicationId === defaultApplicationIds[this.network.name]);\n\t    };\n\t    return PocketProvider;\n\t}(urlJsonRpcProvider.UrlJsonRpcProvider));\n\texports.PocketProvider = PocketProvider;\n\n\t});\n\n\tvar pocketProvider$1 = /*@__PURE__*/getDefaultExportFromCjs(pocketProvider);\n\n\tvar web3Provider = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {\n\t    var extendStatics = function (d, b) {\n\t        extendStatics = Object.setPrototypeOf ||\n\t            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n\t        return extendStatics(d, b);\n\t    };\n\t    return function (d, b) {\n\t        if (typeof b !== \"function\" && b !== null)\n\t            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Web3Provider = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\n\tvar _nextId = 1;\n\tfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n\t    var fetcher = \"Web3LegacyFetcher\";\n\t    return function (method, params) {\n\t        var _this = this;\n\t        var request = {\n\t            method: method,\n\t            params: params,\n\t            id: (_nextId++),\n\t            jsonrpc: \"2.0\"\n\t        };\n\t        return new Promise(function (resolve, reject) {\n\t            _this.emit(\"debug\", {\n\t                action: \"request\",\n\t                fetcher: fetcher,\n\t                request: (0, lib$3.deepCopy)(request),\n\t                provider: _this\n\t            });\n\t            sendFunc(request, function (error, response) {\n\t                if (error) {\n\t                    _this.emit(\"debug\", {\n\t                        action: \"response\",\n\t                        fetcher: fetcher,\n\t                        error: error,\n\t                        request: request,\n\t                        provider: _this\n\t                    });\n\t                    return reject(error);\n\t                }\n\t                _this.emit(\"debug\", {\n\t                    action: \"response\",\n\t                    fetcher: fetcher,\n\t                    request: request,\n\t                    response: response,\n\t                    provider: _this\n\t                });\n\t                if (response.error) {\n\t                    var error_1 = new Error(response.error.message);\n\t                    error_1.code = response.error.code;\n\t                    error_1.data = response.error.data;\n\t                    return reject(error_1);\n\t                }\n\t                resolve(response.result);\n\t            });\n\t        });\n\t    };\n\t}\n\tfunction buildEip1193Fetcher(provider) {\n\t    return function (method, params) {\n\t        var _this = this;\n\t        if (params == null) {\n\t            params = [];\n\t        }\n\t        var request = { method: method, params: params };\n\t        this.emit(\"debug\", {\n\t            action: \"request\",\n\t            fetcher: \"Eip1193Fetcher\",\n\t            request: (0, lib$3.deepCopy)(request),\n\t            provider: this\n\t        });\n\t        return provider.request(request).then(function (response) {\n\t            _this.emit(\"debug\", {\n\t                action: \"response\",\n\t                fetcher: \"Eip1193Fetcher\",\n\t                request: request,\n\t                response: response,\n\t                provider: _this\n\t            });\n\t            return response;\n\t        }, function (error) {\n\t            _this.emit(\"debug\", {\n\t                action: \"response\",\n\t                fetcher: \"Eip1193Fetcher\",\n\t                request: request,\n\t                error: error,\n\t                provider: _this\n\t            });\n\t            throw error;\n\t        });\n\t    };\n\t}\n\tvar Web3Provider = /** @class */ (function (_super) {\n\t    __extends(Web3Provider, _super);\n\t    function Web3Provider(provider, network) {\n\t        var _newTarget = this.constructor;\n\t        var _this = this;\n\t        logger.checkNew(_newTarget, Web3Provider);\n\t        if (provider == null) {\n\t            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n\t        }\n\t        var path = null;\n\t        var jsonRpcFetchFunc = null;\n\t        var subprovider = null;\n\t        if (typeof (provider) === \"function\") {\n\t            path = \"unknown:\";\n\t            jsonRpcFetchFunc = provider;\n\t        }\n\t        else {\n\t            path = provider.host || provider.path || \"\";\n\t            if (!path && provider.isMetaMask) {\n\t                path = \"metamask\";\n\t            }\n\t            subprovider = provider;\n\t            if (provider.request) {\n\t                if (path === \"\") {\n\t                    path = \"eip-1193:\";\n\t                }\n\t                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n\t            }\n\t            else if (provider.sendAsync) {\n\t                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n\t            }\n\t            else if (provider.send) {\n\t                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n\t            }\n\t            else {\n\t                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n\t            }\n\t            if (!path) {\n\t                path = \"unknown:\";\n\t            }\n\t        }\n\t        _this = _super.call(this, path, network) || this;\n\t        (0, lib$3.defineReadOnly)(_this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n\t        (0, lib$3.defineReadOnly)(_this, \"provider\", subprovider);\n\t        return _this;\n\t    }\n\t    Web3Provider.prototype.send = function (method, params) {\n\t        return this.jsonRpcFetchFunc(method, params);\n\t    };\n\t    return Web3Provider;\n\t}(jsonRpcProvider.JsonRpcProvider));\n\texports.Web3Provider = Web3Provider;\n\n\t});\n\n\tvar web3Provider$1 = /*@__PURE__*/getDefaultExportFromCjs(web3Provider);\n\n\tvar lib$r = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Formatter = exports.showThrottleMessage = exports.isCommunityResourcable = exports.isCommunityResource = exports.getNetwork = exports.getDefaultProvider = exports.JsonRpcSigner = exports.IpcProvider = exports.WebSocketProvider = exports.Web3Provider = exports.StaticJsonRpcProvider = exports.PocketProvider = exports.NodesmithProvider = exports.JsonRpcBatchProvider = exports.JsonRpcProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AlchemyWebSocketProvider = exports.AlchemyProvider = exports.FallbackProvider = exports.UrlJsonRpcProvider = exports.Resolver = exports.BaseProvider = exports.Provider = void 0;\n\n\tObject.defineProperty(exports, \"Provider\", { enumerable: true, get: function () { return lib$b.Provider; } });\n\n\tObject.defineProperty(exports, \"getNetwork\", { enumerable: true, get: function () { return lib$o.getNetwork; } });\n\n\tObject.defineProperty(exports, \"BaseProvider\", { enumerable: true, get: function () { return baseProvider.BaseProvider; } });\n\tObject.defineProperty(exports, \"Resolver\", { enumerable: true, get: function () { return baseProvider.Resolver; } });\n\n\tObject.defineProperty(exports, \"AlchemyProvider\", { enumerable: true, get: function () { return alchemyProvider.AlchemyProvider; } });\n\tObject.defineProperty(exports, \"AlchemyWebSocketProvider\", { enumerable: true, get: function () { return alchemyProvider.AlchemyWebSocketProvider; } });\n\n\tObject.defineProperty(exports, \"CloudflareProvider\", { enumerable: true, get: function () { return cloudflareProvider.CloudflareProvider; } });\n\n\tObject.defineProperty(exports, \"EtherscanProvider\", { enumerable: true, get: function () { return etherscanProvider.EtherscanProvider; } });\n\n\tObject.defineProperty(exports, \"FallbackProvider\", { enumerable: true, get: function () { return fallbackProvider.FallbackProvider; } });\n\n\tObject.defineProperty(exports, \"IpcProvider\", { enumerable: true, get: function () { return browserIpcProvider.IpcProvider; } });\n\n\tObject.defineProperty(exports, \"InfuraProvider\", { enumerable: true, get: function () { return infuraProvider.InfuraProvider; } });\n\tObject.defineProperty(exports, \"InfuraWebSocketProvider\", { enumerable: true, get: function () { return infuraProvider.InfuraWebSocketProvider; } });\n\n\tObject.defineProperty(exports, \"JsonRpcProvider\", { enumerable: true, get: function () { return jsonRpcProvider.JsonRpcProvider; } });\n\tObject.defineProperty(exports, \"JsonRpcSigner\", { enumerable: true, get: function () { return jsonRpcProvider.JsonRpcSigner; } });\n\n\tObject.defineProperty(exports, \"JsonRpcBatchProvider\", { enumerable: true, get: function () { return jsonRpcBatchProvider.JsonRpcBatchProvider; } });\n\n\tObject.defineProperty(exports, \"NodesmithProvider\", { enumerable: true, get: function () { return nodesmithProvider.NodesmithProvider; } });\n\n\tObject.defineProperty(exports, \"PocketProvider\", { enumerable: true, get: function () { return pocketProvider.PocketProvider; } });\n\n\tObject.defineProperty(exports, \"StaticJsonRpcProvider\", { enumerable: true, get: function () { return urlJsonRpcProvider.StaticJsonRpcProvider; } });\n\tObject.defineProperty(exports, \"UrlJsonRpcProvider\", { enumerable: true, get: function () { return urlJsonRpcProvider.UrlJsonRpcProvider; } });\n\n\tObject.defineProperty(exports, \"Web3Provider\", { enumerable: true, get: function () { return web3Provider.Web3Provider; } });\n\n\tObject.defineProperty(exports, \"WebSocketProvider\", { enumerable: true, get: function () { return websocketProvider.WebSocketProvider; } });\n\n\tObject.defineProperty(exports, \"Formatter\", { enumerable: true, get: function () { return formatter.Formatter; } });\n\tObject.defineProperty(exports, \"isCommunityResourcable\", { enumerable: true, get: function () { return formatter.isCommunityResourcable; } });\n\tObject.defineProperty(exports, \"isCommunityResource\", { enumerable: true, get: function () { return formatter.isCommunityResource; } });\n\tObject.defineProperty(exports, \"showThrottleMessage\", { enumerable: true, get: function () { return formatter.showThrottleMessage; } });\n\n\n\tvar logger = new lib.Logger(_version$I.version);\n\t////////////////////////\n\t// Helper Functions\n\tfunction getDefaultProvider(network, options) {\n\t    if (network == null) {\n\t        network = \"homestead\";\n\t    }\n\t    // If passed a URL, figure out the right type of provider based on the scheme\n\t    if (typeof (network) === \"string\") {\n\t        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\t        // Handle http and ws (and their secure variants)\n\t        var match = network.match(/^(ws|http)s?:/i);\n\t        if (match) {\n\t            switch (match[1]) {\n\t                case \"http\":\n\t                    return new jsonRpcProvider.JsonRpcProvider(network);\n\t                case \"ws\":\n\t                    return new websocketProvider.WebSocketProvider(network);\n\t                default:\n\t                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n\t            }\n\t        }\n\t    }\n\t    var n = (0, lib$o.getNetwork)(network);\n\t    if (!n || !n._defaultProvider) {\n\t        logger.throwError(\"unsupported getDefaultProvider network\", lib.Logger.errors.NETWORK_ERROR, {\n\t            operation: \"getDefaultProvider\",\n\t            network: network\n\t        });\n\t    }\n\t    return n._defaultProvider({\n\t        FallbackProvider: fallbackProvider.FallbackProvider,\n\t        AlchemyProvider: alchemyProvider.AlchemyProvider,\n\t        CloudflareProvider: cloudflareProvider.CloudflareProvider,\n\t        EtherscanProvider: etherscanProvider.EtherscanProvider,\n\t        InfuraProvider: infuraProvider.InfuraProvider,\n\t        JsonRpcProvider: jsonRpcProvider.JsonRpcProvider,\n\t        NodesmithProvider: nodesmithProvider.NodesmithProvider,\n\t        PocketProvider: pocketProvider.PocketProvider,\n\t        Web3Provider: web3Provider.Web3Provider,\n\t        IpcProvider: browserIpcProvider.IpcProvider,\n\t    }, options);\n\t}\n\texports.getDefaultProvider = getDefaultProvider;\n\n\t});\n\n\tvar index$r = /*@__PURE__*/getDefaultExportFromCjs(lib$r);\n\n\tvar _version$K = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"solidity/5.5.0\";\n\n\t});\n\n\tvar _version$L = /*@__PURE__*/getDefaultExportFromCjs(_version$K);\n\n\tvar lib$s = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.sha256 = exports.keccak256 = exports.pack = void 0;\n\n\n\n\n\n\tvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\n\tvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\n\tvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\tvar Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\n\n\tvar logger = new lib.Logger(_version$K.version);\n\tfunction _pack(type, value, isArray) {\n\t    switch (type) {\n\t        case \"address\":\n\t            if (isArray) {\n\t                return (0, lib$1.zeroPad)(value, 32);\n\t            }\n\t            return (0, lib$1.arrayify)(value);\n\t        case \"string\":\n\t            return (0, lib$8.toUtf8Bytes)(value);\n\t        case \"bytes\":\n\t            return (0, lib$1.arrayify)(value);\n\t        case \"bool\":\n\t            value = (value ? \"0x01\" : \"0x00\");\n\t            if (isArray) {\n\t                return (0, lib$1.zeroPad)(value, 32);\n\t            }\n\t            return (0, lib$1.arrayify)(value);\n\t    }\n\t    var match = type.match(regexNumber);\n\t    if (match) {\n\t        //let signed = (match[1] === \"int\")\n\t        var size = parseInt(match[2] || \"256\");\n\t        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n\t            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n\t        }\n\t        if (isArray) {\n\t            size = 256;\n\t        }\n\t        value = lib$2.BigNumber.from(value).toTwos(size);\n\t        return (0, lib$1.zeroPad)(value, size / 8);\n\t    }\n\t    match = type.match(regexBytes);\n\t    if (match) {\n\t        var size = parseInt(match[1]);\n\t        if (String(size) !== match[1] || size === 0 || size > 32) {\n\t            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n\t        }\n\t        if ((0, lib$1.arrayify)(value).byteLength !== size) {\n\t            logger.throwArgumentError(\"invalid value for \" + type, \"value\", value);\n\t        }\n\t        if (isArray) {\n\t            return (0, lib$1.arrayify)((value + Zeros).substring(0, 66));\n\t        }\n\t        return value;\n\t    }\n\t    match = type.match(regexArray);\n\t    if (match && Array.isArray(value)) {\n\t        var baseType_1 = match[1];\n\t        var count = parseInt(match[2] || String(value.length));\n\t        if (count != value.length) {\n\t            logger.throwArgumentError(\"invalid array length for \" + type, \"value\", value);\n\t        }\n\t        var result_1 = [];\n\t        value.forEach(function (value) {\n\t            result_1.push(_pack(baseType_1, value, true));\n\t        });\n\t        return (0, lib$1.concat)(result_1);\n\t    }\n\t    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n\t}\n\t// @TODO: Array Enum\n\tfunction pack(types, values) {\n\t    if (types.length != values.length) {\n\t        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n\t    }\n\t    var tight = [];\n\t    types.forEach(function (type, index) {\n\t        tight.push(_pack(type, values[index]));\n\t    });\n\t    return (0, lib$1.hexlify)((0, lib$1.concat)(tight));\n\t}\n\texports.pack = pack;\n\tfunction keccak256(types, values) {\n\t    return (0, lib$4.keccak256)(pack(types, values));\n\t}\n\texports.keccak256 = keccak256;\n\tfunction sha256(types, values) {\n\t    return (0, lib$h.sha256)(pack(types, values));\n\t}\n\texports.sha256 = sha256;\n\n\t});\n\n\tvar index$s = /*@__PURE__*/getDefaultExportFromCjs(lib$s);\n\n\tvar _version$M = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"units/5.5.0\";\n\n\t});\n\n\tvar _version$N = /*@__PURE__*/getDefaultExportFromCjs(_version$M);\n\n\tvar lib$t = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = exports.commify = void 0;\n\n\n\n\tvar logger = new lib.Logger(_version$M.version);\n\tvar names = [\n\t    \"wei\",\n\t    \"kwei\",\n\t    \"mwei\",\n\t    \"gwei\",\n\t    \"szabo\",\n\t    \"finney\",\n\t    \"ether\",\n\t];\n\t// Some environments have issues with RegEx that contain back-tracking, so we cannot\n\t// use them.\n\tfunction commify(value) {\n\t    var comps = String(value).split(\".\");\n\t    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n\t        logger.throwArgumentError(\"invalid value\", \"value\", value);\n\t    }\n\t    // Make sure we have at least one whole digit (0 if none)\n\t    var whole = comps[0];\n\t    var negative = \"\";\n\t    if (whole.substring(0, 1) === \"-\") {\n\t        negative = \"-\";\n\t        whole = whole.substring(1);\n\t    }\n\t    // Make sure we have at least 1 whole digit with no leading zeros\n\t    while (whole.substring(0, 1) === \"0\") {\n\t        whole = whole.substring(1);\n\t    }\n\t    if (whole === \"\") {\n\t        whole = \"0\";\n\t    }\n\t    var suffix = \"\";\n\t    if (comps.length === 2) {\n\t        suffix = \".\" + (comps[1] || \"0\");\n\t    }\n\t    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n\t        suffix = suffix.substring(0, suffix.length - 1);\n\t    }\n\t    var formatted = [];\n\t    while (whole.length) {\n\t        if (whole.length <= 3) {\n\t            formatted.unshift(whole);\n\t            break;\n\t        }\n\t        else {\n\t            var index = whole.length - 3;\n\t            formatted.unshift(whole.substring(index));\n\t            whole = whole.substring(0, index);\n\t        }\n\t    }\n\t    return negative + formatted.join(\",\") + suffix;\n\t}\n\texports.commify = commify;\n\tfunction formatUnits(value, unitName) {\n\t    if (typeof (unitName) === \"string\") {\n\t        var index = names.indexOf(unitName);\n\t        if (index !== -1) {\n\t            unitName = 3 * index;\n\t        }\n\t    }\n\t    return (0, lib$2.formatFixed)(value, (unitName != null) ? unitName : 18);\n\t}\n\texports.formatUnits = formatUnits;\n\tfunction parseUnits(value, unitName) {\n\t    if (typeof (value) !== \"string\") {\n\t        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n\t    }\n\t    if (typeof (unitName) === \"string\") {\n\t        var index = names.indexOf(unitName);\n\t        if (index !== -1) {\n\t            unitName = 3 * index;\n\t        }\n\t    }\n\t    return (0, lib$2.parseFixed)(value, (unitName != null) ? unitName : 18);\n\t}\n\texports.parseUnits = parseUnits;\n\tfunction formatEther(wei) {\n\t    return formatUnits(wei, 18);\n\t}\n\texports.formatEther = formatEther;\n\tfunction parseEther(ether) {\n\t    return parseUnits(ether, 18);\n\t}\n\texports.parseEther = parseEther;\n\n\t});\n\n\tvar index$t = /*@__PURE__*/getDefaultExportFromCjs(lib$t);\n\n\tvar utils$3 = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {\n\t    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n\t}) : function(o, v) {\n\t    o[\"default\"] = v;\n\t});\n\tvar __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {\n\t    if (mod && mod.__esModule) return mod;\n\t    var result = {};\n\t    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\t    __setModuleDefault(result, mod);\n\t    return result;\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;\n\texports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.parseBytes32String = void 0;\n\n\tObject.defineProperty(exports, \"AbiCoder\", { enumerable: true, get: function () { return lib$a.AbiCoder; } });\n\tObject.defineProperty(exports, \"checkResultErrors\", { enumerable: true, get: function () { return lib$a.checkResultErrors; } });\n\tObject.defineProperty(exports, \"ConstructorFragment\", { enumerable: true, get: function () { return lib$a.ConstructorFragment; } });\n\tObject.defineProperty(exports, \"defaultAbiCoder\", { enumerable: true, get: function () { return lib$a.defaultAbiCoder; } });\n\tObject.defineProperty(exports, \"ErrorFragment\", { enumerable: true, get: function () { return lib$a.ErrorFragment; } });\n\tObject.defineProperty(exports, \"EventFragment\", { enumerable: true, get: function () { return lib$a.EventFragment; } });\n\tObject.defineProperty(exports, \"FormatTypes\", { enumerable: true, get: function () { return lib$a.FormatTypes; } });\n\tObject.defineProperty(exports, \"Fragment\", { enumerable: true, get: function () { return lib$a.Fragment; } });\n\tObject.defineProperty(exports, \"FunctionFragment\", { enumerable: true, get: function () { return lib$a.FunctionFragment; } });\n\tObject.defineProperty(exports, \"Indexed\", { enumerable: true, get: function () { return lib$a.Indexed; } });\n\tObject.defineProperty(exports, \"Interface\", { enumerable: true, get: function () { return lib$a.Interface; } });\n\tObject.defineProperty(exports, \"LogDescription\", { enumerable: true, get: function () { return lib$a.LogDescription; } });\n\tObject.defineProperty(exports, \"ParamType\", { enumerable: true, get: function () { return lib$a.ParamType; } });\n\tObject.defineProperty(exports, \"TransactionDescription\", { enumerable: true, get: function () { return lib$a.TransactionDescription; } });\n\n\tObject.defineProperty(exports, \"getAddress\", { enumerable: true, get: function () { return lib$6.getAddress; } });\n\tObject.defineProperty(exports, \"getCreate2Address\", { enumerable: true, get: function () { return lib$6.getCreate2Address; } });\n\tObject.defineProperty(exports, \"getContractAddress\", { enumerable: true, get: function () { return lib$6.getContractAddress; } });\n\tObject.defineProperty(exports, \"getIcapAddress\", { enumerable: true, get: function () { return lib$6.getIcapAddress; } });\n\tObject.defineProperty(exports, \"isAddress\", { enumerable: true, get: function () { return lib$6.isAddress; } });\n\tvar base64 = __importStar(lib$p);\n\texports.base64 = base64;\n\n\tObject.defineProperty(exports, \"base58\", { enumerable: true, get: function () { return lib$g.Base58; } });\n\n\tObject.defineProperty(exports, \"arrayify\", { enumerable: true, get: function () { return lib$1.arrayify; } });\n\tObject.defineProperty(exports, \"concat\", { enumerable: true, get: function () { return lib$1.concat; } });\n\tObject.defineProperty(exports, \"hexConcat\", { enumerable: true, get: function () { return lib$1.hexConcat; } });\n\tObject.defineProperty(exports, \"hexDataSlice\", { enumerable: true, get: function () { return lib$1.hexDataSlice; } });\n\tObject.defineProperty(exports, \"hexDataLength\", { enumerable: true, get: function () { return lib$1.hexDataLength; } });\n\tObject.defineProperty(exports, \"hexlify\", { enumerable: true, get: function () { return lib$1.hexlify; } });\n\tObject.defineProperty(exports, \"hexStripZeros\", { enumerable: true, get: function () { return lib$1.hexStripZeros; } });\n\tObject.defineProperty(exports, \"hexValue\", { enumerable: true, get: function () { return lib$1.hexValue; } });\n\tObject.defineProperty(exports, \"hexZeroPad\", { enumerable: true, get: function () { return lib$1.hexZeroPad; } });\n\tObject.defineProperty(exports, \"isBytes\", { enumerable: true, get: function () { return lib$1.isBytes; } });\n\tObject.defineProperty(exports, \"isBytesLike\", { enumerable: true, get: function () { return lib$1.isBytesLike; } });\n\tObject.defineProperty(exports, \"isHexString\", { enumerable: true, get: function () { return lib$1.isHexString; } });\n\tObject.defineProperty(exports, \"joinSignature\", { enumerable: true, get: function () { return lib$1.joinSignature; } });\n\tObject.defineProperty(exports, \"zeroPad\", { enumerable: true, get: function () { return lib$1.zeroPad; } });\n\tObject.defineProperty(exports, \"splitSignature\", { enumerable: true, get: function () { return lib$1.splitSignature; } });\n\tObject.defineProperty(exports, \"stripZeros\", { enumerable: true, get: function () { return lib$1.stripZeros; } });\n\n\tObject.defineProperty(exports, \"_TypedDataEncoder\", { enumerable: true, get: function () { return lib$9._TypedDataEncoder; } });\n\tObject.defineProperty(exports, \"hashMessage\", { enumerable: true, get: function () { return lib$9.hashMessage; } });\n\tObject.defineProperty(exports, \"id\", { enumerable: true, get: function () { return lib$9.id; } });\n\tObject.defineProperty(exports, \"isValidName\", { enumerable: true, get: function () { return lib$9.isValidName; } });\n\tObject.defineProperty(exports, \"namehash\", { enumerable: true, get: function () { return lib$9.namehash; } });\n\n\tObject.defineProperty(exports, \"defaultPath\", { enumerable: true, get: function () { return lib$k.defaultPath; } });\n\tObject.defineProperty(exports, \"entropyToMnemonic\", { enumerable: true, get: function () { return lib$k.entropyToMnemonic; } });\n\tObject.defineProperty(exports, \"getAccountPath\", { enumerable: true, get: function () { return lib$k.getAccountPath; } });\n\tObject.defineProperty(exports, \"HDNode\", { enumerable: true, get: function () { return lib$k.HDNode; } });\n\tObject.defineProperty(exports, \"isValidMnemonic\", { enumerable: true, get: function () { return lib$k.isValidMnemonic; } });\n\tObject.defineProperty(exports, \"mnemonicToEntropy\", { enumerable: true, get: function () { return lib$k.mnemonicToEntropy; } });\n\tObject.defineProperty(exports, \"mnemonicToSeed\", { enumerable: true, get: function () { return lib$k.mnemonicToSeed; } });\n\n\tObject.defineProperty(exports, \"getJsonWalletAddress\", { enumerable: true, get: function () { return lib$m.getJsonWalletAddress; } });\n\n\tObject.defineProperty(exports, \"keccak256\", { enumerable: true, get: function () { return lib$4.keccak256; } });\n\n\tObject.defineProperty(exports, \"Logger\", { enumerable: true, get: function () { return lib.Logger; } });\n\n\tObject.defineProperty(exports, \"computeHmac\", { enumerable: true, get: function () { return lib$h.computeHmac; } });\n\tObject.defineProperty(exports, \"ripemd160\", { enumerable: true, get: function () { return lib$h.ripemd160; } });\n\tObject.defineProperty(exports, \"sha256\", { enumerable: true, get: function () { return lib$h.sha256; } });\n\tObject.defineProperty(exports, \"sha512\", { enumerable: true, get: function () { return lib$h.sha512; } });\n\n\tObject.defineProperty(exports, \"solidityKeccak256\", { enumerable: true, get: function () { return lib$s.keccak256; } });\n\tObject.defineProperty(exports, \"solidityPack\", { enumerable: true, get: function () { return lib$s.pack; } });\n\tObject.defineProperty(exports, \"soliditySha256\", { enumerable: true, get: function () { return lib$s.sha256; } });\n\n\tObject.defineProperty(exports, \"randomBytes\", { enumerable: true, get: function () { return lib$l.randomBytes; } });\n\tObject.defineProperty(exports, \"shuffled\", { enumerable: true, get: function () { return lib$l.shuffled; } });\n\n\tObject.defineProperty(exports, \"checkProperties\", { enumerable: true, get: function () { return lib$3.checkProperties; } });\n\tObject.defineProperty(exports, \"deepCopy\", { enumerable: true, get: function () { return lib$3.deepCopy; } });\n\tObject.defineProperty(exports, \"defineReadOnly\", { enumerable: true, get: function () { return lib$3.defineReadOnly; } });\n\tObject.defineProperty(exports, \"getStatic\", { enumerable: true, get: function () { return lib$3.getStatic; } });\n\tObject.defineProperty(exports, \"resolveProperties\", { enumerable: true, get: function () { return lib$3.resolveProperties; } });\n\tObject.defineProperty(exports, \"shallowCopy\", { enumerable: true, get: function () { return lib$3.shallowCopy; } });\n\tvar RLP = __importStar(lib$5);\n\texports.RLP = RLP;\n\n\tObject.defineProperty(exports, \"computePublicKey\", { enumerable: true, get: function () { return lib$d.computePublicKey; } });\n\tObject.defineProperty(exports, \"recoverPublicKey\", { enumerable: true, get: function () { return lib$d.recoverPublicKey; } });\n\tObject.defineProperty(exports, \"SigningKey\", { enumerable: true, get: function () { return lib$d.SigningKey; } });\n\n\tObject.defineProperty(exports, \"formatBytes32String\", { enumerable: true, get: function () { return lib$8.formatBytes32String; } });\n\tObject.defineProperty(exports, \"nameprep\", { enumerable: true, get: function () { return lib$8.nameprep; } });\n\tObject.defineProperty(exports, \"parseBytes32String\", { enumerable: true, get: function () { return lib$8.parseBytes32String; } });\n\tObject.defineProperty(exports, \"_toEscapedUtf8String\", { enumerable: true, get: function () { return lib$8._toEscapedUtf8String; } });\n\tObject.defineProperty(exports, \"toUtf8Bytes\", { enumerable: true, get: function () { return lib$8.toUtf8Bytes; } });\n\tObject.defineProperty(exports, \"toUtf8CodePoints\", { enumerable: true, get: function () { return lib$8.toUtf8CodePoints; } });\n\tObject.defineProperty(exports, \"toUtf8String\", { enumerable: true, get: function () { return lib$8.toUtf8String; } });\n\tObject.defineProperty(exports, \"Utf8ErrorFuncs\", { enumerable: true, get: function () { return lib$8.Utf8ErrorFuncs; } });\n\n\tObject.defineProperty(exports, \"accessListify\", { enumerable: true, get: function () { return lib$e.accessListify; } });\n\tObject.defineProperty(exports, \"computeAddress\", { enumerable: true, get: function () { return lib$e.computeAddress; } });\n\tObject.defineProperty(exports, \"parseTransaction\", { enumerable: true, get: function () { return lib$e.parse; } });\n\tObject.defineProperty(exports, \"recoverAddress\", { enumerable: true, get: function () { return lib$e.recoverAddress; } });\n\tObject.defineProperty(exports, \"serializeTransaction\", { enumerable: true, get: function () { return lib$e.serialize; } });\n\tObject.defineProperty(exports, \"TransactionTypes\", { enumerable: true, get: function () { return lib$e.TransactionTypes; } });\n\n\tObject.defineProperty(exports, \"commify\", { enumerable: true, get: function () { return lib$t.commify; } });\n\tObject.defineProperty(exports, \"formatEther\", { enumerable: true, get: function () { return lib$t.formatEther; } });\n\tObject.defineProperty(exports, \"parseEther\", { enumerable: true, get: function () { return lib$t.parseEther; } });\n\tObject.defineProperty(exports, \"formatUnits\", { enumerable: true, get: function () { return lib$t.formatUnits; } });\n\tObject.defineProperty(exports, \"parseUnits\", { enumerable: true, get: function () { return lib$t.parseUnits; } });\n\n\tObject.defineProperty(exports, \"verifyMessage\", { enumerable: true, get: function () { return lib$n.verifyMessage; } });\n\tObject.defineProperty(exports, \"verifyTypedData\", { enumerable: true, get: function () { return lib$n.verifyTypedData; } });\n\n\tObject.defineProperty(exports, \"_fetchData\", { enumerable: true, get: function () { return lib$q._fetchData; } });\n\tObject.defineProperty(exports, \"fetchJson\", { enumerable: true, get: function () { return lib$q.fetchJson; } });\n\tObject.defineProperty(exports, \"poll\", { enumerable: true, get: function () { return lib$q.poll; } });\n\t////////////////////////\n\t// Enums\n\tvar sha2_2 = lib$h;\n\tObject.defineProperty(exports, \"SupportedAlgorithm\", { enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } });\n\tvar strings_2 = lib$8;\n\tObject.defineProperty(exports, \"UnicodeNormalizationForm\", { enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } });\n\tObject.defineProperty(exports, \"Utf8ErrorReason\", { enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } });\n\n\t});\n\n\tvar utils$4 = /*@__PURE__*/getDefaultExportFromCjs(utils$3);\n\n\tvar _version$O = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.version = void 0;\n\texports.version = \"ethers/5.5.1\";\n\n\t});\n\n\tvar _version$P = /*@__PURE__*/getDefaultExportFromCjs(_version$O);\n\n\tvar ethers = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {\n\t    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n\t}) : function(o, v) {\n\t    o[\"default\"] = v;\n\t});\n\tvar __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {\n\t    if (mod && mod.__esModule) return mod;\n\t    var result = {};\n\t    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\t    __setModuleDefault(result, mod);\n\t    return result;\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = void 0;\n\n\tObject.defineProperty(exports, \"BaseContract\", { enumerable: true, get: function () { return lib$f.BaseContract; } });\n\tObject.defineProperty(exports, \"Contract\", { enumerable: true, get: function () { return lib$f.Contract; } });\n\tObject.defineProperty(exports, \"ContractFactory\", { enumerable: true, get: function () { return lib$f.ContractFactory; } });\n\n\tObject.defineProperty(exports, \"BigNumber\", { enumerable: true, get: function () { return lib$2.BigNumber; } });\n\tObject.defineProperty(exports, \"FixedNumber\", { enumerable: true, get: function () { return lib$2.FixedNumber; } });\n\n\tObject.defineProperty(exports, \"Signer\", { enumerable: true, get: function () { return lib$c.Signer; } });\n\tObject.defineProperty(exports, \"VoidSigner\", { enumerable: true, get: function () { return lib$c.VoidSigner; } });\n\n\tObject.defineProperty(exports, \"Wallet\", { enumerable: true, get: function () { return lib$n.Wallet; } });\n\tvar constants = __importStar(lib$7);\n\texports.constants = constants;\n\tvar providers = __importStar(lib$r);\n\texports.providers = providers;\n\tvar providers_1 = lib$r;\n\tObject.defineProperty(exports, \"getDefaultProvider\", { enumerable: true, get: function () { return providers_1.getDefaultProvider; } });\n\n\tObject.defineProperty(exports, \"Wordlist\", { enumerable: true, get: function () { return lib$j.Wordlist; } });\n\tObject.defineProperty(exports, \"wordlists\", { enumerable: true, get: function () { return lib$j.wordlists; } });\n\tvar utils = __importStar(utils$3);\n\texports.utils = utils;\n\n\tObject.defineProperty(exports, \"errors\", { enumerable: true, get: function () { return lib.ErrorCode; } });\n\t////////////////////////\n\t// Compile-Time Constants\n\t// This is generated by \"npm run dist\"\n\n\tObject.defineProperty(exports, \"version\", { enumerable: true, get: function () { return _version$O.version; } });\n\tvar logger = new lib.Logger(_version$O.version);\n\texports.logger = logger;\n\n\t});\n\n\tvar ethers$1 = /*@__PURE__*/getDefaultExportFromCjs(ethers);\n\n\tvar lib$u = createCommonjsModule(function (module, exports) {\n\t\"use strict\";\n\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t}) : (function(o, m, k, k2) {\n\t    if (k2 === undefined) k2 = k;\n\t    o[k2] = m[k];\n\t}));\n\tvar __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {\n\t    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n\t}) : function(o, v) {\n\t    o[\"default\"] = v;\n\t});\n\tvar __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {\n\t    if (mod && mod.__esModule) return mod;\n\t    var result = {};\n\t    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\t    __setModuleDefault(result, mod);\n\t    return result;\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Wordlist = exports.version = exports.wordlists = exports.utils = exports.logger = exports.errors = exports.constants = exports.FixedNumber = exports.BigNumber = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.providers = exports.getDefaultProvider = exports.VoidSigner = exports.Wallet = exports.Signer = exports.ethers = void 0;\n\t// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\n\tvar ethers$1 = __importStar(ethers);\n\texports.ethers = ethers$1;\n\ttry {\n\t    var anyGlobal = window;\n\t    if (anyGlobal._ethers == null) {\n\t        anyGlobal._ethers = ethers$1;\n\t    }\n\t}\n\tcatch (error) { }\n\tvar ethers_1 = ethers;\n\tObject.defineProperty(exports, \"Signer\", { enumerable: true, get: function () { return ethers_1.Signer; } });\n\tObject.defineProperty(exports, \"Wallet\", { enumerable: true, get: function () { return ethers_1.Wallet; } });\n\tObject.defineProperty(exports, \"VoidSigner\", { enumerable: true, get: function () { return ethers_1.VoidSigner; } });\n\tObject.defineProperty(exports, \"getDefaultProvider\", { enumerable: true, get: function () { return ethers_1.getDefaultProvider; } });\n\tObject.defineProperty(exports, \"providers\", { enumerable: true, get: function () { return ethers_1.providers; } });\n\tObject.defineProperty(exports, \"BaseContract\", { enumerable: true, get: function () { return ethers_1.BaseContract; } });\n\tObject.defineProperty(exports, \"Contract\", { enumerable: true, get: function () { return ethers_1.Contract; } });\n\tObject.defineProperty(exports, \"ContractFactory\", { enumerable: true, get: function () { return ethers_1.ContractFactory; } });\n\tObject.defineProperty(exports, \"BigNumber\", { enumerable: true, get: function () { return ethers_1.BigNumber; } });\n\tObject.defineProperty(exports, \"FixedNumber\", { enumerable: true, get: function () { return ethers_1.FixedNumber; } });\n\tObject.defineProperty(exports, \"constants\", { enumerable: true, get: function () { return ethers_1.constants; } });\n\tObject.defineProperty(exports, \"errors\", { enumerable: true, get: function () { return ethers_1.errors; } });\n\tObject.defineProperty(exports, \"logger\", { enumerable: true, get: function () { return ethers_1.logger; } });\n\tObject.defineProperty(exports, \"utils\", { enumerable: true, get: function () { return ethers_1.utils; } });\n\tObject.defineProperty(exports, \"wordlists\", { enumerable: true, get: function () { return ethers_1.wordlists; } });\n\t////////////////////////\n\t// Compile-Time Constants\n\tObject.defineProperty(exports, \"version\", { enumerable: true, get: function () { return ethers_1.version; } });\n\tObject.defineProperty(exports, \"Wordlist\", { enumerable: true, get: function () { return ethers_1.Wordlist; } });\n\n\t});\n\n\tvar index$u = /*@__PURE__*/getDefaultExportFromCjs(lib$u);\n\n\treturn index$u;\n\n})));\n//# sourceMappingURL=ethers.umd.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/ethers/dist/ethers.umd.js\n");

/***/ }),

/***/ "../node_modules/process/browser.js":
/*!******************************************!*\
  !*** ../node_modules/process/browser.js ***!
  \******************************************/
/***/ (function(module) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/process/browser.js\n");

/***/ })

});