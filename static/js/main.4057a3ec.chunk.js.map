{"version":3,"sources":["components/NetworkErrorMessage.js","components/ConnectWallet.js","components/Loading.js","components/TransactionErrorMessage.js","components/WaitingForTransactionMessage.js","components/BitmapEditor.js","components/Calendar.js","components/Dapp.js","index.js"],"names":["NetworkErrorMessage","message","dismiss","className","role","type","onClick","ConnectWallet","connectWallet","networkError","style","position","left","color","backgroundColor","border","paddingLeft","paddingRight","borderRadius","lineHeight","fontWeight","borderColor","padding","margin","href","width","src","Loading","zIndex","top","height","background","marginLeft","marginTop","textAlign","TransactionErrorMessage","substring","WaitingForTransactionMessage","txHash","BORDER_COLOR","emptyMatrix","Array","apply","map","Pixel","styled","div","props","isGridVisible","Flex","Card","GridWrapper","isBorderVisible","BitmapEditor","children","onChange","useState","setIsGridVisible","defaultColor","rawColorText","setRawColorText","lastValidColor","setLastValidColor","newColor","test","useColorManager","activeColor","setActiveColor","defaultState","state","setState","row","column","value","newState","slice","useGridState","setPixelColor","resetMatrix","isMouseDown","setIsMouseDown","useEffect","setMouseDown","setMouseUp","window","addEventListener","removeEventListener","useIsMouseDown","_","onMouseDown","onMouseUp","onMouseOver","e","target","Backdrop","ClientOnlyPortal","element","document","createElement","this","modalRoot","querySelector","selector","appendChild","removeChild","createPortal","Component","CalendarCellEditorModal","onBuyClick","day","showModal","setShowModal","bitmap","setBitmap","stopPropagation","chunk","arr","len","chunks","i","n","length","push","Number","span","CalendarCell","month","year","web3","owner","setOwner","a","dateOwners","res","tokenURI","match","console","log","alert","Dot","Grid","monthNames","daysInMonth","m","y","Calendar","onDateClick","renderDayCell","Date","now","setNow","daysThisMonth","getMonth","getFullYear","daysLastMonth","dayOfWeekStart","getDay","remainderDays","days","date","strDate","toString","flex","newDate","setMonth","Dapp","initialState","tokenData","undefined","selectedAddress","balance","txBeingSent","transactionError","_getRpcErrorMessage","_dismissTransactionError","_calendar","_buyDate","bind","_connectWallet","_dismissNetworkError","ethereum","enable","_checkNetwork","_initialize","on","newAddress","_resetState","userAddress","_intializeEthers","_provider","ethers","providers","Web3Provider","Contract","contractAddress","BillionDollarCalendar","BillionDollarCalendarArtifact","abi","getSigner","nov10","nov11","nov12","nov13","nov14","nov15","to","amount","transfer","tx","hash","wait","status","Error","_updateBalance","code","error","nonTransparentBitmap","x","join","replace","buyDate","data","React","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4057a3ec.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function NetworkErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      {message}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { NetworkErrorMessage } from \"./NetworkErrorMessage\";\n\nexport function ConnectWallet({ connectWallet, networkError, dismiss }) {\n  return (\n    <div className=\"container\">\n      <div className=\"justify-content-md-center\">\n        <div className=\"col-12 text-center\">\n          {/* Metamask network should be set to Localhost:8545. */}\n          {networkError && (\n            <NetworkErrorMessage message={networkError} dismiss={dismiss} />\n          )}\n        </div>\n        <div className=\"p-4 text-center\">\n          <span\n            style={{\n              position: \"absolute\",\n            }}\n          >\n            <div\n              style={{\n                position: \"relative\",\n                left: 180,\n                color: \"#F44336\",\n                backgroundColor: \"F44336\",\n                border: \"2px solid #F44336\",\n                paddingLeft: 4,\n                paddingRight: 4,\n                borderRadius: 4,\n                lineHeight: \"18px\",\n                fontWeight: \"bold\",\n              }}\n            >\n              Beta\n            </div>\n          </span>\n          <h2>BillionDollarCalendar.com</h2>\n          <h2>Own a piece of history!</h2>\n          <button\n            style={{\n              borderColor: \"#F44336\",\n              backgroundColor: \"#F44331\",\n              padding: 20,\n              color: \"white\",\n              fontWeight: \"bold\",\n              margin: 20,\n            }}\n            className=\"btn\"\n            type=\"button\"\n            onClick={connectWallet}\n          >\n            Connect Metamask Wallet\n          </button>\n          <h4>\n            Please connect to an ethereum wallet using metamask to get started.\n          </h4>\n        </div>\n\n        <div className=\"p-4\">\n          <h2>Instructions:</h2>\n          <div className=\"p-4\">\n            <h4>Metamask</h4>\n            <ol>\n              <li>\n                Install{\" \"}\n                <a href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\">\n                  metamask\n                </a>\n              </li>\n              <li>Switch metamask to Ropsten Network</li>\n              <li>Create/Choose account you want to use.</li>\n            </ol>\n            <h4>Get Test Ether</h4>\n\n            <ol>\n              <li>\n                Go to{\" \"}\n                <a href=\"https://faucet.ropsten.be/\">\n                  https://faucet.ropsten.be/\n                </a>\n              </li>\n              <li>\n                Paste in your wallet address to get some ropsten test ether\n              </li>\n            </ol>\n            <h4>Buy A Date</h4>\n\n            <ol>\n              <li>Go to billiondollarcalendar.com</li>\n              <li>click \"Connect Metamask Wallet\" button</li>\n              <li>Choose account with test ether</li>\n              <li>Pick any date</li>\n              <li>draw your diagram</li>\n              <li>Click buy and finish transaction with metamask</li>\n              <li>\n                <b>Own that date for ever or trade it as an NFT.</b>\n              </li>\n            </ol>\n          </div>\n        </div>\n        <h3>Demo:</h3>\n        <img\n          width=\"80%\"\n          src=\"https://user-images.githubusercontent.com/324928/141642456-2d3c511e-2837-4b48-8e9a-a9457878bf79.gif\"\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function Loading() {\n  return (\n    <div\n      style={{\n        position: \"fixed\",\n        zIndex: 2,\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        background: \"rgba(255, 255, 255, 0.5)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 3,\n          top: \"50%\",\n          left: \"50%\",\n          width: \"100px\",\n          height: \"50px\",\n          marginLeft: \"-50px\",\n          marginTop: \" -25px\",\n          textAlign: \"center\",\n        }}\n      >\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function TransactionErrorMessage({ message, dismiss }) {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      Error sending transaction: {message.substring(0, 100)}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={dismiss}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function WaitingForTransactionMessage({ txHash }) {\n  return (\n    <div className=\"alert alert-info\" role=\"alert\">\n      Waiting for transaction <strong>{txHash}</strong> to be mined\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\n// Will change how big of bitmap image we are creating\nconst MATRIX_SIZE = 16; // TODO matrix should be configurable should only recreate test arrays if size changes\nconst BORDER_COLOR = \"#666\";\n\nconst emptyMatrix = Array.apply(null, Array(MATRIX_SIZE)).map(() =>\n  Array.apply(null, Array(MATRIX_SIZE))\n);\n\nconst Pixel = styled.div`\n  width: 19px;\n  height: 19px;\n  line-height: 19px;\n  border-right: ${(props) =>\n    props.isGridVisible\n      ? `1px dotted ${BORDER_COLOR}`\n      : \"1px solid transparent\"};\n  border-bottom: ${(props) =>\n    props.isGridVisible\n      ? `1px dotted ${BORDER_COLOR}`\n      : \"1px solid transparent\"};\n  background-color: ${(props) => props.backgroundColor};\n`;\n\nconst Flex = styled.div`\n  display: flex;\n`;\n\nconst Card = styled.div`\n  background: white;\n  border-radius: 4px;\n  box-shadow: 0 5px 10px 0 hsl(0deg 0% 78% / 20%);\n  margin: 6px;\n  padding: 6px;\n`;\n\nconst GridWrapper = styled.div`\n  border: ${(props) =>\n    props.isBorderVisible\n      ? `1px dotted ${BORDER_COLOR}`\n      : \"1px solid transparent\"};\n`;\n\n// Hook to track if the user is holding the mouse down.\nconst useIsMouseDown = () => {\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  useEffect(() => {\n    const setMouseDown = () => setIsMouseDown(true);\n    const setMouseUp = () => setIsMouseDown(false);\n    window.addEventListener(\"mousedown\", setMouseDown);\n    window.addEventListener(\"mouseup\", setMouseUp);\n\n    return () => {\n      window.removeEventListener(\"mousedown\", setMouseDown);\n      window.removeEventListener(\"mouseup\", setMouseUp);\n    };\n  }, []);\n\n  return isMouseDown;\n};\n\n// Hook to make setting nested state in our matrix easier.\nconst useGridState = (defaultState, onChange) => {\n  const [state, setState] = useState(defaultState);\n  const resetMatrix = () => setState(defaultState);\n  const setCell = (row, column, value) => {\n    const newState = [\n      ...state.slice(0, row),\n      [...state[row].slice(0, column), value, ...state[row].slice(column + 1)],\n      ...state.slice(row + 1),\n    ];\n    setState(newState);\n    onChange(newState);\n  };\n\n  return [state, setCell, resetMatrix];\n};\n\n// Hook to help validate custom input on colors\nconst useColorManager = (defaultColor) => {\n  const [rawColorText, setRawColorText] = useState(defaultColor);\n  const [lastValidColor, setLastValidColor] = useState(defaultColor);\n  const setColorWrapper = (newColor) => {\n    setRawColorText(newColor);\n    if (/#[0-9A-Fa-f]{3}/.test(newColor)) {\n      setLastValidColor(newColor);\n    }\n  };\n  return [lastValidColor, setColorWrapper, rawColorText];\n};\n\nexport const BitmapEditor = ({ children, onChange }) => {\n  const [isGridVisible, setIsGridVisible] = useState(true);\n  const [activeColor, setActiveColor, rawColorText] = useColorManager(\"#000\");\n  const [state, setPixelColor, resetMatrix] = useGridState(\n    emptyMatrix,\n    onChange\n  );\n  const isMouseDown = useIsMouseDown();\n\n  return (\n    <Flex>\n      <GridWrapper isBorderVisible={!isGridVisible}>\n        {state.map((_, row) => (\n          <Flex key={row}>\n            {state[row].map((_, column) => (\n              <Pixel\n                isGridVisible={isGridVisible}\n                backgroundColor={state[row][column] || \"transparent\"}\n                key={`${row} - ${column}`}\n                onMouseDown={() => setPixelColor(row, column, activeColor)}\n                onMouseUp={() => setPixelColor(row, column, activeColor)}\n                onMouseOver={() => {\n                  if (isMouseDown) {\n                    setPixelColor(row, column, activeColor);\n                  }\n                }}\n              />\n            ))}\n          </Flex>\n        ))}\n      </GridWrapper>\n      <div>\n        <Card>\n          <button onClick={resetMatrix}>Clear</button>\n        </Card>\n        <Card>\n          <button onClick={() => setActiveColor(\"#F00\")}>Red</button>\n          <button onClick={() => setActiveColor(\"#00F\")}>Blue</button>\n          <button onClick={() => setActiveColor(\"#0F0\")}>Green</button>\n          <input\n            onChange={(e) => setActiveColor(e.target.value)}\n            value={rawColorText}\n          />\n        </Card>\n        <Card>\n          <button onClick={() => setIsGridVisible(!isGridVisible)}>\n            Toggle Grid\n          </button>\n        </Card>\n        <Card>{children}</Card>\n      </div>\n    </Flex>\n  );\n};\n\nexport default BitmapEditor;\n","import { useRef, useEffect, useState, Component } from \"react\";\nimport styled from \"styled-components\";\nimport { createPortal } from \"react-dom\";\nimport BitmapEditor from \"./BitmapEditor\";\nconst MATRIX_SIZE = 16; // TODO matrix should be configurable should only recreate test arrays if size changes\nconst BORDER_COLOR = \"#666\";\nconst Backdrop = styled.div`\n  position: fixed;\n  background-color: rgba(0, 0, 0, 0.7);\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\nconst Card = styled.div`\n  background: white;\n  border-radius: 4px;\n  box-shadow: 0 5px 10px 0 hsl(0deg 0% 78% / 20%);\n  margin: 6px;\n  padding: 6px;\n`;\n\nclass ClientOnlyPortal extends Component {\n  constructor(props) {\n    super(props);\n    // We create an element div for this modal\n    this.element = document.createElement(\"div\");\n  }\n  // We append the created div to the div#modal\n  componentDidMount() {\n    this.modalRoot = document.querySelector(this.props.selector);\n    this.modalRoot.appendChild(this.element);\n  }\n  /**\n   * We remove the created div when this Modal Component is unmounted\n   * Used to clean up the memory to avoid memory leak\n   */\n  componentWillUnmount() {\n    this.modalRoot.removeChild(this.element);\n  }\n  render() {\n    return createPortal(this.props.children, this.element);\n  }\n}\n\nconst CalendarCellEditorModal = ({ onBuyClick, day }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [bitmap, setBitmap] = useState();\n  return (\n    <>\n      <div\n        className=\"cell\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n      >\n        {day}\n      </div>\n      {showModal && (\n        <ClientOnlyPortal selector=\"#modal\">\n          <Backdrop onClick={() => setShowModal(false)}>\n            <Card onClick={(e) => e.stopPropagation()}>\n              <BitmapEditor onChange={setBitmap}>\n                <button onClick={() => onBuyClick(bitmap)}>Buy</button>\n              </BitmapEditor>\n            </Card>\n          </Backdrop>\n        </ClientOnlyPortal>\n      )}\n    </>\n  );\n};\n\nconst Pixel = styled.div`\n  width: 6px;\n  height: 6px;\n  line-height: 6px;\n  border-right: ${(props) =>\n    props.isGridVisible\n      ? `1px dotted ${BORDER_COLOR}`\n      : \"1px solid transparent\"};\n  border-bottom: ${(props) =>\n    props.isGridVisible\n      ? `1px dotted ${BORDER_COLOR}`\n      : \"1px solid transparent\"};\n  background-color: ${(props) => props.backgroundColor};\n`;\nfunction chunk(arr, len) {\n  var chunks = [],\n    i = 0,\n    n = arr.length;\n\n  while (i < n) {\n    chunks.push(arr.slice(i, (i += len)));\n  }\n\n  return chunks;\n}\nconst Number = styled.span`\n  position: absolute;\n  background-color: rgba(255, 255, 255, 0.7);\n`;\n\nconst CalendarCell = ({ month, day, year, web3, onClick }) => {\n  const [owner, setOwner] = useState();\n  const [bitmap, setBitmap] = useState();\n  useEffect(async () => {\n    const res = await web3?.dateOwners(`${month}/${day}/${year}`);\n    if (res?.owner) {\n      setOwner(res.owner);\n      const tokenURI = res.tokenURI.match(/.{1,3}/g);\n      if (tokenURI?.length) {\n        setBitmap(chunk(tokenURI, MATRIX_SIZE));\n      }\n    }\n  }, [month, day, year, web3]); // TODO figure out how to rerun this effect when tx is complete for cell that was bought\n  if (owner !== \"0x0000000000000000000000000000000000000000\") {\n    if (bitmap) {\n      console.log(bitmap);\n      return (\n        <div className=\"cell\" onClick={() => alert(`Owned by ${owner}`)}>\n          <Number> {day}</Number>\n          {bitmap.map((_, row) => (\n            <Flex>\n              {bitmap[row].map((value, column) => (\n                <Pixel\n                  key={`${row} - ${column}`}\n                  backgroundColor={`#${bitmap[row][column]}` || \"transparent\"}\n                />\n              ))}\n            </Flex>\n          ))}\n        </div>\n      );\n    }\n    return (\n      <div className=\"cell\" onClick={() => alert(`Owned by ${owner}`)}>\n        {day}\n        <Dot />\n      </div>\n    );\n  }\n  return <CalendarCellEditorModal onBuyClick={onClick} day={day} />;\n};\n\nconst Flex = styled.div`\n  display: flex;\n`;\nconst Grid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  min-width: 800px;\n  .cell {\n    flex-grow: 1;\n    width: calc(100% / 7 - 7px);\n    height: 110px;\n    border: 1px solid #666;\n    position: relative;\n  }\n`;\n\nconst Dot = styled.div`\n  display: block;\n  width: 6px;\n  height: 6px;\n  background-color: red;\n  border-radius: 100%;\n`;\n\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nfunction daysInMonth(m, y) {\n  if (m == 1) {\n    return (y % 4 == 0 && y % 100 != 0) || y % 400 == 0 ? 29 : 28;\n  }\n  if (m == 3 || m == 5 || m == 8 || m == 10) {\n    return 30;\n  }\n  return 31;\n}\n\nexport const Calendar = ({ onDateClick, renderDayCell, web3 }) => {\n  const [now, setNow] = useState(new Date());\n  const daysThisMonth = daysInMonth(now.getMonth(), now.getFullYear());\n  const daysLastMonth =\n    now.getMonth() === 0\n      ? daysInMonth(now.getMonth() - 1, now.getFullYear() - 1)\n      : daysInMonth(now.getMonth() - 1, now.getFullYear());\n  const dayOfWeekStart = new Date(\n    `${now.getMonth() + 1}/1/${now.getFullYear()}`\n  ).getDay();\n  const remainderDays = 7 - ((daysThisMonth + dayOfWeekStart) % 7);\n\n  let days = [];\n  for (let i = 1; i <= daysThisMonth + dayOfWeekStart + remainderDays; i++) {\n    let date = i - dayOfWeekStart;\n    if (date > daysThisMonth) {\n      const day = i - (daysThisMonth + dayOfWeekStart);\n      let month = now.getMonth() + 2;\n      let year = now.getFullYear();\n      if (month > 11) {\n        year++;\n        month = 1;\n      }\n      days.push(\n        <CalendarCell\n          onClick={(bitmap) => {\n            const strDate = `${month}/${day}/${year}`;\n            console.log(strDate);\n            console.log(new Date(strDate).toString());\n            onDateClick(month, day, year, bitmap);\n          }}\n          {...{ month, day, year, web3 }}\n        />\n      );\n    } else if (date > 0) {\n      const month = now.getMonth() + 1;\n      const day = date;\n      const year = now.getFullYear();\n      days.push(\n        <CalendarCell\n          onClick={(bitmap) => {\n            const strDate = `${month}/${day}/${year}`;\n            console.log(strDate);\n            console.log(new Date(strDate).toString());\n            onDateClick(month, day, year, bitmap);\n          }}\n          {...{ month, day, year, web3 }}\n        />\n      );\n    } else {\n      let month = now.getMonth();\n      const day = daysLastMonth - (dayOfWeekStart - i);\n      let year = now.getFullYear();\n      if (month === 0) {\n        year--;\n        month = 12;\n      }\n      days.push(\n        <CalendarCell\n          onClick={(bitmap) => {\n            const strDate = `${month}/${day}/${year}`;\n            console.log(strDate);\n            console.log(new Date(strDate).toString());\n            onDateClick(month, day, year, bitmap);\n          }}\n          {...{ month, day, year, web3 }}\n        />\n      );\n    }\n  }\n  return (\n    <div>\n      <Flex>\n        <h1 style={{ flex: 1 }}>\n          {monthNames[now.getMonth()]} {now.getFullYear()}\n        </h1>\n        <div style={{ flex: 1 }} />\n        <div>\n          <button\n            onClick={() => {\n              const newDate = new Date(now);\n              newDate.setMonth(newDate.getMonth() - 1);\n              setNow(newDate);\n            }}\n          >\n            &lt; prev &lt;\n          </button>\n          &nbsp;\n          <button\n            onClick={() => {\n              setNow(new Date());\n            }}\n          >\n            Today\n          </button>\n          &nbsp;\n          <button\n            onClick={() => {\n              const newDate = new Date(now);\n              newDate.setMonth(newDate.getMonth() + 1);\n              setNow(newDate);\n            }}\n          >\n            &gt; next &gt;\n          </button>\n        </div>\n      </Flex>\n\n      <Grid>{days}</Grid>\n    </div>\n  );\n};\n\nexport default Calendar;\n","import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport BillionDollarCalendarArtifact from \"../contracts/BillionDollarCalendar.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { NoWalletDetected } from \"./NoWalletDetected\";\nimport { ConnectWallet } from \"./ConnectWallet\";\nimport { Loading } from \"./Loading\";\nimport { Transfer } from \"./Transfer\";\nimport { TransactionErrorMessage } from \"./TransactionErrorMessage\";\nimport { WaitingForTransactionMessage } from \"./WaitingForTransactionMessage\";\nimport Calendar from \"./Calendar\";\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    // if (window.ethereum === undefined) {\n    //   return <NoWalletDetected />;\n    // }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet \n          connectWallet={() => this._connectWallet()} \n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n    }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n    if (!this.state.selectedAddress) {\n      return <Loading />;\n    }\n\n    // If everything is loaded, we render the application.\n    return (\n      <div className=\"container p-4\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1>\n              {/* {this.state.tokenData.name} ({this.state.tokenData.symbol}) */}\n            </h1>\n            <p>\n              Welcome <b>{this.state.selectedAddress}</b>\n              <b>\n                {/* {this.state.balance.toString()} {this.state.tokenData.symbol} */}\n              </b>\n              .\n            </p>\n          </div>\n        </div>\n\n        <hr />\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            {/* \n              Sending a transaction isn't an immidiate action. You have to wait\n              for it to be mined.\n              If we are waiting for one, we show a message here.\n            */}\n            {this.state.txBeingSent && (\n              <WaitingForTransactionMessage txHash={this.state.txBeingSent} />\n            )}\n\n            {/* \n              Sending a transaction can fail in multiple ways. \n              If that happened, we show a message here.\n            */}\n            {this.state.transactionError && (\n              <TransactionErrorMessage\n                message={this._getRpcErrorMessage(this.state.transactionError)}\n                dismiss={() => this._dismissTransactionError()}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <Calendar web3={this._calendar} onDateClick={this._buyDate.bind(this)} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n      \n      this._initialize(newAddress);\n    });\n    \n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._calendar = new ethers.Contract(\n      contractAddress.BillionDollarCalendar,\n      BillionDollarCalendarArtifact.abi,\n      this._provider.getSigner(0)\n    );\n\n    const nov10 = (await this._calendar.dateOwners(\"11/10/2020\"))[0];\n    const nov11 = (await this._calendar.dateOwners(\"11/11/2020\"))[0];\n    const nov12 = (await this._calendar.dateOwners(\"11/12/2020\"))[0];\n    const nov13 = (await this._calendar.dateOwners(\"11/13/2020\"))[0];\n    const nov14 = (await this._calendar.dateOwners(\"11/14/2020\"))[0];\n    const nov15 = (await this._calendar.dateOwners(\"11/15/2020\"))[0];\n    this.setState( {\n      nov10,\nnov11,\nnov12,\nnov13,\nnov14,\nnov15,\n    })\n  }\n\n  // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._calendar.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n    // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n  async _buyDate(month, day, year, bitmap) {\n    console.log(bitmap)\n    const nonTransparentBitmap = bitmap.map(row => row.map(x => x || \"#FFF\").join('')).join(\"\").replace(/#/g, \"\");\n    console.log(nonTransparentBitmap)\n\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._calendar.buyDate(month, day, year, nonTransparentBitmap);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that made the transaction fail when it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      // await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    // if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    // }\n\n    // this.setState({ \n    //   networkError: 'Please connect Metamask to Localhost:8545'\n    // });\n\n    // return false;\n  }\n}\n\nexport default Dapp;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Dapp } from \"./components/Dapp\";\n\n// We import bootstrap here, but you can remove if you want\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// This is the entry point of your application, but it just renders the Dapp\n// react component. All of the logic is contained in it.\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dapp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}